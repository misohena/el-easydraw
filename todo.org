
* Inbox
** TODO 選択ツールで選択図形の色をツールバーから変更できるようにする
選択ツールでは、現在選択中の図形のstrokeとfill色をツールバーに表示する。
それをクリックしたらカラーピッカーが出て、色を指定したら選択中の図形のstrokeやfillが変わるようにする。
[[*設定/ツールバーで色を変えたら選択中の図形も変更する][設定/ツールバーで色を変えたら選択中の図形も変更する]]と関係あるが、選択ツールの挙動のみ変える。他のツールでは引き続きこれから作成する図形の色を指定する。

現在は図形の色を変えるのが面倒くさい。右クリック→設定→塗りなどと選ぶのが面倒くさい(せめて設定がコンテキストメニューの一番上にあれば)。選択してp fを押すのが一番簡単だが、これはマウスで選択してからわざわざマウスから手を離してキーボードを押さなければならない(左手で押せるキーなら問題は少ないが)。

** TODO 点接続/図形のコピー・ペースト時に点接続も復元する
** TODO 点接続/アンカーの接着位置をドラッグで変更できるようにする
条件が色々難しい。
UMLクラス図の横線をドラッグで上下に移動させたいのだけど。

** TODO 点接続/OBJPTの点の範囲をAABB内に制限できるようにする
接着先図形の大きさを変えたときに、接着しているアンカーがターゲットの図形から過度に離れないようにしたい。
UMLクラス図の横線が矩形から外に出ないようにしたいのだけど。

** TODO edraw-modeでバッファのmodifiedフラグが立たない :BUG:
保存済みのedraw.svgファイルに対して、プロパティエディタで図形のプロパティを変更してもバッファのmodifiedフラグが立たない。

** TODO テキストのデフォルトフォントをどうするか
現在のsans-serifは可変ピッチなので使いづらい。
昔はこれを指定しないと日本語が表示できなかったので指定したが、今は普通に表示できるようになった。いつからだろう。

** TODO テキストの空白処理によって境界矩形を調整する
text要素のspace属性(xml:space)がpreserveのときは連続する空白を一つにまとめてから境界矩形を作成する。可能であればstyle="white-space:normal"などの場合も考慮できると良い。ただし、librsvg(2.55)はこれに対応していない。

** TODO テキストツールでC-クリックした時にエラーは出さない方が良いかも？
図形が無いところでC-クリックした時に接着対象がないのでエラーが発生する。
debug-on-errorだとバックトレースが出てしまうので少々大げさな気がする。
その他errorを使うかどうかは色々な場所でよく迷う。
何か基準が欲しい。

** TODO edraw-svg-prop-infoに等価判定方法に関する情報を追加する
[[*テキストの装飾(書式・下線や斜体など)を編集できないか][テキストの装飾(書式・下線や斜体など)を編集できないか]]を実装したときに、テキストプロパティも比較するかどうかで困った。
現在はtypeがtextの時だけequal-including-propertiesを使用し、それ以外の時はequalを使用している。
何を使って値を比較するかをプロパティ情報として持たせた方が良い。

** TODO パスに沿った繰り返しパターンを作る一般化された仕組み
[[https://github.com/misohena/el-easydraw/issues/29][Repeated pattern along a path · Issue #29 · misohena/el-easydraw]]

元のパスを破壊せずに新しくパスを作るような仕組み。
パラメータの調整も後から変更できるような仕組み。
Inkscapeのpattern along pathや、もしくはそれ以外に何か仕組みがあると良い。
パスデータフィルターのような物があれば良いのだけど。
正直あまり良い方法が思いつかない。

** TODO shape pickerやらproperty editorやらのコンテキストメニュー改善
他の場所もあったっけ？
キーでコンテキストメニューが開けるようにする。

** TODO メニューマップにオブジェクトをバインドする仕組みを作れないものか
メニューマップにオブジェクトをバインドしたものを生成し、それを通常のメニューインタフェースに渡して、実行させるような仕組みが作れないか。
それが出来ればcontext-menu-functionsと連携が取れる。
popup-menu関数も使える。

** TODO オブジェクトの無効化を通知する専用の仕組みが必要では？
shape、anchor、handleの無効化を検出する一般化された枠組みが必要では？
現在は
- 変更通知で監視する
- 無効化判定関数を呼び出す
という二つの方法がある。

変更通知は通知typeの種類が問題になっている。
shapeに対して点が増えたり減ったりするような操作を増やしたときに、本来ならその操作の種類を直接表現したtypeを使いたいのに、anchor-removeやanchor-transfer-outのような抽象的なtypeを使わなければならない。そもそもこの点の無効化を伝えるというのは意識をしていないと忘れてしまう。
また、on-shape-changedは点接続の更新を伴うので効率が悪くなってしまった。
つまり
- 操作を増やしやすい
  - 変化の種類を具体的なものにできるようにする
  - それでいて無効化について意識が向くようにする(忘れないようにする)
- 効率が良い
ような仕組みが必要。

** TODO パス編集/相対座標を使用して出力を小さくする
両方の桁数を調べて小さくなる表現を使用する。
整数の時のみにした方が安全。
- M100 100 120 110よりもM100 100l20 10の方が短い。
- M100 100 80 90だとM100 100l-20-10の方が長くなってしまう。
前のコマンドが何かにもよる。全体として何が短くなる表現なのかを決定するのは難しそう。

** TODO パス編集/edraw-path-data-from-dは無効なパラメータをエラーにする
Zの後にL等を付けずに座標を書いてもエラーにならず、何が間違っているのか気がつかない事がある。
「M 1 2 3 4 5 6 Z 7 8」のように書いてサブパスが一つしか作られないおかしい、というように悩んでしまったりする。
Zの消化しきれなかった引数 7 8 をエラーにすべき。

そもそもエラー処理をちゃんとすべきかも。
https://www.w3.org/TR/SVG/paths.html#PathDataErrorHandling によれば、エラーがある場合は、その直前までを有効にレンダリングせよとのこと。それによってユーザーがどこにエラーがあるか分かるからだと。その上で報告もせよと。

** TODO パス編集/アンカーの所属先shapeが変わったときの挙動を改善する
edraw-path.elを書き直したことでSPTアンカーが無効になりにくくなったが、edraw-path-anchorオブジェクトが何らかの操作で別のedraw-path-dataへ無効にならずに移動する(所属替えする)ケースが発生するようになった(edraw-connect、edraw-path-anchor-connectが代表的。他にある？)。そのようなときにSPTを作り直しても良いが、漏れが発生する可能性がある。edraw-path-anchorオブジェクトからedraw-path-dataオブジェクトを(多少線形探索が必要だが)取得できるので、edraw-path-dataオブジェクトに親shapeオブジェクトを持たせれば解決できそう。edraw-shape-point-path-baseがshapeを持たずに、必要なときにanchorやhandleスロットから取得すれば良い。

懸念:
- パフォーマンス。
- path-dataは一貫して同じshapeを指し示すか。swapを使っているので大丈夫なような気がするが、確認する必要がある。
- そもそも必要性があるのかについてもっと調べた方が良い。再取得すれば済むのではないか。現状で変なバグがあるのかどうか。
- この変更によって逆に問題が生じることは無いか。例えば何かの処理の途中で勝手に親shapeが変わってしまうと困るようなこと。あまり思いつかないけど。

** TODO パス編集/パス内のSPT(edraw-shape-point)オブジェクトをキャッシュする
edraw-path-anchorやedraw-path-handleに任意のプロパティを設定できるようにしたので、そこに生成したSPTを持たせることが出来る。そうすれば同じアンカーやハンドルに対して複数のSPTオブジェクトが発生しない。

懸念:
- 逆にメモリを食う結果にならないだろうか。

** TODO パス編集/アンカーの追加・削除のUNDOにd変更を使わないようにする
次のメソッドを実装するとその助けになる。
- edraw-add-anchor-nth
- edraw-remove-anchor-nth

注意:これを実装するとUNDOでアンカーが無効化されないので、無効化されることを期待した場所は動作が変わってしまう。例えばパスツールに何か影響はないか。いや、last-anchorについては結局UNDOで消えればその瞬間無効になってしまうか。

となると無効化させないことに何か意味があるのだろうか。ドラッグ中にプレビューでアンカーを追加して、UNDOしてから元のアンカーに何かするようなケースだろうか。

** TODO ツールバーに表示するツールを減らせるようにする
その代わりメインメニューにツール選択メニューを追加する？
** TODO edraw-read-rectangleはクリックかどうかを判定すべき
閾値以上の動きが無かった場合はクリックと判定し、必ず空の矩形を返す。
一定量以上動いてから小さな矩形を作ることはできるものとする。
クリックイベントを待つことが可能か、それとも自分で移動量を検出するか。

** TODO 図形生成/MathMLを埋め込みたい
MathMLをforeignObject要素で取り込めるらしい。

foreignObjectに対応したedraw-shape-foreignが必要かも。

latex表記をMathMLへ変換する方法があったはず。
- mathtoweb
- [[https://github.com/mathjax/MathJax-node][mathjax/MathJax-node: MathJax for Node]]
- [[https://math.nist.gov/~BMiller/LaTeXML/][LaTeXML A LaTeX to XML/HTML/MathML Converter]]
- pandoc
- [[https://github.com/gvanas/blahtexml][gvanas/blahtexml: Blahtexml]]
(参考:[[https://blog.miz-ar.info/2018/03/latex-math-to-mathml/][LaTeX数式 to MathML を考える | 雑記帳]])

ただ、最大の問題はlibrsvgが対応していないこと。正直対応するとは思えない。

** TODO 図形生成/変形を何で行うかを変更できるようにしたい
latexの場合はtransformで十分だが、グリッドの場合はtransformでやると線が太くなってしまうのでポイントの移動でやりたい。いや、再生成時に動いてしまうな。

** TODO 図形生成/デフォルトプロパティをどうするか
マーカーのデフォルトプロパティに似た仕組みを作る？
いや、図形全体のデフォルトプロパティを、タイプ毎に持たせたい。

** TODO 図形生成/プロパティエディタでgen-typeを変更したら全体を更新する
- optionsの初期化が変わる
- デフォルトのプロパティであれば、内容をそっくり変える必要がある

** TODO 図形生成/再生成時のyes・no確認を減らす
エディタセッションで作った図形や一回許可した生成器は以降確認を取らないようにしたい。とはいえUNDOするとまずいけど。

** TODO 図形生成/C-c C-cで再生成するフィールドを限定する
プロパティエディタでC-c C-cを押したときに再生成が実行される場所をgen-で始まるオプションのフィールド上に限定したい。
(デフォルトの)即時適用であればそれ以外の場所でC-c C-cを押す必要は無いはずだけど、即時適用していなければ色を変えただけでもC-c C-cを押すはずだし、その時に再生成されるのは鬱陶しいはず。

** TODO 図形生成/安全な生成タイプではオプションやソースの変更を即時適用する
([[elisp-function:edraw-gen-grid-safety]]等)<prefix>-safetyが ~'immediately-applicable~ を返すような生成タイプの場合、プロパティエディタでソースやオプションを変更したら即時再生成させたい。

** TODO 図形生成/使用できない生成器を無効化する
無効化できなくても、latexやdvisvgmが入っていない場合は、その旨をユーザーに伝える必要がある。

** TODO グリッド間隔をエディタセッションを跨いで記憶したい
全体のサイズがが6や12の倍数のときに、その画像を開くたびにグリッド間隔を変更するのが面倒くさい。
- Emacsの起動中にグリッド間隔を変数に入れておく(エディタ起動時にそれを使う)
- ちゃんと ~/.emacs.d/edraw-ui-state.config に保存する。
- SVGデータ内に何らかの方法で保存する。

** TODO ポイントの絶対位置移動にキーを割り当てたい
mとか？　空いてる？
アイコンを書くときに困った。

** TODO string-matchを使って字句解析・構文解析をしているところを修正する
- 正規表現を何にでもマッチするようにしておけばマッチ開始位置を調べる必要は無い。文字列の末尾まで探しに行ってしまうことを避けられる。
- match-dataはmatch-beginningよりも大分遅いのでmatch-dataは避けた方が良い。

つまり、次のコードは:

#+begin_src elisp
(when (equal (string-match "foobar" pos) pos) ;;foobarを求めて文字列の末尾まで探しに行ってしまう
  ....)
#+end_src

次のように置き換えるべき。

#+begin_src elisp
(string-match "\\(foobar\\)\\|" pos) ;;posの位置で必ずマッチする！
(when (match-beginning 1)
  ....)
#+end_src

[[elisp-function:edraw-css-token]]はこのテクニックを使っている。

[[elisp-library:edraw-dom-svg][edraw-dom-svg.el]]内で[[elisp-function:string-match]]を使っている所は全部調査したい。が、かなり不毛でそれでいて気を使う作業なので難しい。

** TODO 定義要素が参照元要素が削除されても残ってしまう問題
[[*pathを消してもマーカー定義が残ってしまう][pathを消してもマーカー定義が残ってしまう]]の続き。

例えばマーカー(marker-end等)が設定されているpath要素があったとして、それを削除してから edraw-editor-export-to-buffer するとマーカー要素が削除されず残っていることが確認できる(現在は[[elisp-function:edraw-document-svg]]に対策コードがあるので、これをコメントアウトしなければ確認できない)。

これは要素が削除されても要素に設定されたプロパティはそのまま残っており、deftblから参照情報が残り、未参照と判定されたりその上で自動的に削除されたりはしないことが原因。

要素(path)の削除時に参照も取り除けば自動的に定義要素(マーカー)も削除されるのだが、Undoや一時的な取り除き(removeしてすぐinsertするような)の際に元に戻せなくなる問題が生じる。

この問題への対処のために[[elisp-function:edraw-document-svg]]では未参照定義要素を削除している。

本来どうすれば良いのか。案:
- 削除するときに全マーカーのプロパティ値をどこかに保存しつつ、nilに変更。再度追加するときに保存しておいた値に戻す。(グループの場合は子孫に渡ってこの処理を行わなければならない)
  保存先:
  - edraw-shape-pathに持たせる
  - edraw-shapeに持たせる
  - 要素の内部属性に持たせる
  - 要素のdata属性に持たせる
  - ×子要素 →pathは内部にdefsやmarkerを含められない
  - ×単にUndoのためだけならUndo情報に持たせれば良い →一時的な付け外しもある
  - deleted-deftblという別の場所を用意する (今度はそこに溜まる)
- ×GC的手法。つまりUndo情報などを含めどこからも参照されていないことを検出してから削除する。 →複雑性が上がる。結局しばらくの間は編集中のSVGに定義要素が残る。

おそらく、SVG要素の属性に参照先を作るのに必要な情報を持たせるような仕組みがあれば、この問題の対処に利用できると思う。同時に他の問題にも利用できそう(shape descriptorの欠点を解消するような)。となるとdata属性に特別な形式でマーカー情報などをまるごと持たせる仕組みが望ましい。

** TODO エディタはCtrl+中ボタンを消費すべき
C-down-mouse-2 がfacemenu-menuに割り当てられているので。
スクロールの時によく誤操作してしまう。

** TODO 画像が大きすぎる(viewBoxが大きすぎる)場合は初期拡大率を小さくする
viewBoxのwidthやheightまたはsvg要素のwidth= height=が大きすぎる場合は、初期拡大率を小さくする。起動時や0やv0を押したとき。
** TODO 背景をどこへ合わせるかはデータ毎に持つべき？
今はカスタマイズ変数([[elisp-variable:edraw-editor-background-align]])で指定するが、図毎に持つべきではないか。
data-edraw-background-alignみたいな属性が必要になる。
そこまで必要かは疑問。最悪自分で背景rectを作れば良いんだし。

** TODO インポート/Inkscapeのコネクタに対応する？
簡易的になら対応できそうな気もする。
ただ、IDを参照しているので、それをdata-edraw-idへ変換しなければならない。
結線情報をcontextに保存して、後で一括で処理するくらいか？

** TODO インポート/Inkscapeの行の変換でclassが既に使われていたときの問題
[[elisp-function:edraw-import-svg-convert-attr-inkscape-role]]関数で、tspanのrole="line"のとき、属性をclass="edraw-text-line"へ変換しているが、すでにclassをtspanに設定しているときはどうするか。何か既存のclassを消す仕組みが必要。
** TODO インポート/style属性のSVG属性へ変換の細かい部分を直す
色々問題があるはずだが、全ては分からない。仕様の隅々まで知る必要がある。
気がついたところはコード中に@todoがある。

- [X] [[*CSS/style属性中のat-keywordをスキップする][CSS/style属性中のat-keywordをスキップする]]
- [ ] [[*インポート/style属性に指定されたプロパティの大文字小文字を変換する][インポート/style属性に指定されたプロパティの大文字小文字を変換する]]
- [ ] inheritやauto等といった属性には指定出来ないキーワードがあると思う
- [ ] transformプロパティを変換する

** TODO インポート/style属性に指定されたプロパティの大文字小文字を変換する

[[elisp-function:edraw-import-svg-convert-attr-style]]の@todo部分参照。

[[https://www.w3.org/TR/SVG11/styling.html#CaseSensitivity]]に書かれているとおり、CSSでは基本的に大文字小文字を区別しないのに対し、SVG(XML)では区別する。例えば次のSVGはブラウザでは正しく表示される。(Emacs 29.2 Windows公式ビルド付属のlibrsvgでは正しく表示されない)

#+begin_src html
<svg width="560" height="420" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">
<rect x="10" y="10" width="540" height="400" style="FILL:BLUE; Stroke-Width: 10px; sTroKe:red;" />
</svg>
#+end_src

どの文字が大文字でどの文字が小文字なのかを正確に知るには[[https://www.w3.org/TR/SVG11/svgdtd.html][Document Type Definition – SVG 1.1 (Second Edition)]]を始め様々な資料を調べる必要があり難しい。最低限、変換対象になっているプロパティ名と、カラーキーワード、テキストに関するキーワードといった、使われているものくらいは処理したい。

** TODO インポート/paint値を検証する
[[https://www.w3.org/TR/SVG2/painting.html#SpecifyingPaint][Painting: Filling, Stroking and Marker Symbols — SVG 2]]

<paint>値に指定出来るのは:
- none
- <url> [none | <color>]?
  - <url>は[[https://www.w3.org/TR/SVG2/pservers.html][paint server]]であり、linearGradient, radialGradient, pattern
- <color>
  - rgb
  - rgba
  - hsl
  - hsla
  - extended color keywords
  - currentColor (CSS colorプロパティを参照する)
- context-fill
- context-stroke

一番問題になるのは<url>だが、今のところ放置していてもそれほど害にはならない？

** TODO インポート/マーカーを検証する
要素をそのまま参照するrawタイプのマーカーというのは実装できるだろうか。インポートしたマーカーはrawマーカーとして扱いたい。これはあくまで未対応のマーカーを入れておくための場所で、編集機能は一切提供したくない。マーカーオブジェクトのプロパティにもしたくないが可能だろうか。マーカーを文字列化するときはどうなるだろうか(シェイプピッカーにペーストしたとき？　他には？)。

** TODO インポート/様々な形式からインポートできるようにする
インポーターリストがあるべきかもしれない。

** TODO length値の継承処理が正しいのか確認する
[[elisp-function:edraw-svg-attr-length-or-inherited]]ではdom-attrがnilを返したときに親を見に行くことになっている。空の属性を指定した場合や無効な属性を指定した場合はどうなるのが正しいのだろうか。

- [[https://www.w3.org/TR/SVG2/types.html#syntax][4.2. Attribute syntax - Basic Data Types and Interfaces — SVG 2]]
- [[https://www.w3.org/TR/SVG2/types.html#SVGObjectInitialization][4.3.6. Reflecting an empty initial value - Basic Data Types and Interfaces — SVG 2]]

** TODO image要素のwidthやheightが省略されたときの動作を確認する
widthやheightが指定されていないときは画像の幅や高さになる？
現状ではAABBは0になるけど表示は画像の幅・高さになっているように見える。
** TODO edraw-editorに入力フィルタを設定できるようにする
自己責任で入力SVGを変換できるようにする。

** TODO edraw-get-property-as-lengthは直接edraw-svg-関数を呼び出すべきではない
edraw-get-property-as-length が直接 edraw-svg-attr-length-to-number を呼んでいるが、shapeが要素であることやprop-nameがその属性名であることは保証されていないので、呼び出すべきではないのでは？

** TODO プロパティエディタで単位を維持したままホイール・ドラッグ操作をしたい
数値をホイールやドラッグで変更するとき、単位を維持したい。

+また、プロパティ情報に :to-number という関数があるが、これは廃止したい。+ また、 edraw-svg-elem-prop-to-number にelementとattrを引き渡していない部分をどうするか。おそらくプロパティエディタのホイール・ドラッグ数値変更でしか使っていない。この関数はem、ex、%といった相対指定を処理できない。

** TODO widget/チェックリストの操作で表示が乱れることがある？
edraw-default-shape-properties等のカスタマイズでチェックボックスをON/OFFしたときに関係ない場所が消えることがあるような気がする。例えばrectをOFFにしたらellipseのチェックボックスがrectのチェックボックスと同じ行に来たり。再現の仕方が今ひとつ分からない。
** TODO widget/marker型のshape propertyをカスタマイズできるようにする
edraw-default-shape-propertiesのカスタマイズでmarker-startやmarker-endの値を指定出来るようにする。
edraw-widget.elのedraw-widget-properties-prop-field関数の部分。
** TODO widget/デフォルト値をちゃんと設定する
カスタマイズ時にチェックボックスをONにしたとき、0.0等になるのが使いづらい。
markerWidthとかで。
prop-info-listに:default-valueでも追加する？
** TODO 外部フレーム状態から子フレーム状態へ変更したときに消える？
いや、今やったら大丈夫だな。何か条件がある？

** TODO Ubuntuで子フレーム上のカラーピッカーでドラッグが出来ない原因を探る
edraw-track-draggingでswitch-frameイベントを無視するようにしたら回避できた。

が、なぜ子フレームをクリックするとswitch-frameが来るのかよく分からない。
すでにswitchした後の筈なのにクリックのたびにswitch-frameが来る。
原因が知りたい。

また、今回の回避策には何か弊害は無いだろうか。

** TODO svg要素内にコメントがある場合に生じる問題を調査する
libxml-parse-xml-regionはコメントをcommentという名前の要素として出力する。

認知しない要素はある程度許容するように作ってあるが、一部で問題も起きうるとは思っていた。思いつくだけでも:
- bodyの下の図形数のカウントとUNDO等に使うインデックス値の関係(不用意にコメントを無視すると問題が生じうるので注意)
- 図形の重ね順操作

元々defsが入る可能性は考えていた(が、実際には入らないので落ちなければいいやくらいに思っていた)。commentという要素があるものと考えて、shape関連以外の要素があることを考慮すべき。

** TODO マウスカーソルのちらつきを抑えるためにmouse-faceをもっと抑制する
org-fold-core-styleが'overlaysのときに対応していない。必要？

** TODO エディタ全体を一つのSVGで描いた方がいいのではないか
現在はツールバーをbefore-stringで表示しているが、全てを一つのSVG、一つのdisplayプロパティで表示した方がいいのではないか。
右下にリサイズつまみを表示したい。
SVGの中にSVGを入れ子にすれば不可能では無いはず。マウスの座標もそれに合わせて計算できる。
上にツールバーを表示することさえ出来る。
もちろん分離できるように作っておくに越したことはない。

** TODO 画像ツールで別のディレクトリの画像を指定したときの改善
librsvgの仕様で基準ディレクトリ下以外のファイルは参照できない。
画像ツールで別のディレクトリにある画像を指定した場合は、何らかの対策をしたい。
- エラーで止める。
- 同じディレクトリにコピーするか尋ねる。
- Base64で埋め込む。
現在は一応警告を出すようにしてある。

** TODO SVGのルート直下を直接編集できるようにする
現在は ~<g id="edraw-body">~ 内に限定されている。<svg>直下を直接編集できるようになれば、他のツールで生成したSVGを手直しするのに使える場合もあるかもしれない。svgの中にsvgを入れることが出来るので、不可能では無いはず。

ただし、現在との互換性を維持する必要はあるので、最悪モードを切り替えるような仕組みが必要。

defsもsvgルートの直下にあるので、これを(奥行きの処理などで)適切に無視する必要がある。

SVG読み込み時にルート直下のdefs以外を#edraw-bodyへ移動してしまった方が楽なのかもしれないが。そのような動作をするインポートコマンドを作るという手もある。

** TODO shape毎に変形モードを持たせられるようにする
shape毎にどのような方式で変形するかを決められるように出来たら便利かもしれない。パスやグループ内の座標を維持したい場合は、そのshapeだけtransformプロパティを使うように設定できる。SVG内では ~edraw-data-transform-method=~ のような属性で記録すれば良い。

** TODO 図形にidプロパティを追加する
作成したSVGを他から利用するときに明示的なidが決められると便利だから。
複製するときは削除しなければならない。プロパティとすべきか分からない。
edrawが必要とするidはdata-edraw-idとして既に存在していて、これはユーザーが関与できないエディタ専用のIDという位置づけ。

** TODO グループの子孫を直接編集できるようにする
モード切替等で、#edraw-body直下よりも下の階層にあるshapeを直接選択、操作出来るようにする。

** TODO 点接続/アンカーポイントの接着において循環接着を防止する
図形全体の接着(edraw-glut-to shape dst-shape)についてはすでに[[*点接続/循環接着を防止する][点接続/循環接着を防止する]]で解決した。

必要がある？　どのように？　要調査。

アンカーポイント接着の循環の例は[[*点接続/おそらくUNDOで戻らないケースがある][点接続/おそらくUNDOで戻らないケースがある]]にある。

典型的な物:

[[edraw:data=H4sIACszemcAA62S3WoDIRCFX0UmN8nFquO6fyEG2stC6TNs9p9sNezabPL2NbsRQmkplCIjOHKc7xzcjeeGTF1pWwVCcCBt1TWtvR8u770eFbTWnraMTdNEp5CaoWGCc86cFMi5GsbOaAVI8S7YXvpOH7+TYZZlbL6F/W6oCksuCtyc67z/iNGVCqpyyKfgkBfHZjAfugQy2sEcKwXa6ApI3fW9glVd10DYftc8ikx5dfNOuW1Jmds8WNon02kbFEZrB+IsOKNPa77Zvj2/rMOMJxjV9QYeFbcniyjBspKpu1DwmkqayjAlGIZUYiQISk4k9zgLmgddIb8t3wi83xn4K91t1iGThTjwAn7FDnDh9nSbBQ9jTjB1hYJKgRlJY5rwJP4nPp/S73z3WL0hjxfGVCDP5vjCyOXo0sM/xccaV+5D7j8B6pvqndECAAA=]]

[[edraw:data=H4sIAHYyemcAA7WVTWvUQBjHv8owXrZgJvOyyUzKZqHtRQTx5j3ZJLuh26Qksbv1ZIqIICJ6KXrypvZQ/QT9MoPUj+EzeXEX2dLWKiE7ed7y/P4zedhReTRFy4N5Vvp4VlWH27a9WCzIQpC8mNqcUmpDBm5TtpfzNNvflMg8z7ObKEaLNKpmPnZcitEsTqezysfCGEdxUaZ55mNGGB6PinhSoaWPIXLc/F5ZmEY+jqMiWFhhMNmfFvnTLMKorIp8P/ZxlmcxRkk6n/v4XpIkGNnj0XS9KI+O+35RUAVW6zYJIXW5UGGyqlfmWr38HqPm6h1Wx8hXhGpFPmylcFhAFzOmvbmvcAMRJaHE64HDPM0qa5JnGVTARsGR7Ozs7g4YoYgSurX9ePfhoCc2HgSRrTugD1fojLfsjLbwvGU/DKrZdYiDP8i27u8MLNb6ep1ACaofwZYg6SBGXeK6rkRNtxa/PcXr2Xuo21W1zT3EBNtjDiOcDRkYonuQQ+IJ4YLHI5I5ACalCZuVNKvgxHGNUzHiSaUQY5J4joQaBefAhpDqESEoqGMc1HVvlZSDSodQ7injMdphFURy3m4El2ZHzM0ab/fs3Elqs8nOHpMucZQjjAGgZpXElVR2hrryA5WxcGX4zwfj+slQKgxppCa3n4we+T9NBld/PRk92fpk9DrXJoMP6QNFnzSNbj0UVbyser19XpIDUpk+g1rmdmYSHKRzkFMGWWmVcZHCEZtaK8gms7yAQBUUVaP4t2CKxz8uzi7ff9f1B33yWtfnuv6s65e6vtD1259fXl2enzaeN7o+0/UL/fxkZJuXbsba1O6mqOYg3A1cp13n+puuP+r6k67f6frrzRjtKdzwLzf+Be/KG2YNBwAA]]

** TODO 点接続/他に接着されている図形を矢印キーで移動できるようにする
マウスドラッグによる移動は[[*点接続/他に接着されている図形をドラッグで移動できるようにする][点接続/他に接着されている図形をドラッグで移動できるようにする]]で対処した。
他の平行移動コマンドなどはやらなくて良いと思う。

正直必要かどうか疑わしい。必ず先に選択を伴うので、はじめから大本の図形を選択してから移動すれば済む話だから。

** TODO 点接続/プロパティエディタで点接続情報を編集できるようにする
markerみたいにプロパティエディタの中でpoint-connectionのリストを表示してそれぞれのsrcとdstを編集できるようにする。

[[*点接続/テキスト等の接着位置を調整できるようにする][点接続/テキスト等の接着位置を調整できるようにする]]で残った課題。

data-edraw-point-connections 属性に対応するプロパティを追加する。

** TODO 点接続/edraw-removeはshapeを削除する前に点接続を解除する
[[*点接続/グループのREDOでエラーになる][点接続/グループのREDOでエラーになる]]の修正時に気がついた。

現在は edraw-removeの末尾 → (edraw-on-shape-changed shape 'shape-remove) → edraw-update-related-point-connections → edraw-remove-all-point-connection-referrers という流れで自動的に点接続が解除される。

それより、素直にedraw-removeの中からshapeを取り除く前(undo groupの最初)に edraw-remove-all-point-connection-referrers を呼び出した方が良いのではないだろうか。

その方がUNDOするときに、shapeの状態が完全に復元されてから点接続を復元することになるので効率が良いはず。

** TODO 点接続/グループ化・グループ化解除すると点接続が失われてしまう
おそらく一度取り除いてから追加しているからだと思う。
部分的にグループ化される場合もあるので色々面倒。
** TODO 点接続/パスの向きを反転できないのを何とかする
接着されているとパスの向きを反転して矢印を反転させられない。
接着されているのだから当たり前。
とは言えパスを選んで右クリックメニューから「パスの向きを反転」を選んだときに何も起こらないのは良くない。
どうするべきか。
パスの反転と同時に接着先も交換する？

[[edraw:data=H4sIANhljWUAA61VTW/TQBD9K9b2kkr+2LXXX1Ucqb2AUBESFyg3Y68TK4k3Wjt1yi1F4lZB6YE7B7hxRxz4L1iV+BnMemMlTVoElGQde2dnZ96beev0y9OhtphOijJCo6qaHVhWXddm7ZhcDC0bY2yBB1IuB4tJXoxvcyRhGFrtKtLqPK1GEaIUI23E8uGoipBtw+SUiTLnRYSISdCgn7Ks1PI0QiwVcW3IKVinsRgzcdNuYCMWgtdIU6vPVAZid4aHqzQEsswEK5k4ZYfljCXV07jKeYQKXjAAkLP6iC8iZBCsycuWA2mCZc8jpB5O2gcuclZAwHhecaSVleBj1kXJ8skkQnuESBKzuBppgPUxhNMNX0bVfY3q+AXSrEHfUvjuoEWMJBfJhG3xotu06B+ycjUYQIvcj5MCpSWLdltypsK0MDYpWbJjg74APJpyVZ539n9N/mWcjIeCz4v0DiBZlrXJhpubeHqGVvnSuIoNZW4dSEBjHJN1Qm8NJFDIJAKAKVGplMZqHVQkzpR2xELdVygYY2t8bXEkptsAuCS1gyD2fgcgUADgTN0XQSs61QajrGIB6eZi0tvbVdZ+JyWDFemO1+pYgdMGnRnPi8pIeFEATziu8GI47Blk/+DJ0aNex3NfP+xhZepqL6PAOQhck7obX6r7oRne+BwTjHXi4WO7uxPbdHzP9wLfphDOcXRCqenaIXZCHFLfC72uJEomO/XbqVHFFpWsOunK7q2ratuwQzoYcZGMOEh7mqepPIcZB+5l/orJjatpFk/zCUQ6mWsPeDXKEzT48eayWV6143Pz+rI5/9osv1y/A+NFc/7++u3Fz28fm+WHZvmpWX6H374ls61A/ScQkpznKm6+JzFd/ROmTTHdTyTbgtBv0Y0SCSHbmtA995iE0HMvhK77PsZh6FI9tM3Qc2hAsRP4ge/Qv5WBNYQL/sEGvwAOFT1I6QYAAA==]]

** TODO 点接続/複数のサブパスがあるときに正しく接着しないことがある
複数のサブパスがあって、特に閉パスがある場合、末端のアンカー点を接着させようとすると別の点が接着してしまうことがある。

[[edraw:data=H4sIAOlNWGYAA6WUwY7TMBCGX8XyXlgpbuwQuu2qqQQnDt0LF2Bv3sRJrGbtynGbLid64YjEidMegcfgXagEr8E4TsjSbiUklKTJjGfG/2ePO6s3BWpkZssERxOKUSlkUVowIjC2t5WqE1xau7oMw6ZpRs3TkTZFGFFKQ0jFaCNMLbVKMBuxLuFyW0m1fCyNTafTsB3F81km8hrJLMEiM7whzgTvLTdLYf72E0q4MbrByI++9nrHvf2y0wyOlRG1MBvxvF6J1L7iVuoEK60EKJWieaG3CSaMIvdE7sbIiPxNgv3H2/ZDGykU1ONrqzGqrdFL0VfJZVUl+IxRd4HeFbclArFXUDEgF65wcIHigF5jFM5noVd4gouRVJq0Egdg8SFY/I9gzxDcQMb+G8vrQum2zUzvfKVWyUOq0O3afGZAEvKhPvJkRw38NzxdFkavVXZCS57n7WTFwySd3eFuvoxbTrzbBYxB+Q2dxkP+xF1D8R6uc5Be46AwHpRPPApzLgBjlLZa/G4PE6+0VJakWilQBMcADku/d6S23EDRtamenB1v+fmfOKGyo6iu4c8fEXuE43H90rlGjGkwposJDSK6YBENYv8ChEU7dH019pZ79YNjz2fF1h70Aso1INbyHczJ4IS5EMJVWmpoh5bRr9SkWynXPj8+fNrvvv38+OXX/fv97vN+93W/+w6/s9BlQ9sU8MDfx/w35f2mDH8EAAA=]]

[2024-06-05 Wed]edraw-path.elの書き替え後に確認したが現象が再現できない。

** TODO 点接続/形が変わらない図形の変更では点接続を更新しないようにする
無駄なので。
edraw-on-shape-changedに何か形が変わらない変更であることが分かるようなヒントを追加する。

全ての変更時に毎回座標の再計算をすべきではない。幸いedraw-move sptは同じ座標なら何もしないが、それでも変更タイプを見て再計算するか判断すべき。そうは言っても現実にはなかなか難しい。プロパティ値の変更はプロパティの種類によって異なる。edraw-on-shape-changedに形状の変化かどうかのヒントを付けるべき。AABB再計算なんかにも利用できるかもしれない。

実際にはZオーダーや色の変更くらいしか無いと思う。

- ★(edraw-on-shape-changed shape 'shape-z-order)
- ▲(edraw-on-shape-changed shape 'shape-properties)の一部 区別する仕組みが必要

** TODO 点接続/パスのdプロパティが直接変化したときの点接続の削除

edraw-delete-pointでunglueしているが、それ以外の場所で点が削除される場合を考慮していない。
とりあえずedraw-set-propertyで直接書き替えるようなケースが考えられる。
その他にある？

** TODO 点接続/おそらくUNDOで戻らないケースがある
座標をUNDOしたときに接続点が更新されて補正されてしまうので。
循環しているケースは特に怪しい。
循環しているケースは正しい点に移動しないので、戻したときに同じ点に戻らないのでは？

[[edraw:data=H4sIAAtlcWQAA52T7WrCMBSGb6XEPwptmq9+RIyw/Rwdu4baJG3RJdJmVu9+ma5bRQbOAwkk4Zz3OS8nq/5QB0MrXSNAkiIQNKqtGycAI/5wUF3fWiMAhhgEx/ed6QVonNsv43gYBjhQaLs6Jgih2BcC61WnKvd3vaMAfj+dd93udgLMtNYg6F1nt0oAY40CQSsFULIrh2hTVtu6sx9GgiBer+rpk5Unr7cvXfOTPuOcj8Wibwg2Kl1q+/xXQjDM09/IQpIxmE5vihyFzEPK0pXRRXBvW+OiyhrjW/SmeCee5mixfHt+mZe6wlpt+OIq4wtWU5wypC/8j8DiBEFOf4OFOMkgnQYuqMfFBN2o00oSL8/vbmTEXTzMS9IEsqmXHpjmV+6mtGCEhCS/3+CxkVuDZVpqxeXmYWDKKMymdiYhQfza4azACIX0HxMxYt0Cj7NyBo5rv/zPWX8CdUfKFogDAAA=]]

UNDO時には接続の更新を抑制するような仕組みがあればよい。

** TODO 点接続/コネクターツールを追加する
** TODO 点接続/辺からの距離を調整する機能を追加する
** TODO 点接続/接続する位置を角度で設定できるようにする
アンカーポイントをドラッグしたときにOBJDIRに切り替える。
ツール側で行う。

** TODO 点接続/使われていない内部IDを削除する
今のところpoint-connection-referrersが空なら消して良いはず。
** TODO 点接続/正しい位置に移動しない場合がある
次図の一番右。更新の順番の問題？

[[edraw:data=H4sIAMwGg2QAA61VwW6jMBT8FeReEimAbQyBKkRKLpV2u9vzHgk2YJXgCNyS7tfvA4eWhK7URkECkgd+M29mnKya19xqJddFjHyGkVUImRc6Rl735VXUjVRVjIhDkHXcl1UTo0Lrw73rtm3rtJ6j6tylGGMXGqH1qhap/n+/Y4zg+tZfM1mWMbrLsgxZja7Vs4hRpSqBLMljJHidtPYuSZ/zWr1UHFnuepWPHyn+BniHRBfvy++iKBqa2ScSbEAyvWH9rwAvKMOPhOFFCER4ohPbNO3ap56Po1SkPaIoS3loxAXBE3VOaUrhvRTGIhg6pTAZCeBDDRXa3d/MfQRxULLSdqqqCpQCbUHQzWa7nWHHt+Cc3z9tf8wGDvOeRK/p5ww4N2DkBEaMyD2JDrsT/SREMDKDTccOdpkXkiDqEa9RFUKwoF7kRONj+UjDicqfSTDDZvKBxnxCkONA8EREZ7500vdDnklPLlgw78OKC+/OZf2uTwOna33yvu8Ti4LAJx69EpFRgxh+GTBjgUd3fnJ1MLxo6fh4dAT99mOMXpYJxc64gr0v52aQZb7YzGxiagPzaZZY5rOE0GySJUZCZ+mbOFE/cKg/3cw3TdDAxCRIi6O2MgXLsmQvSwD882I9KF1IAOrrjfwLWCREVveunVRpoeoY7SXn5Yf7lFLzO4CN22Dx+unnyu3WnFCGjWOe3gr0EuWGswzJ7Wb5/TCguDmc8Nez/gen7B41yQYAAA==]]

** TODO ドキュメントのトリミング機能を追加する
上下左右にどの程度余白を残すかを指定して、それに合うように切り抜く。
マウスドラッグによる切り抜き機能が既にあるので必要性は低い。

** TODO modifiedフラグの制御を厳密にする
現在次のような問題がある。
- UNDOを考慮していない。
- Previewによる変化でフラグが立ってしまう。

** TODO マニピュレータ機構を追加する

- 選択済みオブジェクトのように機能する。
- 任意のタイミングで一つだけ追加できる。主にツールやコマンドによって追加される。
  例:
  - 複数オブジェクトが選択されたとき追加され、解除されたときに削除される。
  - 変形コマンドが実行されたとき。
- マウスイベントはマニピュレータが優先的に処理する。
- マニピュレータがあるときは選択済みオブジェクト、アンカー、ハンドルは操作できない(?)

ある種のモードなのだろうか。モーダルであるべきか否か。

** TODO edraw-mode/バッファをkillするときに未保存があったら確認する
** TODO edraw-mode/ビューを常にウィンドウサイズに合わせる
やりたいけど実際の所ちょっと重い。環境によっては不安定になる可能性もある？

** TODO 設定/カスタムシェイプツールのデフォルトプロパティ問題
現在はpath要素用のデフォルトプロパティを適用している。
edraw-editor-tool-custom-shapeクラスに対するedraw-shape-type-to-createメソッドを参照。

しかしカスタムシェイプはpath以外のどの図形もあり得る。カスタムシェイプツールで配置した図形がrectだったりellipseだったりすることはあり得る。groupであることも多い。それらに単一のデフォルトプロパティを適用して良いのだろうか。

textが入っていたら当然問題。最悪textだけ特別扱いする方法もある。が、必要だろうか。カスタムシェイプにtextなんて入れることがある？

edraw-default-shape-properties-for-each-tool変数を使えばカスタムシェイプツールだけ独立したデフォルトを持つようにはできる。そうすべき？

それでも一つのデフォルトをいろんな図形種類に適用して良いのかという問題は残る。

** TODO 設定/ツールバーで色を変えたら選択中の図形も変更する
fillやstrokeのデフォルト値(次に作る図形のプロパティ)だけでなく、選択中の図形のプロパティも変更する方が良くあるソフト(Illustratorとか)の挙動。ただし、もしそうするなら設定で従来方式も選べるようにすべき。

ただ、edrawはツールバーの色選択がツールオプションの一つになっているので迷う。rectツールを選んでいるときに、選択しているその他の図形(pathとか)の色を変えてしまうのは何か変。その場合どの図形のデフォルト値を変更すべきだろうか。rectか、それともpathか。

良くあるソフトの挙動は、選択色が種類毎に分かれていない。あくまでツールや図形種類とは別に、現在色がある感じ。

Inkscapeだと設定でツール毎のデフォルト値を使うか、最後に使ったスタイルを使うかが選べる。デフォルトではツール毎のデフォルト値。正直かなり使いづらい。

次のようにするのが良いと思う:

- ツールバーの色選択ボタンをツールから独立させて「現在色」として常時表示する。
- 現在色を変更したとき、基本的には選択している図形のstrokeとfillを変更する。
- strokeとfillが意味を持つツールを選択しているときは、それが作る図形のデフォルト値も変更する。
- strokeとfillが意味を持つツールを選択したとき、現在色はそれが作る図形のデフォルト値に強制的に変わる。例えば、選択ツールで色を変更した後に矩形ツールを選択した場合、現在色は矩形のデフォルト値になり、選択ツールで使った色は失われる(といっても最近使った色で参照できる)。
- strokeとfillが意味を持たないツールを選択したとき、現在色は変更しない。
- 図形を選択しても現在色は変更しない。(理想的には選択した図形の色を現在色(複数異なる色を持つ場合は?を表示)にしてその図形の色を変更できることを分かるようにすべきだが、これをやり出すとキリがないと思う。それこそrectを選択して次のtext色が変わってしまったりする)

** TODO 設定/最後のデフォルト値を次に開いたエディタに引き継ぐ
自動的にui-stateとして保存する。
アプリやユーザー指定のデフォルト値(edraw-default-shape-properties等)に戻す機能も必要。プリセットで戻すか専用の戻す機能を付ける。

** TODO プリセット/プリセット一覧UIを作る
ツールバーにプリセット選択ボタンを追加して、それが押されたら表示する。
また、プロパティエディタから表示しても良い。

- サムネイルの一覧を表示する。図形のサムネイルはとりあえず固定サイズの(保存時の種類の基本)図形とする。将来的にはマーカーも対応する。
- 選択したら、現在のツールのデフォルト値にロードする。
- 右クリックで削除、改名、順序変更出来るようにする。

シェイプピッカーに近い。

** TODO プリセット/セーブするプロパティを限定できるようにする
+プリセットメニューでセーブするプロパティを選択する。次の中から選べるようにする。+
セーブするときに名前を一緒に入力する。
- 全て
- スタイルのみ (subtype=nil)
- 塗りと線のみ (fill, fill-*, stroke, stroke-*) (subtype=nil)

x-popup-menuか番号入力させる。

** TODO プリセット/ロードするプロパティを限定できるようにする
プリセットメニューでロードするプロパティを選択する。次の中から選べるようにする。
- 全て (基本的には使わない。x等がロードされてしまうので)
- スタイルのみ (geometry以外)
- 塗りと線のみ (fill, fill-, stroke, stroke-)

** TODO プリセット/プリセットから一つのプロパティを削除できるようにする
プリセット名とプロパティ名を指定して削除する。

** TODO プリセット/並び替えできるようにする
** TODO プリセット/サブタイプが一致するプリセットのみ一覧に表示できるようにする
** TODO プリセット/サブタイプをnilにして保存できるようにする?
** TODO プリセット/プリセットリストをファイルへ保存できるようにする
** TODO プリセット/プリセットリストをファイルから(追加)読み込めるようにする
** TODO 変形/GUI変形でsを押したときsyのデフォルトがsxにならない
ドキュメントの変形ではsxを入れたらsyのデフォルトはsxになるのに。
↑いや、sは現在の拡大率を変更する操作なので、sxもsyも現在の値がデフォルトになっている。最初はどちらも1.0なので、デフォルトはsxもsyも1.0になる。Sは現在の拡大率に対するさらなる拡大率なのでちゃんとsxに入れた値がsyのデフォルトになる。
不用意にsyのデフォルトをsxにするとsyを無変更に出来なくなる。
何とかするなら、最初のスケーリングの時だけsxをsyに反映させるとか？

** TODO 変形/GUI変形時に代替マウスポインターが消えることがある
Corfuによるinvisibleな子フレームがあると、その上では正しい座標が来なくなる。
~(make-frame-invisible frame t)~ しただけでは完全には消えていないらしい。
幸いドラッグ中は問題ない。

frame上の座標から無理矢理変換してくれば対応できないことも無いかもしれないが難しい。
edraw-color-picker-insert-color等の子フレームは(-1000,-1000)へ飛ばすことで回避した。

** TODO 変形/GUI変形内でUNDOできるようにする
確定する前の調整段階で一つ前の設定に戻りたい場合が良くある。
間違えるたびにGUI変形を中断して最初からやり直さなければならない。

** TODO 変形/ローカル座標系変形機能を追加する
図形のtransformプロパティ適用前の座標系で、平行移動、伸縮、回転できるようにする。
transform-methodのような設定を追加すべきか、あるいは、コマンドを追加したり、コマンド内でのオプションにするか。

** TODO 変形/変形方式の設定方法を変える
メニューのあちこちに同じ設定に対する項目があるのは何かおかしい。
それらメニュー項目にある変形だけでなく、アンカーポイントのドラッグによる変形にも影響がある。
かといってどうしたら使い勝手が良いのかよく分からない。
メインメニューの直下に独立してあるべき？
** TODO 変形/変形方式にanchor points優先オートを追加する
現状ではtransform-methodが'autoの場合、transformプロパティが存在していたら一律transformプロパティに追加する形で変形する。

rect等(edraw-shape-with-rect-boundaryを継承したクラス)では回転にtransformが必要で、textではスケーリングにもtransformが必要なので、そのためにtransformを使うのは仕方が無い。

しかしtransformが設定されていても、transformを使わずに平行移動はできる。rect等の場合はスケーリングもできる。

** TODO 変形/変形時のtransformプロパティ使用を最小化すべきか考える
rect, ellipse, circle, imageは回転以外であればtransformを使う必要は無い。
textは回転とスケーリング以外(平行移動のみ)であればtransformを使う必要は無い。

edraw-transformメソッドは回転成分(textの場合はスケーリング成分も)にのみtransformプロパティを使用し、平行移動はxやyの移動によって表現すべきだろうか。

すでにtransformプロパティが使用されていても、平行移動はxやyを移動することで実現すべきだろうか。

scaleが0のときを考慮に入れるべきだろうか。

** TODO 変形/左右上下反転コマンドを追加する
ドキュメント全体と選択図形と図形単体で。
-1倍しても良いけど、簡単に反転できると良い。
dtfh dtfvとか?
要らないかも。
** TODO 変形/skewに対応する
interactive-transformにおいては、skew-h-angle, skew-v-angleを追加して対応する。
hとvは対等。
回転の前にskewする。
指定出来るのは-90～90度。ただし、hとvの合計が90度になると直線状になる。

** TODO 変形/GUI変形を一時キーマップか編集ツールにする
read-eventループだとキー割り当てをカスタマイズできない。

問題は変形中に他のコマンドから状態を変えられてしまうこと。
対処方法案:
- 防止する。
- 検出し追従する。
- 検出し中断する。

mouse.el内のmouse-drag-lineではset-transient-mapを使っている。一時マップが終わるときにtrack-mouseを戻している。

** TODO 変形/matrix以外のtransformプロパティを正しく保持する
現在は何でもmatrixに変換してしまうので、指定しづらかったり精度が失われてしまう。

また、プロパティエディタのUIも、markerのようにサブ項目が操作できればなお良い。
横の拡大率だけ入力したいのに、現状だとそれは行列の意味を知っていないと難しい。

** TODO 変形/CSSのtransformプロパティに対応する
スタイルシートを考慮すべき。style属性からでも変形できるので、様々な場面でそれを考慮すべき。

先にstyle属性の解析を補助する仕組みが必要。

その上で、大枠は既にedraw-svg-css-transform-to-matrixに用意してある。
ただし、色々と改善点は多い。

** TODO 変形/接着されている図形のGUI変形で枠線が図とずれる
接着されている図形の変形を禁止しても良いが、枠線を接着された位置に合わせても良い。
** TODO 座標を表示する機能を追加する
何らかの方法で座標が知りたい場合がある。
問題はEmacsではモーションイベントを積極的に使いづらい所。

[2024-05-26 Sun]追記:選択ツールにおいてクリックした座標を必ず表示するようにしたので、一応要望は叶えられた。

後は座標調査用の専用コマンドを追加するかどうか。必要性:

- 選択ツールでクリックすると間違えて移動してしまったりする (誤操作に気がつくようにすれば済む)
- 図形の中では範囲選択が出来ない (一応一時的な不反応状態にできるが沢山図形が重なっていたらやりづらい)

ので、専用のコマンドがあった方が良いのではないか。しかしおそらくあっても使わないだろうなぁ。

専用コマンドであれば、クリックしなくても座標を表示することが出来る。

** TODO 図形の範囲が空になった時の問題を調べる
- [[*テキスト/空のテキストにまつわる問題][テキスト/空のテキストにまつわる問題]]
- [[*パス編集/1点だけのパスにまつわる問題を修正する][パス編集/1点だけのパスにまつわる問題を修正する]]
- [[*パス編集/空のパスをどうするか][パス編集/空のパスをどうするか]]
- rect、ellipse、image、generator、groupについても調べる

** TODO テキスト/M-o sでスタイル設定時に色指定はカラーピッカーを使う
fillやstrokeプロパティの設定はカラーピッカーによって行う。
ネックはelispファイルの依存関係。edraw-svg-dom.elからカラーピッカーを正しく使うのはなかなか骨が折れる。image-scale(これはミニバッファで使う分にはあまり問題ない？)やrecent-colorsについて考える必要がある。

** TODO テキスト/行送り量を行内の最大font-sizeに基づいて決定する
leadingを設定できるようにしてしまったのが悔やまれる。
やはりline-spaceを設定できるようにしたいが。
** TODO テキスト/スタイルシートを考慮する
テキストの様々な設定はstyle属性でも設定できる。正しい境界矩形を計算するには、style属性も考慮しなければならない。
またその際親からの継承も考慮すべき。これはstyleに限らないが。
** TODO テキスト/複数行になるとtext-decorationが機能しない
[[edraw:data=H4sIAHUN/WQAA42Sv07DMBDGX8U65jZ/ytBWTVeegTEkTmI1tSvHbVKmumJrF4RAQmKgC6AysCIGXsaV6GNwSaMKIaAMsXK6u+/73dm9bBKTYpjyzINEqVHXsvI8b+atppCx5dq2bWEF7Eq6Rcr44KdCp9PpWFUWSM5ClXjQattAEsriRHnguBhMqMyY4Bg1Hej3JA0UKTzAzLQ6f21koQc0lH7eOPODQSzFmIdAMiXFgHrABadAIpamHhxFUQTE6vfir00inKKfooUi5dEIaSCkryoWlKISwWlFcYxuiFSa1oKu68Kuy+dBIqQHmfKlwrzgqpGxcyRw2nUY+UOWoszpmJwIlbAA+kZfmfnS6JfN62y7wp97oy+NfjT61szmPauUrtkOOf7F/j+acsT2fkS0zUY+J0HqZ3j9lfxOrc5v3pYV8rPRazNfGP2EvGXLoU4SopFDh+X4a6PvjF58gzd6+XGx2j7cGH1d7ed9v5CdQb0YK8YPX2D/E5VqM5upAgAA]]

※エクスポートすると両方ともアンダーラインが引かれるのでlibrsvgのバグ？

** TODO テキスト/テキストに関する設定がもっと欲しい
** TODO テキスト/より良いテキストサイズの推測
Emacsの window-text-pixel-size で比率を求めてはどうか。

#+begin_src elisp
(let ((string (propertize "abcdefghijklmnopqrstuvwxyz"
                          'face
                          '(:family "Arial" :width "normal" :height 100))))
  ;; From string-pixel-width implementation
  (with-current-buffer (get-buffer-create " *string-pixel-width*")
    ;; `display-line-numbers-mode' is enabled in internal buffers
    ;; that breaks width calculation, so need to disable (bug#59311)
    (when (bound-and-true-p display-line-numbers-mode)
      (display-line-numbers-mode -1))
    (setq-local line-spacing 0)
    (delete-region (point-min) (point-max))
    (insert string)
    (buffer-text-pixel-size nil nil t)))
#+end_src

** TODO テキスト/テキスト関連プロパティを出来るだけ考慮する

- [[https://triple-underscore.github.io/SVG11/text.html#TextLayout][テキスト – SVG 1.1 （第２版）]]
- [[https://www.w3.org/TR/SVG2/text.html][Text — SVG 2]]

- rotate
- inline-size
- shape-inside
- shape-subtract
- shape-padding
- shape-margin
- line-height
- dominant-baseline
- alignment-baseline
- baseline-shift
etc

** TODO テキスト/textPathに対応する
** TODO テキスト/空のテキストにまつわる問題

[[edraw:data=H4sIAAT7V2YAA6WQUU7EIBCGr0LG5xZa3Y3dlN6lFkpJKxjApetbu8nGRN88hvEAXkcuIu1q4oM+mWGGEP7vn8mUdi+Ql8x1FPJrAqjjUnSOQkbiY7wdlKXQOXe3w9h7n/rLVBuBc0IIjiigPTdWahWBNPsCduMgVf8blhVFgddfqErDG4dGCrHPYa1/jiEZBc5M7ZObuumF0feKAbLO6J5TUFpxQK0cBgoXbdsCwlUpfkKaHWI/x0f3LcvIEpHSyiVWPkSbbAtokSS1ajptKFhXG7fOtl1Wcb7wf3yuNqvPJofq4/QSpvN5DcdTmN/C/B6Oj2F6DtMc5qcSLyZViUXMuOnqE3lcxBSqAQAA]]

- GUI変形の時に出る拡大率がおかしいような？

** TODO マーカー/マーカー選択ダイアログを作る
edraw-marker-pickerを作成する。メニューの代わりに使用できるようにする。
child-frameで表示する。出来なければメニューで十分だと思う。
** TODO マーカー/自動的に方向を調整する
参照点を矢印先端(refX=0, refY=0)にしつつ、矢印の末尾が線上を通るようにマーカーを回転させる。

[[edraw:data=H4sIABEidmcAA91UTY+bMBD9K6PJZSsFsCGhZIWR2l566aWXtkd3MR8KsdHghOy/rzFEySq7qva6AiP7eT7emxmRD6cazodODwIba/vHKBrHMRyT0FAdxYyxyFngbPJ47lq9f82Q73a7yN8ijG1pG4FJxhAa1daNFRhv3OGkaGiNFshDjkVeqmqAthSoSpJjMB0depC0V/QSD1hgeqUDSWRGhNnk15yGM3ZBvi/JPNSTGhSd1JehV0/2p7StEaiNVo5Hq8av5iww2DKYlnMA70Sq+i1w3vzxG0Ot0i6mPFqDMFgyeyVwxdn0XIBgkcwRqrbrljxF3kvbgBPyI0jXQQJs7dKl6wTBktRDZeggkIyVVj3wjH1CiIo8mrW8UQj+wQpxKziaJqDIybGEs8/57L9vztO1NH/l074mc9TlldoscaaxqqrKJ6tvnUz5fOE2cwgGK8lFP1L3sHp9+lyTJh0pg4x92zBwr2sdxAwSNmEvhP+vTLHn5AncXdy53sZdKPDUc+DxTGLq3sTCwdfAizKlyztd/F7XNgu3wDdZ+HkL6RLp3YKi2i331yj+AZqQGu5dBAAA]]

問題:

- 計算方法 : 線の端点から一定距離を最初に超えた場所を探す
  - 見つからない場合がある
  - 適切ではない場合がある
- 更新タイミング
- 通過点指定方法 : マーカータイププロパティで指定する
- 中空抜き色 : これだけやっても、中空菱形や中空三角形などでは問題が生じる

** TODO パス編集/空のパスをどうするか
現在までに見つかっている問題:
- C-tで変形しようとするとエラーが出る
  : Error running timer ‘edraw-update-image-on-timer’: (wrong-type-argument number-or-marker-p nil)
  : *: Wrong type argument: number-or-marker-p, nil
  
** TODO パス編集/1点だけのパスにまつわる問題を修正する
1点だけのパスにはいくつか不具合がある。

[[edraw:data=H4sIAOb5V2YAA3WRvU6EQBDHX2Uz12gi7MJ5JFxYEu3tfAE8FtiAu5dlPTg7MLHQwsLe1sLCVgtfRuLXW7iAJBaa/Uhm5vf/z042KDcpqk8LUVLItF4vMa6qyq7mtlQpdgkh2BAwIsu64CL/C3R838dDFVDFY51RmO8TQBnjaaYpOK4JNkyVXAoT2Q6EgWIrjWoKprId7n+FPKbAYhVV1km0ylMlz0QMqNRK5oyCkIIBSnhRUJglSQIIh0H6WyTjrem3jnSGTPLII3semRSjevKaOaRfU8L6eZI7eGpW66nPxCVSaKvk50breIB6xIrEKpOKQqkjpYfhFoY0ky5cCF8vb7tm3A/OR/vcNW3XXu8cHxx2zf1X8/R+dfd28/h58bIb4N4tDHBqjvmE8BuXw9SCrAEAAA==]]

- マウスで選択出来ない
- 「この点でパスを分割」が選べてしまう (エラーも出ない)
- 「滑らかにする」が選べてしまう (エラーも出ない)
- 「点を削除」が選べてしまう (実際に消えるが、空のパスが出来てしまう)
- (コンテキストメニューを出して)「パスの向きを反転」が選べてしまう (エラーも出ない)
- (コンテキストメニューを出してパス全体の)「滑らかにする」が選べてしまう (エラーも出ない)

** TODO パス編集/Aコマンドがあると編集中にエラーが発生するのを直す
クリックしようとすると「Unsupported path command found」というエラーが発生する。
** TODO パス編集/アンカーポイントの複数選択・移動機能を追加する
図形を調整するときに無いと不便。

** TODO パス編集/一つのサブパスだけドラッグで選択・移動できるようにする
** TODO パス編集/pathはできるだけd全体をUNDOしないようにする
「@todo Avoid using edraw-push-undo-path-d-change?」の部分。
d全体をUNDOデータにすると実際にアンドゥしたときに全てのポイントが無効になり、選択状態を全て解除しなければならなくなるなどの弊害がある。
例えばポイントを追加したら、ポイントを削除するUNDOデータを登録すれば済むはず。ポイントの識別はインデックス番号で十分。
注意点:
- 選択状態の追跡部分は注意が必要。現在のedraw-on-selected-shape-changedは shape-path-data タイプの変更で deselectしているので。点を削除したら点をdeselectしなければならないはず。
- パスデータはLからCへ暗黙的に変換される場合がある。これが行われるとインデックス番号がずれてしまう場合がある。そもそもCからLにはどうやっても戻らないのでデータも戻らない。結局dを戻した方が簡単かもしれない。

[2023-05-30 Tue]追記:
[[elisp-function:edraw-create-forward-handle]]と[[elisp-function:edraw-create-backward-handle]]はできればUNDOでポイントが無効にならないようにしたい。なぜなら、ハンドルをドラッグするときに使用しており、UNDOで無効になるせいで再取得を余儀なくされているから(see: [[elisp-function:edraw-drag-handle-on-click-anchor]]、edraw-on-down-mouse-1(edraw-editor-tool-path)。

** TODO パス編集/UNDOしたときに開パスの外側のハンドルが失われるのを何とかする
(従来は-forward-handle-pointが失われていたが、edraw-path.elの書き換えで少し状況が変わった)

edraw-move-nth-pointで指定indexのポイントが見つかれない問題として表面化する。

ドラッグでアンカーを追加したときに((edraw-on-down-mouse-1 ((tool edraw-editor-tool-path)...)...)で)、次が呼ばれる。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

もう一度同じようにアンカーを追加したとして

- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

これをUNDOして、もう一回UNDOしたときに、1回目のedraw-move-with-opposite-handle-symmetry-on-transformedに対するUNDOは正しく動作しない。2回目のedraw-add-anchor-pointに対するUNDOはdを復元するが-forward-handle-pointまでは復元しないから、-forward-handle-pointに対する移動をUNDOできない。

現在はedraw-move-nth-pointで見つからなかったときに単に無視している。
dプロパティを復元する方式だとどうしても-forward-handle-pointは戻らない。

現状次の三つは全てUNDOでdを復元する。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle

なので、これらをdプロパティUNDOをしないように改変すれば良い。

しかし話はそれほど簡単では無く、LをCに暗黙的に変換してしまう問題にも対処しなければならない。ちゃんとLに戻さないと番号がずれるしパスデータも変わってしまう。ちゃんとできるならポイントオブジェクトが無効にならないので良い。

それが出来ないならd復元時に-forward-handle-pointも復元するのが良いかもしれない。
edraw-push-undo-propertiesでdを保存するときに追加の処理を入れる感じ。
edraw-set-propertiesで復元するのでは無く、専用のシリアライズデータ形式で保存・復元したらどうか。そうすれば数値の文字列化による誤差も回避できる。

[2024-06-05 Wed]edraw-path.elを書き替えたので状況が少し変わったが、問題は残っている。結局d属性直接変更が行われると開パス端点(endpoint)の外側のハンドルは失われる。これは最終的にSVGとしてセーブ・ロードしたときに失われるのは避けがたい。独自のdata属性に記録すれば出来なくは無いけど。編集中については、引き続き地道にdを復元するUNDOを減らしていくしかない。書き換えによってそれが大分やりやすくなった。

** TODO パス編集/パスなどの辺をドラッグできるようにする？
** TODO パス編集/既存パスからの継続は選択中のパスに限定しない方が良い？
** TODO パス編集/パスの始点を移動しようとして閉じてしまうミスを防げないか
** TODO パス編集/サブパスを閉じたり開いたりするコマンドを追加する
理想的にはクリックした場所のサブパスを特定して、それに対して操作する。
出来なければアンカーポイントに対する操作でも仕方が無いけど。
パスツールのクリックで閉じられれば必要性は薄い。
開く方はサブパス分割コマンドで出来る。

** TODO パス編集/パスを滑らかにするコマンドの閉パス +や複数サブパス+ への対応
[[elisp-function:edraw-make-smooth]]

閉パスに対して実行すると開パスに変わってしまう。
複数サブパスにも対応していない。

[2024-06-12 Wed]複数サブパスに対応した。閉パスにも一応対応したが、閉じている点が滑らかにならない。要改善。
正直滑らかにするという目的ならば、全アンカーに個別に「滑らかにする」を適用した方が妥当な気もする。

複数の方式を切り替えられるようにすべき？

** TODO 新しいshape-typeを追加したときの問題を修正する
- edraw-shape-descriptor-from-svg-element-without-editor ::
  直接edraw-svg-element-get-propertyを使うべきでは無い。
  [[*gタグのshape descriptor変換についての問題][gタグのshape descriptor変換についての問題]]も関係あるかも。

その他にも何かあるかもしれない。直接DOMを操作しているところは怪しい。

** TODO gタグのshape descriptor変換についての問題
edraw-shape-descriptor-from-svg-element-without-editor関数にgタグに特化した処理がある。子孫の要素を再帰的にshape descriptorへ変換するためのもの。ここはこれでいいのだろうか。

将来的に <g data-edraw-type="edraw-complex-shape">...</g> のようなものを作るかもしれない。その際に子孫をshape descriptorとして保存する必要があるのだろうか。 edraw-shape-types の :create-element やその後にプロパティ設定で子孫の内容を生成すべきなんじゃないだろうか。

このshape descriptorにするところは問題ないのかもしれない。しかし、shape descriptorからshapeオブジェクトを作るところ(edraw-shape-from-shape-descriptor)では問題が生じる。子孫に対してもshapeオブジェクトを生成してしまう。

gタイプのみ子孫をshape descriptorに入れるべきで、それ以外では入れるべきでは無いのだろうか。しかし、Shape Pickerに登録したときに絵が出てこなくなってしまう。

子孫に対してオブジェクトを生成してしまうことが問題であれば、そうしないように生成することも出来なくはない。edraw-shape-typesに子孫展開の抑止フラグを追加するとか。

また、Shape Pickerが問題なのであれば、基本的にSVG文字列で処理すれば良いだけのような気もする。しかしコピーしたときはshape descriptorなのでその時点で情報が落ちてしまったらどうしようもない。

そもそもshape-descriptorという仕組みがあまり良くなかったのかもしれない。全図形はSVG文字列との相互変換が出来ることが前提なのだから、それで十分だったのかもしれない。

とりあえず ~(eq (dom-tag element) 'g)~ から (~(eq (edraw-shape-type-from-element element) 'g)~ へ変更しておいた。新しい図形タイプでg要素を使い、再帰的に処理したい場合は、何か対策をする。

** TODO shape-descriptorの不要な属性を削除する
あまりに冗長なので。デフォルトで埋めないので大丈夫だとは思うけど要確認。

** TODO テキストエディタでSVGを直接編集できるようにする
最終手段用。
中身の無いgを選択して消す方法が無いので(中身の無いgを消す機能があっても良いけど)。
非グラフィカル環境でリンクの中身を書き替えるのにも使えるかも。

edrawリンクのdata-file相互変換機能があれば十分かも？　dataリンクをfileリンクに変換してファイルを編集しdataリンクに戻せば良い。

** TODO 見えない要素を一括で消す機能を追加する
中身の無いgを消すのは困難。「次のshape」を使えば出来ないことは無いけど。
同様に中身の無いpathも消したい。
その他の形状は迷うところ。一応座標があるので選択は出来る。

** TODO グラデーションエディタを作る
** TODO edraw-svg-printは本物のtopやcommentという名前のタグがあったら困る
本当にtopやcommentという名前を持つタグがSVGに追加されたら困るという話。
まぁ、仕方ないよね。どちらかと言えばlibxml-parseの問題。
ただ、topの方は関数を分ければ対処可能。ルートがtopかsvgと分かっている場所は専用の関数を呼ぶべき。もしくはトップ以外と分かっているところはedraw-svg-print-nodeみたいにするか。

edraw-svg-printの意味がちょっと曖昧になっている。svg要素をprintする関数なのか、汎用的なSVG仕様定義要素をprintする関数なのか。現在は再帰で呼び出しているのだから後者と考えざるを得ない。でも後者ならtopを特別扱いするのは良くない。

** TODO 色/色挿入・置き換えコマンドでは現在の色をバッファに即時反映する
即時反映した方が良いことがあるかもしれない。
自動的にセーブしてプレビューするような仕組みを構築した場合とか。
** TODO 色/edraw-color-picker-replace-color-atは可能な限り元の記法を尊重する
元の記法を認識して、極力それに合わせるようにする。
rgbaはもはやrgbの別名。それにカンマでなく空白で区切っても良い。
[[https://developer.mozilla.org/ja/docs/Web/CSS/color_value/rgb][rgb() - CSS: カスケーディングスタイルシート | MDN]]
カンマの後のスペースまで認識するかは悩み所。
形式を認識する関数が必要。

** TODO 色/HSL等の別の表色系に対応する
** TODO オブジェクトを一覧から選んで選択できるようにする
** TODO オブジェクトを一覧から選んでプロパティエディタを開けるようにする
** TODO ソース/defgenericをどうするか
defgenericは全部に必要？ どこに書くべき？
** TODO ORG/edraw-org-link-query-replaceを作る
置換するSVGを一時的なバッファで見せながら置換していく。
この辺りはreplace.elのコードを使用するか迷う。replace-stringやquery-replaceと同じインタフェースにするなら使わないと自分で実装するのは厳しい。
出来るのであれば edraw-org-link-replace-regexpやedraw-org-link-replace-stringもreplace.elを使いたい。一度使おうとしたが、edraw-org-link-re-searchでマッチするリンクを探すところで諦めた。それ自体replace.elの規則で探さないといけない気がしたので。

** TODO ORG/全体的にpathとdescriptionの両方がedrawリンクの場合を考慮してない
~[[edraw:...][edraw:...]]~ という形を考慮していない。
まぁ、これは仕方ないと思うんだけど。path側のedrawリンクは意味が無いわけだし。
path側がfile=リンクでそれを開けるのなら多少意味はあるか？

~[[file:original.edraw.svg][file:small.edraw.svg]]~ みたいなのは考慮する必要があるのでは？　現状ではoriginal.edraw.svgが開く。

** TODO ORG/org-{html|latex|odt}-inline-image-rulesにちゃんと対応する
[[*ORG/org-modeでODTへのエクスポートに対応する][ORG/org-modeでODTへのエクスポートに対応する]]の実装中に気がついたのだが、org-{html|latex|odt}-inline-image-rules変数でedrawリンクの画像化を禁止したい場合に対応していない。そんなケースを許すべきなのだろうか。そんなことをしてもdata形式ならbase64がずらずら並ぶだけなのだけど。
一応
[[elisp-function:edraw-org-export-html-link]], [[elisp-function:edraw-org-export-latex-link]], [[elisp-function:edraw-org-export-odt-link]]の先頭に@todoコメントを入れておいた。
** TODO ORG/一時的に一つのリンクをインライン表示しないようにする機能
[[*ORG/plainリンクとangleリンクをインライン表示する][ORG/plainリンクとangleリンクをインライン表示する]]を実装したときに、plainリンクをインライン画像表示するとブラケットリンクを一時的に壊して中を編集する時に非常に煩わしいことが分かった。せっかくブラケットリンクを壊してテキストを確認・編集しようとしたのに、それが画像になってしまうのだから。

そもそもリンクを壊さずに一時的に特定のリンクをインライン画像化から外す機能があれば良い。オーバーレイにそのようなプロパティを指定しても良い。実際既にそのようなプロパティはあるが([[elisp-function:edraw-org-link-image-set-visible]])、編集中に使うものなのでそのまま使ってもよいものか。

一応次のようにすればインライン画像化を解除できる。

#+begin_src elisp
(edraw-org-link-image-set-visible (edraw-org-link-image-overlay-at) nil)
#+end_src

とは言えこれで解除しても、ブラケットの中を編集するにはブラケットを壊すことになるし(もちろんC-c C-lで壊さずにもできるけど癖として壊してしまう)、その時にplainリンクが発生してそれが画像化されてしまい、再度解除しなければならない。煩わしい。

インライン画像化を解除しつつ、リンクの折りたたみも解除するコマンドが欲しい。

** TODO ORG/複数行にわたるリンクに対応する？
angleリンク(bracketリンクも? description部分のみ?)は複数行にわたってpathを書ける。
正直そこまでする必要は無いと思うけど。
1行の長さを抑えられるメリットは一応ある。
改行やインデントを取り除いて読み取れば良い。
編集後はどうする？
** TODO ORG/リンクのdescription部分のangleリンクをエクスポートする
これはorg-modeのバグなので、解決するのを待つ。
[[elisp-function:org-export-insert-image-links]]内でのorg-link-angle-reの取扱に間違いがある。正規表現link-reにorg-link-plain-reとorg-link-angle-reを含めているが、plain-reの方の括弧しか見ていない。typeやpathは必ずnilになる。
そこさえ直れば、こちらはおそらく何もしなくても良いと思う。

** TODO ORG/org-activate-linksがdefsubstになっている
ので、adviceをかけるのはやめた方が良さそう。なんで動いているのだろう。インライン展開されない条件になってる？　いや、関数名シンボルが org-font-lock-keywords に載ってるからインライン展開されないのは当たり前だった。

org-agenda.elにはorg-activate-linksを直接呼び出しているところがある。そこにはadviceが引っかからないのだが、良いのだろうか。なぜ呼び出しているのか調べる必要あり。

本来はadviceをやめて独立したkeywordにした方がおそらく良いのだと思う。そのほうが効率も良いのでは？　org-activate-linksは一つのfontify対象リンクを見つけるたびにリターンするわけだし。そのほとんどはedrawリンクではないはず。

** TODO ORG/org-mode 9.3(Emacs 27.1バンドル)でエクスポートできない
org-link-parametersの:export関数が3引数だから(引数infoが無い)。

edraw-org-link-exportのinfoを&optionalにすれば動くっぽい。
完全にはテストしていないし動く原理も確かめていない。

対応すべきだろうか。

** TODO ORG/ファイル名を付けていないOrgバッファでimage要素が表示できない
仕組みを知っていればそりゃそうだろうとしか言いようが無いけど……。
デフォルトのbase-uriはbuffer-file-nameなので。

edraw-modeはファイル名を付けるまでdefault-directoryを使うようにした。

[[*edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない][edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない]]

org-modeでもそうする？(そんな使い方する人どれだけいるの?)

それともedraw-editor側でそうする？(それは良くない気がする)

** TODO ORG/個別のedrawリンクにHTML属性値を指定出来るようにする
~[[edraw:html-attr-width=400;html-attr-alt=Title;file=example.edraw-svg]]~ のような形式？
それともhtml-attr=で一つにまとめる？
** TODO 表示改善/パスUIのハンドルや点が見づらいのを何とかする
ストローク色に応じて色を変えられないか。
グリッドを mix-blend-mode: difference にしたら激重だったので、そのやり方は避けたいかも。

** TODO 表示改善/選択中オブジェクトのアウトラインに線を入れる
** TODO カスタムシェイプ/貼り付け前に縮尺を指定できるようにする
あらかじめ大きさを指定したい。
問題はUI。ツールオプションを指定するGUIは可能か？
ドラッグで大きさが変えられるようになったので必要性が薄くなってはいる。

** TODO カスタムシェイプ/図形の一部の寸法を維持したい
例えば次の図形を登録したとして、左の二点、中央の三点、右の二点はその形を維持したい。

[[edraw:data=H4sIAB3X3mQAA3VQwZKDIAz9FSa9bgWt42hHvHjej3ArIqOFDrLF/v1G1K2H3QN5vORB8lJOT0m8al3P4ZIwIL1Qsncc4oU8hZ2U0ciiGMh8H/XEoXfucaXUex/5S2SspAljjOJHm+Q6j0oPfwnjoihoqEJVWnFzZOaAfV4h/juGajmI1jb+/NXcBmnNt26BTM6aQXDQRgsgnRpHDqeu64DQqpTHR6Z9Yb9H43qCyc+UfeSsxpgxkr1jvd6xY4BQr+MtiZDuUB/YUsuDEpewsCQ7QL2z/Bdyts+6zr26OG/e07etE+4qWKESD263+gFOZ/yNrAEAAA==]]

ラベルの折り返し部分や二重線も同じような問題がある。
何か拘束条件を設定できればいいのだけど。
いっそのこと図形を生成する関数を設定してしまうというのも手だけど。

** TODO シェイプピッカー/ドラッグ&ドロップできるようにする
範囲選択したentryをドラッグして別の場所へ移動できるようにする。

** TODO シェイプピッカー/markerを使った図形の表示を改善する
矢印などのmarkerが表示されない。defsをSVG文字列に含めていないから。

edraw-shape-descriptor-to-svg-element にダミーのdefrefsを使っているので、そこに何か定義が入ったらそれもコピーしてはどうか？

** TODO シェイプピッカー/org-modeファイルをピッカーに出来るようにする
edraw-org-shape-picker-minor-modeが必要？

** TODO シェイプピッカー/開閉状態を維持する
最低限エディタ使用中はバッファをkillしないようにするだけでも違う。
理想的には開閉状態を保存・復帰すべき。
** TODO シェイプピッカー/シェイプはセクションの先頭部分にだけにする
現在はセクションの下にシェイプとセクションが好きな順番に配置できる。
しかし、セクションの後にシェイプを配置するとそのシェイプがセクションの中にあるのか外にあるのか分かりづらい。org-modeやoutline-modeのように、子セクションとエントリーの中身を完全に分離すべき。
** TODO プロパティエディタ/対象の変化を取りこむ時間を延ばす
入力中に書き換わってしまうことが多いので。
もちろん入力が変化したらタイマーをキャンセルして延ばす。
** TODO プロパティエディタ/ウィンドウの高さを設定できるようにする
高さが低いフレームで使っている場合、プロパティエディタが邪魔で作図に支障がある。
自動でやるなら、ウィンドウの高さから画像の高さを差し引いて、残りをプロパティエディタの高さにすべき。もちろん小さくなりすぎないように何行かは確実に残す。
ウィンドウの高さがあまり無いのであれば、そもそも分割で表示すべきでは無い。フレーム一杯にプロパティエディタを開いて、調整したら閉じるような使い方をすべき。

** TODO プロパティエディタ/連続変更でも操作の区切りでUNDOを分割する
同じプロパティに対する変更でも、ある程度の区切りで別のUNDOデータを生成した方が良い。
- 連続するドラッグ (ドラッグ1回毎にするか、連続するドラッグはまとめるか)
- 連続するホイール (ホイール上下の間は同じUNDO)
- 連続する数値入力 (理想的には、フィールドからフォーカスを外したら別のUNDOに)
- 色変更ボタン (迷うところ)
- choiceボタン (1回の変更毎にUNDOデータを作るべき)
ドラッグやホイールはlast-commandでチェックできるが、その他は難しい。

** TODO プロパティエディタ/エラーチェックを強化する
** TODO DOMツリーの文字列化は変更のあったサブツリーのみに限定する
** TODO パスの内外判定、パス全体(全セグメント一括)のAABBチェック
をした方が良いのでは？　速いし誤判定防止になる。
** TODO パスの内外判定、線のつなぎ目ですり抜けるケースがまだあると思う
** TODO dom.el/svg.elの代わりを作る
- dom.elは兄弟や親へリンクが無いので効率が悪い。いろんな関数の引数にいちいち親・祖先ノードが必要になってコードが見づらくなるし、いちいち探索処理が走る。
- +svg.elの要素を作る関数の一部は正直dom-nodeで直接作った方が簡単。+ →edraw-dom-elementを使うようになった。
- svg.elのグラデーションサポートは中途半端。
- +svg-printは属性やテキストをエスケープしていない。+ →edraw-svg-printで対応済み。
- svg-printにフィルタ関数を指定したい。-edraw-で始まるクラスを持つ要素を消したい。
- +親を隠し属性で持たせても良い。+ →実現した。

** TODO el-easydrawをEmacs26に対応させる
次のあたりを修正すれば動くっぽい。
- (require 'seq)
- (require 'subr-x) when-let, if-let等
- +svg-node関数を使わないようにする+ →すでに使用していない
ただ、Emacs26の時代はlibrsvgのバージョンも古いのであえて対応しない方が良いかも。

* Finished
** DONE パスの内外判定、直線のつなぎ目ですり抜けがある
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを削除できるようにする
   CLOSED: [2021-08-16 Mon 23:34]
** DONE オブジェクトの前後順序変更機能
   CLOSED: [2021-08-16 Mon 23:33]
** DONE オブジェクトの属性を変更できるようにする
   CLOSED: [2021-08-17 Tue 23:16]
** DONE 矩形属性変更機能 (ストローク、フィル、角丸)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE 楕円属性変更機能 (ストローク、フィル、xy半径)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パス属性変更機能 (ストローク、フィル)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE テキスト属性変更機能 (フォント、等々)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パスのアンカー移動時に制御点も移動する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE 後ろのセグメントのハンドルを前のアンカーより優先する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE グリッドON/OFF機能
   CLOSED: [2021-08-18 Wed 12:18]
** DONE ツールバーにメインメニューボタンを付ける
   CLOSED: [2021-08-18 Wed 13:38]
** DONE カンバスサイズ変更機能
   CLOSED: [2021-08-18 Wed 17:19]
** DONE 背景指定機能(指定色、透明)
   CLOSED: [2021-08-18 Wed 17:19]
** DONE グリッド間隔設定機能
   CLOSED: [2021-08-18 Wed 17:20]
** DONE デフォルトフォント設定機能
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 選択ツールを追加する
   CLOSED: [2021-08-20 Fri 01:37]
** DONE 既存の矩形や楕円を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 既存のテキストの位置を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE オブジェクトを選択できるようにする
   CLOSED: [2021-08-20 Fri 04:20]
- 選択したオブジェクトはアウトラインに細い線を入れ、コントロールポイントを表示して分かるようにする。
- ドラッグで選択・移動する。複数候補がある場合は、選択中のものがあればそれを使い、選択中のものが無い場合は一番上を選択する。そして移動する。重なり選択メニューを出してしまうと移動できなくなってしまうので。
- 選択中に表示されるコントロールポイントをドラッグした場合、リシェイプを行う。
  - 矩形の場合、四隅がコントロールポイント。矩形の位置幅高さが変わる。
  - 楕円の場合、四隅がコントロールポイント。楕円の位置半径が変わる。
  - パスの場合、各アンカーポイントがコントロールポイント。アンカーの位置が変わる。

** DONE アンカーポイントを選択できるようにする
   CLOSED: [2021-08-21 Sat 06:15]
** DONE 既存のパスを再編集できるようにする
   CLOSED: [2021-08-21 Sat 06:17]
** DONE パスデータのA以外のコマンドに対応する
   CLOSED: [2021-08-21 Sat 19:13]
edraw-path-cmdlist-from-dで全部LとCに変換する。
** DONE パスポイントの移動はグリッドの交点へスナップさせる
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 選択状態をエディタの状態へ引き上げる
   CLOSED: [2021-08-22 Sun 19:33]
選択ツールはあくまでエディタオブジェクトの状態を変更するだけ。
パスツールはアンカーを追加するたびに選択状態を更新する？。

** DONE パスツールにおいてアンカーを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 全クリア機能
   CLOSED: [2021-08-24 Tue 03:35]

** DONE shapeクラスを作る
   CLOSED: [2021-08-23 Mon 03:25]
- [X] pathのcmdlistはオブジェクトが管理する
- [X] 要素に対する変更は全ていったんshapeクラスを通す

** DONE 各ツールは選択状態を正しく制御する
   CLOSED: [2021-08-23 Mon 06:53]
矩形、楕円、テキスト各ツールは図形生成直前に選択を解除し、生成した図形を選択する。

** DONE パスツールを使いやすくする
   CLOSED: [2021-08-23 Mon 17:16]
- [X] アンカーと同一点のハンドルは表示しないし選択できないようにする。
- [X] アンカーのハンドルを消せるようにする。アンカーと同一点にする。可能ならLに置き換える。
- [X] アンカーのハンドルを表示できるようにする。仮のポイントにハンドルを追加する。必要に応じてCに置き換える。→スムーズ化機能
- [X] 点対称の位置にあるハンドルは一緒に動かす。

** DONE クリックでハンドルを選択できるようにする
   CLOSED: [2021-08-23 Mon 17:17]
ハンドル選択中はそのハンドルだけを単体で動かせる。
アンカー選択中は直線状のハンドルは直線状を維持する。
** DONE パスツールにおいてアンカーを左クリックで選択する
   CLOSED: [2021-08-23 Mon 18:33]
ただし選択アンカーがどこになろうと続きからパスを伸ばせること。
** DONE edraw-editor-toolとedraw-editor-tool-selectのmouse-3は同じ？
   CLOSED: [2021-08-23 Mon 19:08]
なので消す。
** DONE shape-point-pathはd属性の変更をshape-pathへ依頼すべき
   CLOSED: [2021-08-24 Tue 00:07]
** DONE 矩形や楕円の辺にも制御点を付ける
   CLOSED: [2021-08-24 Tue 00:07]
** DONE shape-pointオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-24 Tue 00:32]
- 矩形や楕円はshape毎に一つのrectを参照するべき。というかshape毎に四つのpointオブジェクトを固定すべき。
- テキストは一つのpointオブジェクトを共有するべき。
- パスは別途調査する。

** DONE 変更通知/最低限の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 03:18]
- 全ての変更時にedraw-on-shape-changedメソッドを呼ぶようにする。
- editorにはedraw-on-document-changedメソッドを追加する。
- 末端の変更は次の流れで変更をドキュメントへ知らせる。
  edraw-on-shape-point-changed, edraw-on-anchor-position-changed
  → edraw-on-shape-changed → edraw-on-document-changed

** DONE 変更通知/editorに変更済みフラグを追加する
   CLOSED: [2021-08-24 Tue 03:30]
** DONE 画像の更新を遅延させる
   CLOSED: [2021-08-24 Tue 04:22]
何かイベントをポストするかタイマーを使って後で更新すべき。もちろんエディタ(オーバーレイ?)の削除後に更新することはあってはならない。
** DONE 変更通知/全ての変更で自動的に画像更新を行う
   CLOSED: [2021-08-24 Tue 04:22]
遅延更新の仕組みが欲しいところ。
** DONE 変更通知/shapeクラスに変更通知の機能を付ける
   CLOSED: [2021-08-24 Tue 06:39]
** DONE 変更通知/図形を削除したときに選択も解除する
   CLOSED: [2021-08-24 Tue 06:39]
選択中の図形の変更を監視する。
** DONE 変更通知/shapeクラスにset-propertiesを追加する
   CLOSED: [2021-08-24 Tue 11:35]
update-propertiesを廃止する。set-propertyで細かく変更通知を出すのが嫌なので。
** DONE 変更通知/プロパティエディタで編集中のshapeが変更・削除されたとき
   CLOSED: [2021-08-24 Tue 11:35]
- 内容を更新する
- エディタをクローズする
** CANCELLED 変更通知/パスツールで編集中のpath shapeが他から変更・削除されたとき
   CLOSED: [2021-08-24 Tue 12:06]
- 削除されたら編集ターゲットを解除する
- アンカーの追加については、末尾にコマンドを追加しているだけなので問題ないはず。add-commandはMも追加するはず(要再確認)
→(edraw-removed-p shape)で判定できるようにする。変更フックより軽量なので。
** DONE 変更通知/選択状態の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 17:40]
** DONE 変更通知/shapeクラスのset-propertiesで値の変化チェックを確認する
   CLOSED: [2021-08-24 Tue 17:40]
値が変化したときだけon-shape-changedを呼ぶ。
** DONE 機能追加/shapeコンテキストメニューにfillやstrokeの変更を追加する
   CLOSED: [2021-08-25 Wed 00:56]
** DONE 機能追加/矢印キーで選択中のものを移動する
   CLOSED: [2021-08-25 Wed 00:56]
数値引数で移動量を指定。
** DONE shape-point-pathオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-25 Wed 16:27]
矩形や楕円、テキストは修正済み。要調査。
これが出来ると(右クリック等)アンカー操作後にアンカー選択を解除しなくてもよくなる。edraw-unselect-anchorで検索。

edraw-path-cmdはargsとして座標のリストでは無くedraw-path-pointオブジェクトを持つようにする。座標はedraw-path-pointオブジェクトが持つようにする。これによってアンカーやハンドルを一意に識別できるようになる。パスに変更を加えるときはedraw-path-pointオブジェクトを極力引き継ぐようにすることで不必要な無効化を避ける。例えばCを分割するときは新しいCを前に挿入して元のCのハンドル0を新しいCに移す。アンカーとその二つのハンドルだけ新しく作る。

これでも削除等で無効化は避けられないので、それをどう検出するか。shapeの変更通知で無効化の可能性がある変更で選択を解除する。それだと過剰なので、現在選択中のアンカーやハンドルが選択中のshapeに属しているか調べる。

** DONE 選択されているアンカーやハンドルが削除されたときに選択を解除する
   CLOSED: [2021-08-25 Wed 16:27]
@todoあり。削除されたオブジェクトを通知する機能があると便利？ pathの場合同一性判定に難あり。
** CANCELLED rect、ellipse、textツールでアンカーポイントを動かせるようにする
   CLOSED: [2021-08-26 Thu 02:34]
アンカーが表示されているのにドラッグできないのは違和感があるので。
ツールの邪魔になるという判断だが、ドラッグできないならいっそ選択を解除した方が良い。→選択しないようにした。
** DONE 右クリックメニューにSelectを追加する
   CLOSED: [2021-08-26 Thu 02:34]
** DONE パスツール/始点のクリックでパスを閉じる
   CLOSED: [2021-08-27 Fri 13:03]
- [X] マウスで押し下げたアンカーがMコマンドによるものなら、その点へ線を引いてZで閉じる。
- [X] そのままドラッグでハンドルを調整できる。まずは修正箇所を洗い出す。
- [X] Mのbackwardハンドルを取得できるようにする。
- [X] マウスボタンを離したら編集中のshapeをクリアして新しいパスを引けるようにする。

** DONE パスを閉じられるようにしたことによる問題を解決する
   CLOSED: [2021-08-27 Fri 13:03]
- [X] Z命令を末尾に追加する。
- [X] ただし -forward-handle-point が末尾にある場合は、MまでのCを生成してからZを入れる。可能であればMのforward handleと対称の位置にbackwardハンドルを追加する。
- [X] prev-anchorとnext-anchorでMとZを挟んでアンカーを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを作成できるようにする。
- [X] Zで閉じた点をスムーズ化できるようにする。
- [X] Zで閉じた点のハンドルを削除(コーナー化)できるようにする。
- [X] Zで閉じた点の移動に対応する。
- [X] backward handleからparentアンカー点を探したときはMの点を返す。→handleのnext anchorでMの点を返すようにしたら直った。
- [X] 念のためclosing segmentでforward handleを求めたときにMの先を返す。
- [X] Zで閉じた点の前にアンカーを挿入できるようにする。
- [X] Z直前のMと同一位置のアンカーは取得できないようにする。
      edraw-path-cmd-anchor-point-arg-indexはclosing segmentを無視すべき。
- [X] Zで閉じた点の削除に対応する。
  - 先頭のMを消したとき、対応するZがあり、その前に消したMと同じ座標のCがあるならCのアンカーポイントとその前ハンドルをMの次のアンカーのものにする。
  - Zの前のCやLを消そうとするとき、そのアンカーポイントがMと同じならMを消すものとして処理する。
- [X] closing segmentの始点(Zの前の前のアンカー)を削除するとMのforward handleが表示されなくなる。ハンドルに関する操作も色々受け付けなくなる。
- [X] 平行移動すると閉じた点のハンドルが正しく動かない(隣接の点を消した後)。
- [X] 閉じて点のmake smoothでハンドルは生成されるが0距離になる。

** DONE shapeの右クリックメニューからパスを閉じられるようにする
   CLOSED: [2021-08-27 Fri 14:11]
** DONE 閉じたパスを解除できるようにする(shapeの右クリックメニュー)
   CLOSED: [2021-08-27 Fri 14:22]
** DONE パスの閉じた点を削除したときのハンドルの位置を直す
   CLOSED: [2021-08-27 Fri 21:16]
** DONE SVG要素の属性をできるだけ文字列で扱う
   CLOSED: [2021-08-30 Mon 07:26]
- 数値で取得したい場合はdom-attrではなくedraw-svg-attr-coordやedraw-svg-attr-lengthを使用する。
- get-property、set-property系は極力文字列のまま扱う。そもそもHTMLの属性は元々文字列なのだからそのまま扱う方が間違いが無い。inner-textも文字列で問題ない。nilで属性無し、空文字列はそのまま空文字列として格納する。プロパティエディタ側で必要に応じて空文字列をnilに変換する。requiredじゃない属性は空文字列をnilにしてset-propertyすべき。

** DONE shape-circleを追加する
   CLOSED: [2021-08-30 Mon 11:06]
手動で書き替えたSVGを読み込んだときに一応操作できるようになる。
** [8/8] org-mode統合
*** DONE edrawリンクタイプを登録する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン画像表示する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン編集できるようにする
    CLOSED: [2021-08-29 Sun 19:46]
- [X] インライン画像を消してエディタを表示する。
- [X] エディタに保存ボタンと終了ボタンをつけられるようにする。
- [X] エディタが終了したらエディタを消してインライン画像を表示する。

*** DONE エクスポート対応
    CLOSED: [2021-08-30 Mon 16:53]
*** DONE インライン画像の右クリックでメニューを出す
    CLOSED: [2021-08-30 Mon 16:53]
description部分にedrawがあるとリンクを開く操作では開けないので。
*** DONE インライン画像上のC-c C-oで編集するかどうか聞く
    CLOSED: [2021-08-30 Mon 16:54]
*** DONE バッファが閉じるときに未保存を警告する
    CLOSED: [2021-08-30 Mon 17:24]
*** DONE 編集中のedraw-org-link-image-modeの切り替えに対応する
    CLOSED: [2021-08-30 Mon 17:34]
インライン画像表示をONにするとエディタが消えてしまう。
** DONE 単体の図形ファイルを編集できるようにする(edraw-mode)
   CLOSED: [2021-08-31 Tue 12:24]
** DONE 図形の中心にテキストを配置する機能
   CLOSED: [2021-08-31 Tue 18:00]
テキストツールにおいて、 +SHIFT(CTRL?)+クリックで図形の中心にtextを置くとか？+
変数edraw-snap-text-to-shape-centerを追加。図形の中心近くをクリックしたら中心にtextを置く。
SHIFT+クリックだとedraw-snap-text-to-shape-centerの効果を反転させる。
** DONE 複数行テキストに対応する
   CLOSED: [2021-08-31 Tue 19:47]
SVGでは直接的には実現出来ないがtextの下にtspanを作れば出来なくも無い。
#+begin_src svg
<text y="100">
<tspan x="10" dy="0" class="edraw-tline">TEST1</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST2</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST3</tspan>
</text>
#+end_src
のように書けば複数行になる。

x=はtextに付いたものをtspanに分配しなければならない。
textプロパティエディタとのやりとりでは、プロパティ設定時は\nがあればこのようにtspanで分ける。取得時はtspanで分けられた行を\nで結合する。各tspanにはクラス名でも付けて行に対応することを記録する。tspanは他の用途(テキストの部分装飾等)にも使うかもしれないので。

svg-imageには文字列化の際に不要な空白文字を入れてしまう問題がある。それによってテキストの位置がずれることがある。

#+begin_src emacs-lisp
(insert-image
 (let ((svg (svg-create 400 300))
       (text (dom-node 'text '( (y . 100) (fill . "white") (font-size . 30) (text-anchor . "middle"))
                 (dom-node 'tspan '((x . 100) (dy . "0"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1"))))
   (dom-append-child svg text)
   (svg-image svg)))
#+end_src

#+begin_src emacs-lisp
(image :type svg :data "<svg width=\"400\" height=\"300\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <text x=\"10\" y=\"100\" fill=\"white\" font-size=\"30\" text-anchor=\"middle\"> <tspan x=\"100\" dy=\"0\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan></text></svg>" :scale 1)
#+end_src

** DONE 機能追加/パスに矢印を付けられるようにする
   CLOSED: [2021-09-01 Wed 18:37]
markerを使うにしても色が問題。
context-fillが使えれば簡単にできそうだが、最新のlibrsvgじゃないとダメみたい。
- [[https://gitlab.gnome.org/GNOME/librsvg/-/issues/618][Support SVG2 context-fill and context-stroke (#618) · Issues · GNOME / librsvg · GitLab]]
- [[https://github.com/GNOME/librsvg/blob/master/NEWS][librsvg/NEWS at master · GNOME/librsvg]] (2.51.4)
なので、必要に応じてmarkerを生成する。
shapeのstrokeプロパティが変化したらmarkerを更新する必要がある。
#marker-arrow-ff0000みたいにできればいいんだけど、色指定の方法が色々あって案外面倒くさい。
pathにmarker-start, marker-endプロパティを追加する。値はnil, arrow, circle。
全部のshapeを確認して必要なマーカー定義を作成し、各shapeのIDの番号部分を更新する。
** DONE 表示改善/High DPI環境での画質を改善する
   CLOSED: [2021-09-02 Thu 11:52]
画像全体のサイズをどうするかがネック。
svg要素のwidth= height=で決まるが、これは今のところドキュメントのサイズと一致しなければならない。
image-scaleを適用すると誤差が生じるので、セーブ時に元のサイズに戻らないかもしれない。
editorに元のサイズを記録しておくしか。
現在は暫定的にcreate-imageのscaleに頼ることにしてある。
解決するならtoolbarの画像サイズも直すこと。こちらは誤差があっても問題ない。
** DONE エディタ内からオブジェクトのデフォルト値を設定できるようにする。
   CLOSED: [2021-09-02 Thu 18:12]
とりあえずお手軽に、メインメニューにShape Defaultを追加し、その下にrect、ellipse、path、textを追加。選択するとプロパティエディタが開いて設定できる。次にその形状を作ったときのプロパティがそれになる。保存する必要は無い。あくまでその時の一時的なもの。
** DONE 背景にマットや指定色を(一時的に)表示できるようにする
   CLOSED: [2021-09-03 Fri 09:15]
背景を透明にしたいときにEmacsの背景では見づらい場合があるので。
** DONE カラーピッカー・パレットを作る
   CLOSED: [2021-09-08 Wed 10:03]

[[file:screenshot/color-picker-minibuffer.png]]


[[file:screenshot/color-picker-inline.png]]

** DONE デフォルト値を変更したときにツールバーの色を更新する。
   CLOSED: [2021-09-08 Wed 10:03]
** DONE ツールバーにツールのデフォルト値を変更するボタンを追加する
   CLOSED: [2021-09-08 Wed 11:47]
クリックするとそのツールのプロパティエディタが出る。
とりあえずrect, ellipse, path, textのデフォルトの形状を編集できるようにする。
** DONE カラーピッカーで彩度が0のときに色相が選択できないのを直す
   CLOSED: [2021-09-08 Wed 17:55]
- NG (edraw-color-picker-read-color)
- OK (edraw-color-picker-insert-color)
なのでミニバッファ文字列との相互作用に問題がありそう。
(さらに色相を一番上にドラッグして離すと一番下になる問題も見つけた)
** DONE テキストのデフォルトを変更すると作成時にエラーが出るのを直す
   CLOSED: [2021-09-08 Wed 19:06]
フォントサイズが文字列化されたせいだと思う。
** DONE オブジェクトのクローンを作る機能を追加する
   CLOSED: [2021-09-08 Wed 21:25]
** DONE 選択中のオブジェクトを削除するキーを追加する(DEL)
   CLOSED: [2021-09-09 Thu 08:12]
** DONE 機能追加/メニューから数値指定で全体移動
   CLOSED: [2021-09-09 Thu 11:52]
** DONE 全てのオブジェクトをスケーリングする機能を付ける
   CLOSED: [2021-09-09 Thu 11:43]
edraw-translateのような操作で全ての点に対して行列を適用出来るようにする。
とりあえず作ったけど問題がいくつか。
- path以外(rect, ellipse, circle, text)では平行移動と拡大縮小以外の変形(回転等)はできない
- 長さを表す属性(font-sizeやstroke-width等)は変形できない(縦横均等なスケーリングまでなら行う余地はあるが、縦横の比率が異なるスケーリングなら単体の属性では表現できない)
全オブジェクトのスケーリングはあくまで全体のレイアウトを微調整したいという目的で欲しかったので、形状を変形すること自体が目的では無かった。とりあえずアンカーポイントが指定比率で動かせれば良かっただけなのでこれでも十分。
本格的な変形はtransform属性を導入して行うべきだが、それはそれで問題点は多い。例えば移動の際にtransformとx, y属性のどちらを操作すべきか分からなくなる。グループ化がないと扱いが大変だけどグループ化のUIが難しい(別ビューでツリーでも表示するか)。当たり判定は十分変形に対応可能だと思う
** DONE 背景色設定時にカラーピッカーを使う
   CLOSED: [2021-09-09 Thu 19:04]
** DONE カラーピッカー使用時にできるだけプレビューしたい
   CLOSED: [2021-09-09 Thu 19:27]
** DONE オブジェクトの名前を取得できるようにする
   CLOSED: [2021-09-10 Fri 08:39]
実はeieioではオブジェクトIDを生成してくれている。
例: #<edraw-shape-ellipse edraw-shape-ellipse-2367ee4>
eieio-object-name-stringとeieio-object-nameがあるが、前者の方が単体の名前になる。
(edraw-name shape)でedraw-shape-以降を返す。あくまで名前であって一意性は保証しない。
edraw-property-proxy-shapeはdefault rectのような名前を返す。

** DONE プロパティエディタに編集対象の名前を表示する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE 選択しているオブジェクトを前後に移動するキーを追加する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE プロパティエディタは選択中のオブジェクトのプロパティを常に表示する
   CLOSED: [2021-09-11 Sat 12:44]
迷う。切り替えボタンを追加するのも捨てがたい。Selected Shape, Next Shape, Previous Shape
** DONE プロパティエディタは変更をプレビューまたは即時適用する
   CLOSED: [2021-09-11 Sat 12:44]
変更の検出をどうするか。widgetの:notifyを使う？
https://www.gnu.org/software/emacs/manual/html_mono/widget.html
** DONE プロパティエディタの細かい改良をする
   CLOSED: [2021-09-11 Sat 16:21]
- [X] テキストフィールドの幅指定を無くして行末までフィールドにする。入力した文字の最後にカーソルを合わせづらいので。
- [X] 左右ドラッグで数値を変更する。
- [X] メニュー選択などで範囲選択してしまうのを抑制する。
- [X] ホイールで数値を変更する。
- [X] 対象が削除されてもプロパティエディタを閉じない。
- [X] 選択shapeの切り替えに追従する。
- [X] 入力の即時適用。
- [X] 次前を表示ボタン。
- [X] デフォルトとして設定するボタン。
- [X] カラーピッカーでプレビュー。
** DONE SVG出力を短くする
   CLOSED: [2021-09-13 Mon 18:29]
- パスデータの無駄な空白を削除する。座標のxとyの間は,で区切る。
- XML空要素タグを使う。
** DONE パスツール/path-cmdlistに順番を反転する機能を追加する
   CLOSED: [2021-09-12 Sun 19:07]
パスを結合したり先頭から伸ばしたりするときに必要になる。
** DONE パスツール/既存のパスの末尾から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
** DONE パスツール/既存のパスの先頭から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
パスの方向を反転するか、始点(Mコマンド)から伸ばせるようにするか。
** DONE パスツール/他のパスの端点と連結できるようにする
   CLOSED: [2021-09-13 Mon 12:35]
パスツールで伸ばしているときに、他のパスの端点をクリックしたら、その二つのパスを連結する。
** DONE パスツール/パスを任意アンカーで切断できるようにする
   CLOSED: [2021-09-14 Tue 09:50]
アンカーを右クリックで「Split Path」を選ぶ。
- M(サブパス始点)の場合
  - 閉パスの場合 : 全てのサブパスを開パスにする。closing segmentがあるならZをMに置換するだけで良い。最後のZは次にMがあるなら消して良い。closing segmentが無いならMまでの線を追加する。
  - 開パスの場合 : 不可(始端)
- LかCの場合
  - サブパス最後のアンカー
    - 閉パスの場合
      - closing segmentの場合     : 不可(Mで分割せよ)
      - closing segmentでない場合 : Zを取り除く。アンカーからMまでの線を先頭に追加する(Mがなお他のZで使われている(閉サブパスの一部)なら諦める)。
    - 開パスの場合 : 不可(終端)
  - 途中のアンカー
    - 閉パスの場合 : cmdlistを二つに分割する。Mを追加する。
                     MとZをくっつける。
    - 開パスの場合 : cmdlistを二つに分割する。Mを追加する。
** DONE ホイールの方向を逆にする
   CLOSED: [2021-09-14 Tue 16:16]
** DONE パスの向きを逆にする機能を追加する
   CLOSED: [2021-09-14 Tue 18:17]
連結機能で勝手に反転するようになってしまったので。
あまり必要ではないがとりあえず矢印の向きに関係がある。
** DONE ファイルエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE バッファエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE SVGツリーのデバッグ出力機能
   CLOSED: [2021-09-14 Tue 21:40]
** DONE edraw-update-imageはeditor終了後には更新をしないようにする
   CLOSED: [2021-09-15 Wed 10:50]
「終了後」がまだ定義されていないのでなんとも。
オーバーレイオブジェクトのdisplayプロパティを書き替えるだけなので、最悪特に問題は起きない。
終了時にタイマーをキャンセルするのでも良い。
→(edraw-close editor)でキャンセル
** DONE アンカーとハンドルの選択時に親をチェックする。
   CLOSED: [2021-09-15 Wed 12:19]
@todoあり。アンカーを選択したときはシェイプを、ハンドルを選択したときはアンカーをチェックする。関連するものが選択されている必要がある。選択されていなければ選択すべき。
** DONE 複数選択機能
   CLOSED: [2021-09-16 Thu 14:59]
C-downで選択追加、削除する。
影響箇所:
- edraw-selected-shape
- edraw-select-shape
- edraw-unselect-shape
- edraw-on-selected-shape-changed
- edraw-select-anchor
- edraw-unselect-anchor
- edraw-select-handle
- edraw-unselect-handle
- edraw-update-selection-ui
- edraw-svg-ui-shape-points

- edraw-translate-selected
- edraw-delete-selected
- edraw-bring-selected-to-front
- edraw-bring-selected-forward
- edraw-send-selected-backward
- edraw-send-selected-to-back
- edraw-select-next-shape
- edraw-select-previous-shape
- edraw-main-menu
- edraw-mouse-down-anchor-point
- edraw-mouse-down-shape
- edraw-on-mouse-3
- edraw-mouse-down-continue-path
** DONE 複数選択移動機能
   CLOSED: [2021-09-16 Thu 14:59]
** DONE 表示改善/パスアンカー選択時は前後のアンカーのハンドルも表示する
   CLOSED: [2021-09-16 Thu 15:00]
down-mouse時の選択(検索)にも影響するので注意。
** DONE コピー、ペースト機能
   CLOSED: [2021-09-17 Fri 18:48]
** DONE 複数選択時の選択中shapeに対する右クリックを改善する
   CLOSED: [2021-09-17 Fri 20:53]
選択オブジェクト全体に対する操作を出すべき。
** DONE 何も無いところで右クリックしたときにメニューを出す
   CLOSED: [2021-09-17 Fri 21:11]
- Paste
- ドキュメントへの操作
** DONE オーバーレイの下のテキストをread-onlyにする？
   CLOSED: [2021-09-17 Fri 22:51]
org-modeで使うとき、オーバーレイのmodification-hooksプロパティでerrorを投げて変更を阻止する。edraw-modeの方はテキストプロパティで対策済み。
** DONE コピー、カット、ペーストにキーを割り当てる
   CLOSED: [2021-09-17 Fri 23:02]
** DONE エクスポート時にATTR_HTMLが効かない問題を何とかする
   CLOSED: [2021-09-18 Sat 12:18]
imgの時は何とかするとしてsvgのときにどうするか。widthとheightはまずい。
** DONE UNDO/REDO機能
   CLOSED: [2021-09-20 Mon 13:20]
- editorにundo-listを追加する
- undo-listにundo dataを追加できるようにする
- undo dataは関数と引数のリスト
- undo dataを実行できるようにする
- 実行時に生じた(undo-listに追加された)undoデータはredo-listに入れ替える
- 複数のundo dataをまとめる機能を追加する
- 全ての変更を行う場所で、元に戻すundo data(関数と引数のリスト)を生成する
  変更する場所は edraw-on-document-changed から辿る。
  - 直接呼び出しているのはドキュメントの属性を変更する部分。
  - edraw-on-shape-changedを呼び出している部分はshapeの変更。基本的に元のプロパティ値に戻すundo dataを作る。
  - edraw-on-shape-point-changedを呼び出している部分はハンドルかアンカーに対する変更。本来はポイント毎に詳細なデータを作るべきだが、とても面倒なのでdプロパティ全体を保存する。
  - Zオーダーは現在のインデックスを調べる関数とそこに戻す関数を追加して対処する。
- 連続する変更に対するundo dataを必要に応じて一つにまとめる。ドラッグによる移動やプロパティエディタでの値調整はまとめる。
** DONE パスツールで C-u クリック で必ず点を追加する
   CLOSED: [2021-09-20 Mon 15:13]
既存の点を移動したり接続したりしない。
** DONE ATTR_HTML指定時に重複する属性を削除する
   CLOSED: [2021-09-20 Mon 17:21]
widthを指定したら本来のwidthは削除したい。
** DONE カラーピッカーでプレビュー中は変更フラグと +変更通知+ を抑制する
   CLOSED: [2021-09-21 Tue 22:19]
** DONE エクスポート時にSVG内のidを変換する
   CLOSED: [2021-09-22 Wed 21:36]
複数のSVGを一つのHTMLに埋め込むとIDが重複してしまう。
edraw-body, edraw-defsはもとよりmarkerのidが被ると他の文章の定義を参照してしまう。
** DONE 矩形で選択できるようにする
   CLOSED: [2021-09-23 Thu 15:20]
** DONE 非常に小さい図形でも選択ツールで選択できるようにする
   CLOSED: [2021-09-23 Thu 15:34]
範囲選択で実現した。
** DONE fileリンクの初回編集で終了後に画像がインライン表示されないのを直す
   CLOSED: [2021-10-07 Thu 08:20]
image-refreshで更新しても意味は無く、オーバーレイを作らなければならない。
** DONE 編集開始時に不正なリンクフォーマットはエラーにする
   CLOSED: [2021-10-07 Thu 09:24]
** DONE オブジェクト単独でのtransform属性に対応する
CLOSED: [2021-12-05 Sun 17:56]
rect, ellipse, circle, path, textに対するtransform属性に対応する。

- [X] 当たり判定に対応する
- [X] 平行移動に対応する
- [X] アンカーポイントの位置を変形させる・入力も何とかする。問題はどの段階で変換するか
  表示はedraw-update-selection-ui、入力はedraw-shape-point-findあたり？
  →edraw-get-xyやedraw-moveの変形後座標系版であるedraw-get-xy-transformedやedraw-move-on-transformedを作成する。
** DONE グループ化出来るようにする
CLOSED: [2021-12-05 Sun 20:19]
描いた物体を一つのものとして扱えるように。
- [X] edraw-shape-groupを作る。
- +子要素たちを元にAABBを計算する。それを矩形アンカーポイントとする。+
** DONE HTMLタグをリンク毎に指定できるようにする
CLOSED: [2022-03-26 Sat 22:32]
~[[edraw:html-tag=img;file=example.edraw-svg]]~ のような形式。
** DONE ATTR_HTMLが効かない不具合を修正する。
CLOSED: [2022-09-19 Mon 00:22]

#+begin_src org
,#+ATTR_HTML: :viewBox 0 0 640 480
[[edraw:.....
#+end_src

:viewBoxがそのままdom-set-attributeに渡されている。 :を取り除かなければならない。
** DONE SVGエクスポート時にviewBoxを使うようにする
CLOSED: [2022-09-19 Mon 00:48]
width="640" height="480"だけだとレスポンシブにするのが面倒。
viewBox="0 0 640 480"があれば比率を保ったまま拡大縮小するのが容易。

edraw-org-export-html-use-viewboxオプションを追加。
** DONE org-modeでLaTeXへのエクスポートに対応する。
CLOSED: [2022-09-23 Fri 01:37]
** DONE groupで指定できる属性を増やす
CLOSED: [2022-11-27 Sun 12:03]
fillやstroke系の属性を指定できるようにする。
中の図形には色を指定せず、g要素で一括指定出来ると便利。
** DONE group化を解除できるようにする
CLOSED: [2022-11-27 Sun 13:53]
transform属性で平行移動しているのをどうするか。
変換が平行移動だけならば子要素の内容を平行移動すれば良い。
それ以上の変換ならば、子要素のtransform属性にグループのtransform属性を掛け合わせる必要がある。
** DONE opacity属性を追加する。
CLOSED: [2022-11-27 Sun 14:03]
fill-opacityやstroke-opacityとは別に指定出来て良いはず。
特にgroupに対するopacityは有用。
** DONE groupをコピーできるようにする。
CLOSED: [2022-11-27 Sun 14:46]
- edraw-shape-descriptorが子孫の情報を持つようにする。
- edraw-shape-from-shape-descriptorが子孫も復元するようにする。
** DONE edraw-insertの引数順を変更する
CLOSED: [2022-11-27 Sun 17:16]
できれば(edraw-insert parent shape pos)にしたい。
ただ、parentはedraw-shape、edraw-dom-element-p、nilのいずれかなのでcl-defmethodでどう書くのか知らない。特にedraw-dom-element-pは先頭がnilではないシンボルであるリストというだけなので注意が必要。
→複数の型にマッチしたり指定の述語にマッチする関数を書く方法が分からないのでparentはそのままにした。
** DONE groupを複製できるようにする。
CLOSED: [2022-11-27 Sun 21:09]
edraw-cloneで子孫を複製する。すっかり忘れてた。
** DONE textやgroupは選択時に境界ボックスを表示する
CLOSED: [2022-11-29 Tue 12:38]
選択時に何か表示しないとgroupが分からない。
ついでにtextはアンカーポイントを表示した上で境界ボックスも表示したい。
** DONE 編集終了時にツールを非選択にする
CLOSED: [2022-12-01 Thu 17:29]
カスタムシェイプツールにおいてシェイプピッカーとの接続終了処理が実行されないので。
複数のエディタで同時に開いている場合にどうなるか。hookの数でチェックする？
** DONE 選択図形を数値入力で良いからとにかく変形したい
CLOSED: [2022-12-07 Wed 18:24]
回転できないとある種の作図が著しく困難なため。
** DONE 90度単位回転で誤差が出ないようにする
CLOSED: [2022-12-08 Thu 18:26]
90度単位回転だけは誤差が出ないようにしたい。
(= (sin pi) 0)がnilになる所を見ると現状はダメそう。
(= (cos pi) -1)はtになる所が興味深い。
いずれにせよ(360で割った余りが。負数注意)度数0、90、180、270は特別扱いすべき。
** DONE 全選択・選択解除機能を追加する
CLOSED: [2022-12-08 Thu 18:26]
** DONE カスタムシェイプ/定義済み図形を貼り付ける機能を追加する
CLOSED: [2022-12-08 Thu 21:51]
1. 定義済み図形挿入ツールを追加する。
2. ツールを開いている間は定義済み図形(プリセットシェイプ)ピッカーを表示する。
   - プロパティエディタと同じようなバッファをポップアップさせる。
   - バッファの中には定義済み図形を図形毎に画像にして並べ、通常のバッファ・ウィンドウの機能でスクロール出来るようにする。
   - 図形のサムネイル画像を生成する。
     - 図形の境界を求めてpaddingを足す。
     - 原点より左上(座標負方向)にも図形がある可能性があるので注意。
     - 大きすぎる図形は縮小して表示する。
3. 図形を選択してからキャンバス上でクリックしたらその位置に図形を追加する。
   - 単独の図形は平行移動して配置する。グループはtransformする(しかない)。
   - バラバラの図形を一度に配置できるようにする機能は要らないと思う。

改善点
- [X] ピッカー内の操作
  - [X] セーブ
  - [X] 図形の編集
  - [X] 図形の削除
  - [X] 図形のコピー/カット/ペースト
  - [X] 図形の新規追加
    - document-writerは使わない(Saveメニューが消える)
    - 何らかのプロパティでeditorに終了時コールバックを持たせる
    - finishまたはcancel時にコールバックを呼び出す。(edraw-document-svg editor)の結果を引き渡す
    - 空図形チェックが必要
  - [X] 図形の前後位置移動
- [X] UNDO
- [X] 右クリックメニュー
- [X] 文字列SVGに対応する(文字列で複数図形に対応するならgでまとめてばらすしかない)
- +shape-descriptor-listに対応する+
  +(edraw.elに依存しなければならないので迷うところ。正直SVG文字列だけで十分。変換関数にautoloadを通すくらいか？)+
  懸念していたmarkerもSVG文字列で問題なく動くので必要が無くなった。とりあえず保留。
- [X] エディタでコピーしてshape-pickerにペースト
- +選択図形をカスタムシェイプに追加+ shape-pickerでペーストできるのでいいや。右クリックメニューにあまり使わない項目が増えるのも嫌だし。
- [X] エントリーリストのファイルへの保存・読み込み
- [X] shape-descriptorからSVG表記に変換する機能を増やす
- [X] 正確に閉じる(複数のエディタから開いたときにフックへの登録数を見て閉じるか決める)
- [X] buffer-read-onlyではなくテキストプロパティread-only(とfront-sticky, rear-sticky?)を使用して禁止した方が分かりやすい。
- [X] 自動保存の問題に対処する。hexl-modeでの情報を収集する最悪自動保存は禁止。
- [X] セクションの追加
- +layoutの追加+ UI化しなくてもいいかな。
- +サムネイルレイアウト指定の変更+
- [X] プロパティ設定
- [X] 別ファイルのインポート
- [X] セクションを別ファイルへエクスポート
- [X] 初期化
- [X] リージョン対応
     (C-w, M-wだけリージョン対応にする。wやWはそのまま。コンテナを跨ぐときにどうするか。リージョンに完全に含まれる部分木だけを対象として抽出する。子孫がリージョンからはみ出すセクションやレイアウトは例え見出しがリージョンの中に入っていても対象にしない。子孫の完全にリージョンに含まれる部分だけを個別に抽出してコピー・カット対象とする)
- [X] ルートの見出しで挿入できない

以下は積み残し。別途TODOにする。
- [ ] ドラッグ・アンド・ドロップ
     (マウスで選択範囲を別のセクションへ?)
     いや、マウスドラッグでの選択範囲は諦めて、Shift+クリックか？
     単純な順番の入れ替えもしたい。
- [ ] 貼り付け時の属性調整指定(fill系やstroke系をデフォルトのものにするための指定)
- [ ] 貼り付け時のデフォルト変形指定(任意の点を原点にしたり、拡大縮小したりできるようにする。エディタがルーペに対応すれば不要だけど)
- [ ] 貼り付け時のユーザーによる縮尺指定
- [ ] 貼り付け時にクリックでそのまま貼り付け、ドラッグで大きさ指定
** DONE カスタムシェイプ/shape pickerでセクションの見出しを色づけする
CLOSED: [2022-12-09 Fri 18:41]
- 見た目を水平バーにする。
- マウスカーソルを +hand+ arrowにする。
- +折りたたみできるようにする。outline-minor-modeを使う。見出しのクリックで折りたたみを切り替える。+ 今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
** DONE カスタムシェイプ/shape pickerでセクションの兄妹移動できるようにする
CLOSED: [2022-12-09 Fri 20:23]
entry-backwardとentry-forwardだとかなり特殊な移動になってしまう。
M-up、M-downで移動できた方が良い。
** DONE カスタムシェイプ/shape pickerでセクションの見出しを折りたたむ
CLOSED: [2022-12-09 Fri 23:03]
今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
やるならエントリーツリーを見てちゃんとやらないとダメ。
** DONE ドキュメント全体の回転機能を追加する
CLOSED: [2022-12-10 Sat 00:04]
+特に90度単位の回転は矢印シェイプを作っているときに欲しくなった。+
全選択と選択図形の回転をサポートしたので不要だが、一応ドキュメントの回転・拡縮も追加したい。選択図形と同じように dtt dts dtr で変形できると良い。
反転は-1倍すれば良い。
** DONE パスを拡大縮小回転できるようにする(図形内容の変形)
CLOSED: [2022-12-10 Sat 00:05]
矩形や楕円、テキストはtransformを使わないと出来ないけど、パスだけは元データのレベルで変形できる。
↑一応出来るようにはなっている。出来ない要素も回転できてしまうけど。
** DONE 変形時にデフォルトの原点を図形の中心にする・その他変形入力改善
CLOSED: [2022-12-10 Sat 02:23]
ついでにleft, right, top, bottom, centerと入力できるようにする。
プロンプト:
- Origin X(left=100.0, center=150.0(default), right=200.0):
- Origin Y(top=100.0, center=150.0(default), bottom=200.0):
ドキュメント全体、選択図形、図形単体で対処する。
変形不要時(angle=0, scale=1)は即時終了。
対象図形無しは即時終了。
** CANCELLED カスタムシェイプ/～file-mode-exitでエディタとの接続が切れてしまう
CLOSED: [2022-12-11 Sun 00:20]
再びedraw-shape-picker-file-modeにして選択した後に配置しようとしても以前選択した図形が配置されてびっくりしてしまう。
+やはりカスタムシェイプツールはクリックのたびにバッファから選択図形を取得すべき。+
+メジャーモードを変えてもバッファオブジェクト自体は変わっていないので。+
閉じてfind-fileで開いてモードを有効にしたときは、知らないｗ

バッファが死んでいるとき(buffer-live-pがnilを返したとき)はどうするか。
+再び開く。+

基本的に、ユーザーが閉じた物を配置のたびにいちいち開くべきではない。ユーザーはshape pickerが邪魔なので閉じたのかもしれない。閉じた状態で選択した図形を次々に配置したいのかもしれない。しつこく開くべきではない。

現在選択中の図形はあくまでエディタ側が持っているべき。接続していないpickerで何を選択しようとエディタ側は関知しない。必要なら再度ツールを起動して接続すれば良い。
** DONE カスタムシェイプ/ドラッグで大きさを指定して貼付できるようにする
CLOSED: [2022-12-12 Mon 10:45]
クリックしたらデフォルト貼り付け。ドラッグでその範囲に内接するように貼り付け。shape-picker側に基準範囲指定プロパティが必要かも。
:shape-ref-box ((l . t) . (r . b))
:ref-box ((l . t) . (r . b))
指定が無ければ境界矩形で代用するしか無いけど。
** DONE カスタムシェイプ/貼り付け時にfillやstrokeを調整する
CLOSED: [2022-12-12 Mon 14:50]
あらかじめ指定した色で貼り付けたい。

図形定義中のfillやstroke等の属性を上書きする。

一部の図形は属性を上書きして欲しくない。カラーのクリップアートなど。
保持対象属性を
:shape-keep-properties (fill stroke stroke-width) みたいに指定する？
:shape-keep-properties t でいいのでは？
shape-picker-entryのプロパティ値にnilは使いづらいので'all 'noneあたりか。

保持対象ではない属性はエディタのデフォルト値で上書きする。
+どのデフォルト値で上書きすべきか。path、rect、ellipse、text、それぞれのデフォルト値で上書きするしかないのではないか。それぞれのデフォルト値を指定してから図形を配置するのは面倒すぎる。図形は基本的にpathだけで作成すべき。それ以外は全て属性保持対象扱いでも良いのではないか。この機能を使いたい図形は全てpathかgroupだけで作成すること。+
暫定的にpathのデフォルト値を全ての図形に適用する。おそらくツール毎にデフォルト値を持つべき。
** DONE カスタムシェイプ/選択がクリアされて使いづらいのを何とかする
CLOSED: [2022-12-12 Mon 20:28]
ピッカーでqを押して閉じたとき、ピッカーの選択状態は失われる。ただし、ツールの方は失われない。

カスタムシェイプツールを再選択して再びピッカーを出したとき、以前の選択状態はツール、ピッカー共に失われている。ツールはいったん非選択状態になってツールオブジェクトが破棄されてから新しいツールオブジェクトが生成・選択されるので。

本来的には、ツールがエディタやその外に共通な情報を保存する場所が必要となる。

その他の論点:
- ピッカーのqでバッファをkillすべきか
  (邪魔なのでkillしたいが、選択状態をできるだけ維持するには残して置いた方が多少有利)
- ピッカーを再び開いたときに以前の選択状態を復元しようと試みるべきか
  (出来るなら上の問題はどうでも良くなる。ただ、やり方が難しい。ルートからインデックス番号を辿って結果が同じ図形ならそれを選択するくらいか)
  (やるなら、無選択状態の時のみ起動したツールの選択図形を選ぶようにすべき。既に選択中のピッカーと接続したときはピッカーを優先すべき)
- クリック時(配置時)にピッカーから選択状態を取得し直すか
  (プロパティを変更した後だったりするので取得し直すのが望ましい)

別な方法。ピッカー側に選択状態を維持する仕組みを追加する。少なくともEmacs起動中は維持。グローバル変数にファイル名と選択状態を持たせる。
↑この方法で実装。
** DONE エディタの上では基本的に全てのself-insert-commandは禁止すべき
CLOSED: [2022-12-12 Mon 21:39]
このキーだったかな？　違った、という時に文字を挿入してしまうので。
** DONE コピー、ペーストのキーを変更する
CLOSED: [2022-12-12 Mon 21:39]
普通に[remap kill-ring-save]や[remap kill-region]、[remap yank]で良いのでは？
久しぶりに使ったらC-c C-x M-wとか全然分からなかった。
C-/とかもよく間違えるのでundoにしたいが……。
** DONE 選択オブジェクトに対する操作をメインメニューにも追加する
CLOSED: [2022-12-12 Mon 21:44]
少なくともグループ化が登録されていない。
他にもあるかも。
** DONE スクロール・ズーム機能(一時的な拡大、縮小、スクロール)
CLOSED: [2022-12-14 Wed 15:01]
C-wheelを使うべき。C-ドラッグでスクロール? ツールで使っている？ 中ボタン？

- まず、root transformをviewBoxを使うように修正すべき。基本的に高解像度用のスケーリングなので、全ての部分に一様に適用したい。グリットの線等も太くなった方が良い。
  viewBoxはちゃんと元に戻さないとダメ？　そもそもこれまであるとちゃんと編集できなかったのでは？
  高解像度モニターでしっかりチェックが必要。
- root transformが居なくなったら、view-transformという仕組みを追加する。
  - g#edraw-bodyはtransform属性で変形する。
  - それ以外のUIは座標だけ変形する。グリッドの線等が太くなってはダメなので。
  - 当然マウス入力も調整する。
- キーで拡大、縮小できるようにする。次にマウスホイールでできるようにする。
- キーでスクロール出来るようにする。マウスでスクロールを試す。
- 座標軸を表示する。
- エディタ画像全体の最大サイズを決める仕組みも必要かもね。
** DONE カラーピッカーでnoneを選べるようにする
CLOSED: [2022-12-15 Thu 02:12]
いちいちキーで打たなければならないのは地味に面倒くさい。
斜線が入ったボタンをキャンセルの下あたりにでも表示したい。
パレットの端っこでも良いが、パレットは案外目立たないのでどうか。
** DONE viewBoxを変更できるようにする
CLOSED: [2022-12-15 Thu 18:37]
もちろん編集には何も影響しなくて良い。あくまで編集後のSVGのviewBoxの値(文字列)を直接指定できれば十分。強いて言えば、デフォルトのスクロール・ズーム位置に影響しても良いが、viewBoxに指定できる全てのパターンに対応するのは大変かもしれないので別に必要ない。
エクスポート時にviewBoxをいじっていたような気がするので要確認。
** DONE image要素に対応できる？
CLOSED: [2022-12-15 Thu 23:03]
+少し試した限りimage要素は表示できない。+ +Emacs 26.3(Windows公式ビルド)はできた。Emacs 27以降はなぜか出来ない(Windows公式ビルド)。Emacs 28でbase uriを指定するプロパティが入るのでより使いやすくなるが、どうなるか。+ 解決方法判明。emacs-27.2-x86_64.zipを展開してできるディレクトリの下のbin/gdk-pixbuf-query-loaders.exe --update-cacheを実行するとlib/gdk-pixbuf-2.0/2.10.0/loaders.cacheというファイルが出来る。そうすると表示されるようになる。librsvgが画像を読み込む際にgdk-pixbufを使っているみたい。

- [X] edraw-shape-imageクラス作成
  基本的にrectみたいなもの。
- [X] edraw-editor-tool-imageクラス作成
  クリックまたはドラッグで位置または範囲を指定する。
  ファイル名を読み込む。
  位置だけを指定した場合は画像のサイズで範囲を確定させる。
  image要素を追加する。
- [X] アイコンとツールリストの変更
- [X] edraw-svg-dom.el内にimage要素のコードを足す。ほとんどはrectと同じだと思う。
  - hrefがある
  - fillとかstrokeとかは効かないので削除する
  - preserveAspectRatio属性が欲しい
- [X] クリックでも配置
- [X] ファイル名を入力する
** DONE ズームインしたときに座標の判定が大きすぎる問題を修正する
CLOSED: [2022-12-16 Fri 13:49]
imageツールアイコンを描いている時にうまくアンカーポイントが選択出来なくて難儀した。
おそらく拡大してもドキュメントの座標系で許容ピクセル数が計測されている。
↑それだけでは無く、マウスの座標がピクセル単位でスナップ(整数座標に限定)されている所も問題だった。両方に対処した。現状でも物体検索はedraw-mouse-event-to-xy、図形座標に関わるところはedraw-mouse-event-to-xy-snappedが使われている。-to-xyはto-xy-rawと名前を変えて、整数に限定されない生の座標を返すようにした。ピクセル単位のスナップはedraw-snap-xyで行うようにした。ポイントの反応半径(edraw-anchor-point-input-radiusとedraw-handle-point-input-radius)は拡大率で割るようにした。
** DONE ズーム時(に限らず?)にエディタを大きくする
CLOSED: [2022-12-16 Fri 17:46]
編集時の画像のサイズを元の大きさよりも大きくした方が良い。
100x100程度の小さなSVGを編集したいとき、どんなにズームイン出来ても編集する領域が小さいので使いづらい。

[[edraw:data=H4sIAMCjmWMAA3VPQQ6CMBD8SrNeka5ICBjKC/AD3tCWtgFbUqrV39sgGi8edrKTyczs1vNdkqC5Vwx2iECU0FL5ldyFm7U1kaU7II/raGYGyvvpQGkIIQ371DpJM0SkMQia2omL/5/3YBDxuWCvx5HBpu97ILN3dhAMjDUCiOYMBHdd2J67yyCdvRkOhDa1/JUsf8a+qfPqa99UVfUJ265H5J+md3b0HzNMcmxzTDJsS0wKbAtMSmyzZV/U09JHZZz4V/MCx2/D5CYBAAA=]]

やるなら[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]や[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]が大きな値を返せば良い。[[elisp-function:edraw-update-root-transform][edraw-update-root-transform]]等各所はすでにこの関数を使うようになっている。

ただ、最大サイズを制限する必要がある。 +例によってフレームの大きさから自動的に最大サイズを算出すべきか。その場合、元々大きな画像は縮小するべきなのか。+ 設定で自動で大きくする最大サイズを指定出来るようにした。デフォルトは(560 . 420)

サイズを手動で指定出来るような機能があっても良い。

+設定でデフォルトの大きさを指定出来ても良い。+ 設定で自動で大きくする最大サイズを指定出来るようにした。

適当にview-screenなんて付けちゃったけど、本当は何と呼べば良いんだろう。このサイズは自動スケーリングを適用する前のサイズ。編集領域？　単にビューで良いんじゃないかと。強いて言うなら編集用ビュー。

自動ビューサイズ変更設定が欲しい。拡大したときに自動的にビューも大きくする。縮小時には小さく *しない* 。大きくするのはあらかじめ設定されている大きさまで。

ビューサイズを直接指定するコマンドが欲しい。これは自動ビューサイズ変更を無効化する。
** DONE 矩形や楕円をパスに変換できるようにする
CLOSED: [2022-12-16 Fri 23:33]
** CANCELLED カスタムシェイプ/shape pickerで変形を指定出来るようにする
CLOSED: [2022-12-16 Fri 23:13]
任意の点を原点にしたり拡大縮小できるようにする。
*エディタがルーペに対応すれば不要だけど。*
shapeエントリーに次のプロパティを追加する。
- :origin-x
- :origin-y
- :scale
sectionやlayoutでは次のようにする。
- :shape-origin-x (:thumbnail-ではない)
- :shape-origin-y
- :shape-scale
カスタムシェイプツールでは貼り付け前のどこかでその変形を適用する。
やろうと思えばshape picker側で変形することも可能か？ edraw-dom-svg.el内の関数を使えば。

[2022-12-16 Fri 23:13]ズーム・スクロール機能を実装したので不要とする。こういった仕組みで過度に複雑になるのもどうかと思うので。
** DONE グリッドを数ピクセルにしたときに座標がずれているのを直す
CLOSED: [2022-12-17 Sat 01:46]
極端な話1ピクセルにしたときに位置が1ピクセルずれている。
2～3ピクセルくらいにしても、明らかにグリッドの間より前で次の座標にグリッドに飛んでします。
何か計算がおかしいはず。
ついでに小数点以下の間隔に対応したい。

グリッド非表示の時は問題ない。
原因:
- edraw-grid-round関数で整数除算(/2)による誤差
- edraw-snap-xyでグリッド表示時でもroundしていることによる誤差
** DONE グリッド表示が細かくなりすぎないようにする
CLOSED: [2022-12-17 Sat 02:09]
ズームアウトしていったときに一定よりも表示が細かくならないように適度に間引く。
スケールした間隔が8ピクセル未満なら、整数倍して8ピクセルを越える間隔で描画する。
** DONE 数値の.0を省略する
CLOSED: [2022-12-19 Mon 00:06]
出力したSVGの中の数値に意味の無い.0が付かないようにする。
結構根深い問題。

まずedraw-util.elに(edraw-to-string ((n number)))を追加する。floatが整数なら.0を省く。
formatで数値を文字列化しているところを全てこれで置き換える。
** CANCELLED edraw-shape-textのアンカーポイントの座標を属性とは別に保持する？
CLOSED: [2022-12-19 Mon 00:10]
(属性値の完全文字列化は取りやめ逆に数値型の維持を推進したので、以下は不要)

rectやellipseとは違いtextはアンカーポイントの座標を属性値とは別に保持しない。
これには属性値と別途保持した値との同期が不要になり一貫性を保ちやすいというメリットがある。また、以前はDOMツリー内で属性値を数値で持つことが出来たのでどこで保持しようが誤差に変わりは無かった。

属性値は必ず文字列で持つように変更したので、数値型で持つよりも変形等の編集時に誤差が生じやすくなってしまった。

- ~(/ 2 3.0)~ = 0.666666666667
- ~(* (/ 2 3.0) 100)~ = 66.66666666666666
- ~(* (string-to-number "0.666666666667") 100)~ = 66.6666666667

ちなみにstroke-width等の属性値は元から属性値のみが使われている。

問題は同じ座標値なのに他の形状と差が生じても良いのかどうか。同じ量だけ変形しても結果が図形によってわずかに変わってしまう。ただ、それを言ったらwidthやheightも似たような問題がありそうではある。あちらは文字列化では無く、右下座標や中心座標との変換で誤差が生じる。

また、undoが絡むと状況はより面倒になる。undoはプロパティを保存・復元するので、undoすると文字列でバックアップした値を再設定することになるので厳密には同じ値に戻らない。これはpathのd=にも当てはまる。それを言い出したら、セーブしてロードしたら厳密には元に戻らない。

一貫性のある挙動を保証するなら、変形のたびに文字列化すべきだろう。誤差の大きさも一貫して数値よりも悪くなるが、図形毎の差は小さくなる。

それより、現状を推し進めて積極的に数値型で属性値を持ち続ける方が良いのではないか。
** DONE shapeプロパティ(DOMツリー内の属性)における数値型を極力維持する
CLOSED: [2022-12-19 Mon 00:12]

プロパティ値の取得・設定は文字列型への変換を含んでいるが、数値誤差の改善のためこれを取りやめる。数値で設定した物は出来る限り数値のままの状態を維持する。

edraw-shape-textはx=やy=をキャッシュしていないので、他の形状よりも誤差が生じやすくなっていた(他の形状は座標値をアンカーポイントオブジェクトにキャッシュしている)。

edraw-svg-element-get-propertyやedraw-svg-element-set-propertyは文字列型への変換を含んでいるが、これを取りやめる。デフォルトプロパティまわりにも文字列化をしている所がある。

dom-set-attributeの代わりにedraw-svg-set-attr-stringやedraw-svg-set-attr-numberを使用することでどちらの型で属性値を設定するのかを明確にする。

edraw-get-propertyは数値型か文字列型かどちらが返ってくるか分からないので、edraw-svg-length-string-to-numberを使用して数値型を取得するべき。直接dom-attrで取得しているところも注意が必要。

これに合わせてプロパティエディタも修正した方が良い。edraw-get-property-info-listが返す情報をもっと充実させ、プロパティエディタがプロパティ値の型を正確に変換できるようにすべき。:to-string, :from-string, :to-numberのような変換関数をプロパティ情報で提供しても良い。
** DONE プロパティエディタ/編集終了時にプロパティエディタを閉じる
CLOSED: [2022-12-19 Mon 01:59]
複数のエディタで同時に開いている場合にどうなるか。
↑気にせず閉じよう。また開けば良い。何かデータを持っているわけでも無いし。
** DONE プロパティエディタ/プロパティエディタを中クリックで閉じる
CLOSED: [2022-12-19 Mon 03:00]
** DONE rectやellipseでwidthやheightに誤差が生じる問題を何とかする
CLOSED: [2022-12-19 Mon 05:40]
edraw-shape-rectはx=, y=, width=, height=へのset-propertiesをオーバーライドしてアンカーポイント座標の変更に置き換えているので、これらのプロパティ値がset-propertiesでの設定値とはわずかに変わってしまう問題がある。

例えばx=360のときにwidth=100.01を設定したとする。右のアンカーポイントの座標が ~(+ 360 100.01) => 460.01~ に設定されるが、360を引いてwidthに戻したときに ~(- (+ 360 100.01) 360) => 100.00999999999999~ となり元の100.01に戻らない。これはellipseやcircleのような中心・半径モデルでも同様。一般的に浮動小数点数の加減算は誤差が生じうるので。

widthやheightの値を確実に保持することでアンカーポイントがドラッグされるまでは直接指定された値を維持するようにすることは可能。

従来の流れ: set-properties → set-rectでアンカーポイントの座標を変更 → edraw-on-anchor-position-changedで属性を変更

これからの流れ: set-properties → set-rect-ltwhでアンカーポイントの座標を変更 → edraw-on-anchor-position-changed-ltwhで属性を変更

set-propertiesで指定されたx=, y=, width=, height=を確実に属性変更の場所まで伝える。これによって確実に指定値(といっても数値型に変換する。加減算の誤差は無い)と同じ値が属性にセットされる。

set-propertiesでの変化判定も現在の属性値に基づいて行う。わざわざ現在のアンカーポイントの座標からx=, y=, width=, height=を求める必要は無い。現在の属性値はUNDOデータに格納されるくらいなので、現在の正しい値を示している。
** DONE プロパティエディタでwidget値を更新しない条件を追加する(同一数値)
CLOSED: [2022-12-19 Mon 07:20]
現在はwidget値文字列が同一かどうかで判定している。これだと100、100.、100.0が全て別と判定されてしまう。200.00001の末尾の1を消したときに一気に200にまで変わってしまう。200.0000と200は同一視してwidgetを更新しないべき。

1e-8くらいの非常に小さい差も無視した方が良いかもしれないが、そのような状況があるのか不明。入力した数字を数値化してまた戻して再度数値化したときに、二つの数値が異なる場合があるかどうか。 ~(str-to-num input-str)~ と ~(str-to-num (num-to-str (str-to-num input-str)))~ が一致しないケース。おそらく無いと思うけど……｡
** DONE Image要素の右クリックメニューからSet FillとSet Strokeを消す
CLOSED: [2022-12-19 Mon 18:21]
Setが空になってしまうので代わりにSet Hrefを追加する。
** DONE textの文字列や属性値の文字列をエスケープ処理する
CLOSED: [2022-12-19 Mon 19:52]
edraw-svg-printにtodoあり。
例えばstyleプロパティに次のように書けてしまう。
: " /><rect x="20" y="20" width="100" height="100" fill="red
text要素でも同じ問題がある。
** DONE rectやellipseの辺の中心にあるアンカーポイントの位置ずれを直す
CLOSED: [2022-12-20 Tue 01:09]
整数に丸められているので、ズームすると中心がずれているのが気になる。
** DONE edrawリンクから中身の図形をコピーする機能を追加する           :ORG:
CLOSED: [2022-12-20 Tue 09:48]
リンクの上でコマンドを実行したらクリップボードにコピーされて他のedraw-editorでペーストできると部品の切り貼りが捗る。カスタムシェイプ機能でも良いが、org文書自体がシェイプカタログになるというのも面白い。

edraw-org-shape-picker-modeなんてものがあると面白い。org文書がshape-pickerとして機能する。
** DONE edrawリンクのfile-data形式を相互に変換できるようにする        :ORG:
CLOSED: [2022-12-20 Tue 09:48]
+editorに変換するメニュー項目があっても良いし+ 、edrawリンクの右クリックメニューにあっても良い。
** DONE edrawリンクのメニューにSVGエクスポートを追加する              :ORG:
CLOSED: [2022-12-20 Tue 09:49]
リンクを右クリックして出るEdraw Link Menuに、中身のSVGを表示する機能を追加する。
エディタの d e b 相当。ファイルリンク時も一応表示する。
専用のバッファに表示してファイルへ保存したければ自分でしてもらう。
** DONE .edraw.svgファイルに対するfileリンクを編集できるようにする    :ORG:
CLOSED: [2022-12-20 Tue 20:33]
通常のfileリンクを直接編集できるようにする。
: [[file:somefile.edraw.svg] ]
edraw-org-edit-regular-file-linkを追加した。
** DONE transform属性があるrect要素等をpathへ変換すると起きる問題を修正する
CLOSED: [2023-03-10 Fri 18:08]
transform属性は残ったままtransformが適用されたpathへ変換されるので、二重に変形された結果になってしまう。
** DONE 変形の意味を整理する
CLOSED: [2023-03-12 Sun 15:50]
現在(edraw-transform shape matrix)は別々の方式が混在している。
- グループはtransform属性を変更する。
- それ以外は座標、長さ値を変更する。
どちらにも有用性があるのがやっかい。
基本的には後者は全ての図形が正しく変形できない。rectやellipseは軸に沿った形状しか表現できず、それ以外はtransform属性を使用する必要がある。線の太さといったものをどうするかも問題。

→次のようにする:

- edraw-transformはオブジェクト自身が決める方式で変形する。
  - rect, ellipse, circle, imageは回転成分を含むときtransformプロパティを使う。
  - textはスケーリングまたは回転成分を含むときtransformプロパティを使う。
  - いずれの場合もすでにtransformプロパティがある場合はtransformプロパティを使う。
  - それ以外の場合(path、平行移動のみ等)はアンカーポイント座標を使う。
- edraw-transform-anchor-pointsは座標に行列をかけて変形する。
- edraw-transform-prop-multiplyはtransformプロパティを変更する。
** DONE transform属性をアンカーポイント座標に適用出来るようにする
CLOSED: [2023-03-12 Sun 21:02]
transform属性をアンカーポイント座標に適用してtransform属性を削除する。
もちろん線の太さなどはtransform属性の拡大の影響を受けなくなる。

- edraw.el
  - edraw-apply-transform-prop-to-anchor-points
  - edraw-transform-anchor-points
  - edraw-transform-anchor-points-local
** DONE シェイプピッカー/折りたたんでいるところが見えてしまうのを修正する
CLOSED: [2023-03-13 Mon 14:17]
上にスクロールすると折りたたんでいるところが見えてしまう。
outline-modeやorg-modeのように不可視領域の始点は行末じゃないとダメ？

隠す範囲にdisplayプロパティ(文字列だろうと画像だろうと)があると、そこがinvisible(overlayだろうとtext propertyだろうと)にも関わらず表示されてしまう事がある模様。
おそらくEmacsのバグではないか。
隠すためのオーバーレイにdisplay ""を指定することで回避できた。
** DONE グループをアンカーポイントのドラッグで変形できるようにする
CLOSED: [2023-03-17 Fri 09:56]
選択時、角や辺にアンカーポイントを表示する。
内部の範囲を境界矩形にして操作できるようにする。
回転した場合でもローカルな軸に沿って変形する(rect等と同じような挙動で良い)。

懸念:
- ローカルなAABBで変形すべきか否か => カスタムシェイプにグループ化した図形(ラベルなど)を入れて、それを変形することを目的にしている。なのでローカルなAABBで変形した方が直感的。回転してからも、元の図形の軸に沿ったスケーリングがしたい。
- どの方式で変形すべきか => ラベルで使うことを考えると線が太くならないようにしたい。極力アンカーポイントの変形で済ませたい。ただ、図形によっては線の太さも含めて変形したい場合もあるかもしれない。オプションで変更できても良い。
- 幅や高さが0になったらどうするか => 元々幅高さが0の場合はその軸方向に拡大するのは不可能。ドラッグ中に0になるとそれ以降変形できなくなるので、マウス移動時は直前の変形を元に戻してから(UNDOしてから)再変形すべき。
- ドラッグ中に誤差が累積しないか => UNDOしてから再変形することで回避。
- 左右上下反転時に何が起こるか => edraw-shape-with-rect-boundaryは反転を考慮していないので特別な手当て(オーバーライド)が必要。AABBは左右上下反転を表現できないので、元のp0p1からの変化を見る必要がある。
- 特別な仕組みが必要か => とりあえずedraw-shape-with-rect-boundaryで対処可能。

工程:

1. edraw-shape-with-rect-boundaryを継承する。(必然的にローカル座標系での変形になる。edraw-shape-with-rect-boundaryはrect等transformプロパティの影響を除いた矩形を制御するための物なので)
2. (edraw-get-rect group)を実装する。アンカーポイントを配置する基準となる矩形を求める。edraw-shape-aabb-localを作成してそれを呼び出す。
3. (edraw-on-anchor-position-changed group old-p0p1)を実装する。アンカーポイントが変化したときの処理を書く。p0p1の変化を変形行列にしてedraw-transform-localを呼び出す。edraw-transform-localは子孫のedraw-transformを呼び出す。元の幅や高さが0のときはその軸方向には移動できないようにし、スケールも1にする(ゼロ除算も回避)。
4. 図形の変化を祖先要素に伝搬する仕組みが必要。edraw-on-shape-changedで祖先要素のedraw-on-descendant-changedを呼び出す。
5. グループの子孫の内容が変化したときの処理を書く。UNDO等で子孫の内容がグループオブジェクトの介在無しに変化することがある。グループの子孫が変化したら、edraw-set-p0p1-without-notifyでアンカーポイントの位置を更新する。グループ自体も変化イベントを発生させる(選択UIを更新するため)。
6. (edraw-set-p0p1-without-notify group l t r b)を上書きする。デフォルトの実装だと左右上下反転したときに正しく動作しないので。
7. アンカーポイントの移動処理において、UNDOを使用する。edraw-mouse-down-anchor-pointを修正する。移動の繰り返しでは幅高さが0になったときにそれ以上変形できなくなってしまう。誤差も累積する。マウスを動かすたびにUNDOしてから再度移動すべき。
8. 選択中、ローカルな軸に沿った境界線を表示する。

本質的にグループが角や辺のアンカーポイントを持っているわけでは無いので、edraw-groupがアンカーポイントを持つ実装はあまり良くないのかもしれない。複数図形を選択してその全体を変形するような操作を実装する場合は、アンカーポイントとは別の仕組みが必要になる(マニピュレータ)。本来はその仕組みを使うべきかもしれない。とは言え、比較的簡単に(大がかりな仕組みを追加せずに)実装できたのでとりあえずこれで。
** DONE edraw-get-rectをedraw-get-rect-localへ改名する
CLOSED: [2023-03-17 Fri 10:32]
edraw-shape-with-rect-boundaryが持つedraw-get-rect関数はローカル座標系での矩形を返すので。
edraw-shape-aabb-localと意味が被っているような気もしなくはないが、あくまでedraw-shape-with-rect-boundaryが必要とするアンカーポイントを決めるための矩形を返すという位置づけ。そういう意味で言えばもっと名前を変えるべきかもしれないが、それはとりあえず置いておく。最低限ローカルであることは示す。
** DONE 変形方式設定を追加する
CLOSED: [2023-03-17 Fri 17:40]
transform-method
- auto : Auto
- transform-property : "transform" Property
- anchor-points : Anchor Points

edraw-transformはそれに従う。
groupに対するedraw-transformは子孫に対する個別のtransformにする。

次の問題は他のTODOにする。
- local or not?
- edraw-translateはどうすべきだろう。

正直この方法が適切なのかはよく分からない。コマンド毎のオプションにすべきのような気もする。

切り替えメニューの位置もあちこちに分散させて良い物かよく分からない。
** DONE edraw-translateも変形方式設定に従うようにする
CLOSED: [2023-03-17 Fri 21:41]
図形のドラッグ時にedraw-push-undo-translateを使う方法は止めて、アンカーのドラッグでやったように移動のたびにUNDOする方式にする。

edraw-translateはedraw-transformで処理するように変更する。
** DONE UI要素の更新を遅延する
CLOSED: [2023-03-17 Fri 23:49]
UI要素の更新はedraw-update-imageの直前に一回やれば済むはず。
UNDO等で一度に大量の変更が発生したときに連続して edraw-on-selected-shape-changed → edraw-update-selection-ui が呼ばれてしまう場合がある。

edraw-update-all-ui-svg では次の関数を呼んでいる。
- edraw-update-root-transform
- edraw-update-scroll-transform
- edraw-update-transparent-bg
- edraw-update-grid
- edraw-update-selection-ui
それぞれを個別にInvalidateできるようにしてはどうか。
** DONE パスのアンカーポイントを移動できなくなったのを直す
CLOSED: [2023-03-18 Sat 15:17]
ドラッグによるアンカーポイントの移動時にUNDOするようにしたのが原因。
UNDOするとパスのアンカーポイントオブジェクトは無効になってしまう。
UNDOするとdプロパティ全体を復元するので。
dプロパティ全体を戻すのでは無く、「先頭から何番目のアンカーポイントの位置を何へ移動する」というようなUNDO情報を作れば回避できると思う。
ついでにハンドルも直す。ハンドルの場合は反対側のハンドルも一緒に動くことがあるので注意が必要。
** DONE textに対するコンテキストメニューにSet→Font Sizeを追加する
CLOSED: [2023-03-18 Sat 20:58]
** DONE ラベルのカスタムシェイプを追加する
CLOSED: [2023-03-18 Sat 21:50]
右下が折り曲げられているようなラベルの形状を追加する。
グループ化された物を登録する。
色や線幅はグループのプロパティで変更できるようにする。

二重線のラベルも追加する。
** DONE グループのアンカーポイントをドラッグして0サイズにするとエラー
CLOSED: [2023-03-18 Sat 22:43]
ドラッグして幅高さを共に0にすると何かエラーが出る。
: Error running timer ‘edraw-update-image-on-timer’: (wrong-type-argument number-or-marker-p nil) [18 times]
edraw-update-image-on-timerということはUI要素から出てる？　でもimage要素の場合は出ないみたい。

アンカーポイント座標がnilになってしまっている。
edraw-shape-aabb-localがnilを返している。
pathをsegment listへ変換する部分で、長さ0のセグメントを破棄してしまっている。
長さ0のセグメントを破棄しないdefvarを追加した。
どのみちaabbがnilになることはあり得るので(グループ内に何も無くなったときなど)、その時は(0,0,0,0)として処理することにする。
** DONE group化を解除するときに変形属性を適用出来るようにする
CLOSED: [2023-03-19 Sun 11:09]
適用するかy/nで聞いてyなら適用してからグループ化を解除する。
(fill系やstroke系の属性は適用しなくて良いのか)←うーん切りがないので止めておく。
** DONE テキストの文字列を空に出来ない問題を修正する
CLOSED: [2023-03-19 Sun 13:50]
空にするとプロパティエディタはtextプロパティをnilに設定しようとする。
textのtextプロパティは属性ではなくinner-text。
(edraw-svg-text-set-text element text)はtextがstringpの時以外は何もしない。
stringpの時はいったん全ての子孫を削除してからtextを子ノードとして追加する。
stringpでなくてもとにかくいったんすべての子孫を削除するようにすることで解決。
** DONE ペーストや複製時のZ順序はどうなっているべきか
CLOSED: [2023-03-19 Sun 15:37]
edraw-create-shape-without-default関数にindex引数を追加しているときに気がついた。新しく生成した図形はどのZ順序にあるべきか。
+ペーストなら一番上？　新しい図形は一番上に追加することになっているし。+

複数ある場合に順番が滅茶苦茶だけど良いの？　選択順なのかな？
単体の複製時は元の順序の次になっていた方が良くない？

基本的には、最前面かまたは選択している図形の中で最前面より手前に挿入すべき。
複数ある場合は元の順序を維持するべき。
最低限元の順序を維持していれば、選択オブジェクトを最前面や最背面へ移動することは簡単。となるとデフォルトでは「現在選択している図形」の前にペーストするのが良さそう。選択が無ければ最前面。

とにかくコピー時にshape-descriptorのリスト内が順番通りになっていなければ話にならない。

関係する操作:
- edraw-copy-selected-shapes : ソートする
- edraw-shape-from-shape-descriptor-list : index引数を追加する
  呼び出す物:
  - edraw-paste : 選択している図形の一つ前にペーストする。選択が無ければ最前面。
  - edraw-create-selected-custom-shapes (今回とは無関係)
- edraw-clone : 複製元の一つ手前に生成する
  呼び出す物:
  - edraw-duplicate-and-select
  - edraw-split-path-at (pathを分割して出来るpathの順序に影響)
** DONE エディタ全体の拡大率を設定できるようにする
CLOSED: [2023-03-19 Sun 22:39]
環境によってはimage-scaling-factorをいじらず、エディタだけ若干大きくしたいことがある。
変数edraw-editor-image-scaling-factorを追加して、nilの時はimage-scaling-factorを使用し、数値の時はそれを使う。
** DONE カラーピッカーで:color-name-schemeオプションが効かないのを直す
CLOSED: [2023-03-19 Sun 23:13]
letでedraw-color-name-schemeに束縛して、同じ場所でedraw-color-from-stringを呼び出している。let*にするかletを分けるかすべき。
** DONE プロパティエディタやシェイプピッカーをフレーム表示できるようにする
CLOSED: [2023-03-25 Sat 12:29]
条件:
- 別フレームに表示できるようにする。
- 操作中にフレームにしたりウィンドウに戻したり出来るようにする。
- 最後に表示したフレームの状態を記憶して、再びフレームを表示したときに復元する。
- ウィンドウに戻したとしてもフレームの状態は保持する。

独立したフレームで任意の位置に固定したい。フラフラ動かれると困る。
child frameはおそらく適切ではない。フレームによってキャンバスが隠れてしまうから。

結構大がかりな変更になる。

1. edraw-property-editor-open内の処理を整理する。
   バッファの取得・作成、オブジェクトの作成、内容の作成、オープン。
2. edraw-buffer-displayクラスを作る。
   オープンの時、frame-modeならフレームを作成し、そうでないならウィンドウを作成(いままで通り)する。
3. 切り替えUIを作る。
4. 状態をファイルにセーブする。

プロパティエディタは右クリックでメニューを表示する。そこにフレーム操作を加える。
** DONE 図形クラスを拡張可能にする
CLOSED: [2023-03-25 Sat 19:14]
SVGに無い新しい図形を定義できるようにする。

data-edraw-type=属性によって、生成するオブジェクトを切り替えられるようにする。もちろん指定が無ければタグ名をtypeにして生成する。

例えば <path data-edraw-type="edraw-star" d="..." /> で edraw-shape-star クラスのオブジェクトを生成する。頂点数(?)プロパティと半径プロパティがあって、それを変更すると自動的にd=が再計算されるというような。

図形タイプリスト(edraw-shape-types)を作成する。タイプ毎にSVGノードの作成(:create-element)とSVG→オブジェクト変換(:from-element)を定義する。

tagという表記を使っている部分を確認して可能な限りtypeに置き換える。
** DONE 手書きツールを改善する
CLOSED: [2023-03-27 Mon 20:33]
もっと点の数を減らしたい。
** DONE 選択ツール 図形をM+ドラッグで複製しつつ平行移動する
CLOSED: [2023-03-28 Tue 15:26]
+Ctrl+の方がいい？+ Ctrl+は複数選択で使うので。
** DONE 選択図形の複製機能を追加する
CLOSED: [2023-03-28 Tue 15:55]
コンテキストメニューにDuplicateを追加する。
** DONE SHIFT+ドラッグで水平垂直45度移動に限定する
CLOSED: [2023-03-28 Tue 21:46]
最初にSHIFTが押されていれば分かるが、それ以降のmodifierの変化は分からない。
S-mouse-movementが来たりは *しない* 。現在のキー状態を直接取得する方法も無い。
read-eventで何かキーが押されたらモードを切り替えるというようなことなら出来る？
Emacsではこの辺りは難しいので、とりあえずS-down-mouse-1、つまりSHIFTを最初に押しているときだけ45度単位移動にする。
また、rect, ellipse, image, customツールはSHIFTが押されている場合は正方形に限定する。

45度単位のスナップ。

[[edraw:data=H4sIADrpI2QAA7VWUZPaNhD+KxplppN0jJFWki0nmIfeQ/tAnpP0zcUCPOezb4zugA4/vivZJmBz6XFtmDtWK6H9vt2VP3m2fV6TXZHbTUoVY5RsTLHe2JQKic6zabZFXaWUh5yS/UNZbVO6sfbx43S62+3CnQjrZj0FxtgUA9H5LDerLSnylJq8yXYT5+LsQ9bcm4a05kuLFtHO/6NDxInnwux+q/cpZYQR7v4oaczqK3Lzg29+UDeFqXBD9mRrSra2qe9NSqu6MpSsirJM6bskSegljQmbZE1T75DNY2Y3BNc+s4CHirBA43ccskD9Scl0Ppu2vHDg6M9njVnal2vk2FJy8N8d+mq1GvL6zuWvbHm/buqnKvdg6/OlOj/0/PrtbSpt4DaUYy6ResQWoL3tKzkxFS4+NeX7d6O8P/SMJl0mwsO/AgsBAgRaOCt/MpZMQi6kVBFLdIRGBsBUmAAwzrUWmjO9gJiFOlJKioRxoaSUAecyZHGcaM15xHUCYsiAf2fgcxptCEZhF0PoOA6G/C4zuMzthwRiFXIZcx2BiiMuBQQgZagVaC5iCUKrWCxGU8Fw25vxRwWIhrkpHY0qoGFcpjdTGNYyHrWRX232qC3/YxMGMxCPexCNOhWpWxmYsiwet6bXizxHLViikPhneXnoBo2bcfbQ2lPcaKnwc+Uhc/Em9WO2LKwTpFB5NGv2lqzqyk5W2UNR4sq3J/J7bTfFkrbz2+JvjMuBEvfbSVYtN3WT0q3NGntSNQDwOse58KoHsaLzQ2qz6j1AqHKz/vDrfjZ1EW7A1APMhyLPS3MJ6sCSVmQ5Fnv+01Dw1HkUwTCzm0GG5XspFaU9SKxd+U65nKnj2WH5sVxiVQIO7E5wb4n3I0a8H7G7cx8vab8O7gY7fwpwwun7nbMCf9Tpvbfo35186NbB+7ee+VeXUf77KcQqCugPBPbqeDiSX0r7iVwcxuP+eHMPh+AvHpQWXeCGOeI48Evsw/FKY1/sI5aYS7zPnVXRm+5YeO0dC9IflgUADzjj/wGslzEnXSB76YJOusDJj9MuP+gKyPxn+HZ0Fuvq61y/ywOdNFJeBXIvcGv8x/fR+T/iN+hE3goAAA==]]

まずはx軸にスナップすることを考える。x軸から+-22.5度の範囲はx軸にスナップする。つまり、 ~abs(y) < tan(22.5deg)*abs(x)~ ならx軸にスナップする。そのときy座標は0とし、x座標だけ残せば良い。

y軸にスナップするときも同じようにすれば良い。

45度の線にスナップするのは、上の条件に合致しなかった場合。xとyの負号だけを取った方向の線にスナップする。

クリック座標(x,y)から一番近い45度線上の点へスナップしなければならない。

[[edraw:data=H4sIAL/2I2QAA71WXZOaMBT9K5nri05BkoCIHfGhfWgfts/t9o1K+BiR7IQo2l/ffEBl6+7UjmUH4ebDnHNuci66bo45astUFjH4GAMqWJkXMgYaqs6RiabkdQxkTgCd9lXdxFBI+fTe89q2nbf+nIvcoxhjTwHBZp2yrEFlGgNLRdK6uqtG94nYMYFs+GrZQuj6nztGNXAsWfuBn2LACCOiP4AEy77FsDCNR9PgomS1WpAcJAfUSMF3LIaa1wxQVlZVDJNwEW6zFTxX4mI3EYK3StBTIguk5r5gh8wXCDuRei7n2Fl8B+Rt1p6Vpho6g81asK18fZu0YEBn8+wEZFn2p7SLlh/JdpcLfqhTQ5YPp3h67vX1yyer1aoHtlBaeYAdte8P1MaezO1FGuQbYEK1nOIHHf4O0k8EL8tROOp2AnxJfbLE+voHII1AFBKJfCfye5O4rFaTB1FNJ1fnORvQ9Qd/W/KGa2VVU3KVP70VhwQWR8d7cBY29aUJ96AEBiR4BUOyk0QZr6WbJfuyUsZ9PKBPXBblFux4U/5U8CQCpL/rJvW24CKGfZmm1aXKKKXG/CSw9qc+hg1de3rN/2ehdMASjMXSpaL3f7xUOpJgmMgtNos6m0V32hV3OPh+u4bWruFdKJEBid7KrtHASP5YZ0zwgIWMbdfwDUiiMbeLDgtvGjh0NtrBhJZpqYl8x589q8CrWlG/jOooTc0pbR+7iCg24318wbkX12f6GsfK4eVNMj29O8+83+8sL1e3+lO2+QWRRQVS4wkAAA==]]

** DONE 日本語に翻訳する
CLOSED: [2023-04-01 Sat 00:06]
地味によく分からないのが言語、国をどのように割り出すか。
- 環境変数
- current-language-environment
- 手動設定

Emacsのtutorialと似た方法を採るべきだと思う。

tutorialは次の方法で言語に対応したファイル名を取得している。

#+begin_src elisp
(get-language-info current-language-environment 'tutorial)
#+end_src

#+RESULTS:
: TUTORIAL.ja

get-language-infoはlanguage-info-alistから情報を取得している。

language-info-alistから日本語に関する部分を抜き出してみる。

#+begin_src elisp
("Japanese"
 (documentation . t)
 (sample-text . "Japanese (日本語)	こんにちは, ｺﾝﾆﾁﾊ")
 (features japan-util)
 (input-method . "japanese")
 (coding-priority iso-2022-jp japanese-iso-8bit japanese-shift-jis iso-2022-jp-2004 euc-jis-2004 japanese-shift-jis-2004 iso-2022-jp-2)
 (coding-system iso-2022-jp japanese-iso-8bit japanese-shift-jis japanese-iso-7bit-1978-irv iso-2022-jp-2004 japanese-shift-jis-2004 euc-jis-2004)
 (charset japanese-jisx0208 japanese-jisx0212 latin-jisx0201 katakana-jisx0201 japanese-jisx0213\.2004-1 japanese-jisx0213-1 japanese-jisx0213-2 japanese-jisx0208-1978)
 (tutorial . "TUTORIAL.ja")
 (iso639-language . ja)
 (exit-function . use-default-char-width-table)
 (setup-function . setup-japanese-environment-internal))
#+end_src

iso639-languageが使えるのではないか。

#+begin_src elisp
(get-language-info current-language-environment 'iso639-language)
#+end_src

#+RESULTS:
: ja

ただ、iso639-languageが設定されている言語は非常に少ない。
tutorialファイルの拡張子から取ってみてはどうか。
もしくは大人しく current-language-environment の値自体を使うか。
いや、自分で対応表を持てば十分か。
("Japanese" . "ja") => edraw-msg-ja.el
もちろん言語ファイル名を設定で直接指定出来るようにする。

current-language-environmentの変化を監視するかどうかは微妙。一応set-language-environment-hookでできるけど。とりあえずやらないでおく。起動した後に切り替える人なんて少ないからね。

後の課題はメッセージを収集する方法。gettextユーティリティのようなものが欲しい。
elファイルからメッセージを収集してメッセージカタログを更新するコマンドが必要。メッセージ使用箇所へジャンプするコマンドも欲しい。
** DONE プロパティエディタをフレーム化したときに図形が作れないのを直す
CLOSED: [2023-04-01 Sat 10:25]
フレーム化していると矩形ツールや楕円ツールで図形が作れない。
ドラッグ中にフレームがセレクトされるからだと思う。
** DONE プロパティエディタの順序に関する機能を改善をする
CLOSED: [2023-04-01 Sat 10:24]
- 何個中何番目の図形かを表示する(図形の時のみ)。
- 前、次ボタンを適切にdisable(:deactivate)する。ボタンの位置を動かないところにする。
** DONE M-矢印キーは複製にしたい
CLOSED: [2023-04-01 Sat 22:53]
連続するM-矢印キーも一つ一つ複製してから移動する。
M-S-は10ピクセル単位の複製移動。
数値入力は「C-u 数値 矢印キー」で既に出来る。単体の「C-u 矢印キー」の時にプロンプトを出す(現在は4ピクセル移動)。
** DONE パス編集/パスツールのSHIFT+クリックで点を追加するときに45度単位にすべき
CLOSED: [2023-04-01 Sat 23:46]
** DONE 一番最初に選択するツールを変更できるようにしたい
CLOSED: [2023-04-02 Sun 00:21]
rectよりもselectの方が間違いが無い。
カスタマイズ変数を追加するくらい？
デフォルトもselectの方がいいのでは？

edraw-editor-default-toolを追加。
** DONE ドキュメントの切り抜き機能を追加する
CLOSED: [2023-04-02 Sun 10:14]
ドキュメントを内容に合わせてリサイズしたい
トリミングしたい。内容にフィットするようにリサイズしたい。
最低限平行移動せずに全て収まるようなサイズに変更したい。
ドラッグで範囲選択させるのが一番分かりやすいのでは？
edraw-read-rectangleで範囲を指定させて平行移動とサイズ設定をする。
edraw-cropコマンドを追加する。
** DONE パス編集/アンカーポイントやハンドルポイントの座標を数値入力したい
CLOSED: [2023-04-02 Sun 11:08]
現在の座標をプロンプトに表示しつつ座標を入力したい。
+キー割り当てもしたい。+ キー割り当てはとりあえず保留。
** DONE 矢印キーで何かを移動したとき等にその座標を表示する
CLOSED: [2023-04-02 Sun 12:08]
それぞれについて何を表示すべきか。
- 複数の選択図形
- rect
- ellipse
- text
- path
- image
- group
- アンカー
- ハンドル
アンカーとハンドルは点の座標を表示すれば良いとして、他はとりあえずAABBの左右上下中心を表示しておく。テキストはちょっと問題ありかもしれないが必要なら対応する。

他にも、アンカーやハンドルを選択したときにも座標を表示する。
** DONE 点を他の図形に接続する機能を追加する
CLOSED: [2023-05-28 Sun 19:02]
1. 図形と直線の交点を求める
  - edraw-svg-element-and-line-intersections (内外判定関数を流用)
2. 接続関係を表すクラスを追加
  - edraw-point-connectionクラス(srcとdstを持つ)
  - edraw-point-connection-srcクラス(接続元を表す)
  - edraw-point-connection-src-anchorクラス
  - edraw-point-connection-src-attrsクラス
  - edraw-point-connection-dstクラス(接続先を表す)
  - edraw-point-connection-dst-shapeクラス (接続元の方向を使う)
  - edraw-point-connection-dst-shape-dirクラス (方向を角度で指定する)
3. edraw-shapeクラスに対する修正
  - 新規スロット
    - point-connections
    - point-connection-referrers
  - 新規メソッド
    - 内部ID管理
      - (edraw-internal-id shape) 接続先を表すのに必要。edraw専用の内部ID
    - スロットのアクセッサ
      - edraw-get-point-connections
      - edraw-set-point-connections
      - edraw-get-point-connection-referrers
      - edraw-set-point-connection-referrers
    - 接続オブジェクトの検索、追加、削除
      - edraw-find-point-connection
      - edraw-add-point-connection(connection版)
      - edraw-add-point-connection(list版)
      - edraw-remove-point-connection(connection版)
      - edraw-remove-point-connection(src版)
      - edraw-remove-point-connection-referrer 内部的に使用
      - edraw-remove-all-point-connections 基本的には必要ない
      - edraw-remove-all-point-connection-referrers 接続先が削除されたとき使用
    - 接続点座標の更新
      - edraw-update-point-connection-referrers 接続先が変化したときの処理
      - edraw-update-all-point-connections 接続した直後の最初の更新で使用
    - 接続状態の保存・復元
      - edraw-update-point-connections-attribute 属性を更新する。この際IDが必要
      - edraw-restore-point-connections エディタ起動時に使用
      - edraw-point-connection-parse-* 属性の解析に使用
      - edraw-point-connection-skip-* 属性の解析に使用
  - 動作の修正
    - edraw-on-shape-changedでedraw-update-point-connection-referrersを呼ぶ
4. edraw-shape-point-pathに対する修正
  - (edraw-anchor-index-in-path shape-point-path)を追加
  - (edraw-get-actions shape-point-path)に接着コマンドを追加
  - edraw-glue-to-selected-shape(接着コマンド)を追加
  - edraw-unglue(接着解除コマンド)を追加
  - edraw-glued-p
5. edraw-editorに対する修正
  - edraw-initialize-svg-documentのタイミングでedraw-restore-point-connections
  - (edraw-restore-point-connections editor)を追加
  - (edraw-find-shape-by-internal-id editor id)を追加
  - (edraw-find-shapes-by-xy list xy)を追加
6. UNDOがまとまらない問題を修正
  - 図形に対するほぼ全ての変更のUNDOをグループ化(edraw-on-shape-changedで追加の変更がされる可能性があるから。merge問題は保留)
  - プロパティエディタでプロパティ名をドラッグしたときの冗長な更新を抑制

やり残し
- [X] 全選択移動すると線がズレる
- [X] 日本語化
- [X] 接着解除コマンド
- [ ] 不要な内部IDの削除
- [ ] 距離を調整する機能
- [ ] 接続ツール
- [X] 接続されている点を削除したときの処理

  edraw-delete-pointでanchorを削除したとき、そのアンカーに対するconnectionがあるならそれも削除する。
- [ ] 接続されている点を移動したときの処理 (OBJDIRに切り替えたい)

  edraw-moveでconnectionがあるanchorを移動するときにそのような処理をする？
  いや、ツールの方で対処した方が良い。全体の平行移動等と区別が付かない。
- [X] 接続されている図形を移動したときの処理(その図形に設定されている全接続を更新してしまうのが手っ取り早い)

*** 座標の計算手順

下図PATH1オブジェクト内のA0(先頭)とA-1(末尾)の座標を求める。

[[edraw:data=H4sIAA2acmQAA81WXW+jOBT9K5b70koh+AMIGYVI3dVq52FGGo1G2p15o8EkqAQqQ5tmf/342oTy2TZpqq5oQ8D2OcfX996TRfGwRrskKjcBdj2C0UYk600ZYIephwchiyTPAkynFKPHbZoVAd6U5d0n297tdtMdn+ZybTNCiK2A8HIRibhASRRgEclwZ8GjersN5a2QyNz+MWwerp4/V4zqxUMidn/kjwEmiCAKfxhJEf+rtOkvP/WXXCYiUwvC+zLHqChlfisCnOWZwChO0jTAFx6BC7eVWMQKpcx3StBdWG6QGvtKJnTqIjLx1edsSibuL4zs5cI20v43ymlfOTXSqdHOpu7Ha49viE/8rnZ2fNRtyJvlQopVOZ6cIBijvf48CIjjrrQnLTfh6nYt8/ss0mTr5lAe7Q/6DJRZrOPsKrUO+UJn6u6bO2PqPld3EGX4rEonexJwQWO4NJveSj3APbhq2VGkJEm1Hx35vbnDIzcbBJYK3m9GgbwdmpOXsWG64+rplLv1dNqYThtn4MLVDQtvhOWQJk18r8KfHYkPUXbgGiAcwGf0DPoPhE18v8J3zxuf4YxUGchZlYmcNFYemoepI0tkavq9TC8vej3wqhYQhcVGvQr3usp7yWw3Ww6UwMwQ+/WOjLBn0PrCijKUZU8a7Urrq+iFwiOTuRLkK2G0V4t0uBZHkRSEhpofhXRYzSohnA6GprGyh92F4pUQNj8Z6pkUYEemQC9UpvOpNHCNwtHMbfVPzzVnNJA13d7ZUXTEXtoiSvFYojjPSisOt0mq0H7eo7/zcpOssHlfJP8JKF+MYK4VZqtNLgOsE7QuWcaYbpqMmKaptoSX1wRdXlvO1cKGlRVXc5I+u7NwL68pcPFRLt0FzsXFgIuNc83OyMWBi9ZcIk2Tu0KgFbRU4FntjS01cwbcjBszG+nKgzCcHY1T5zD3TA47pPL8I2qStYyCOy9aetetm07es/kB6Ocs/WRs9339n8/f0T/1CfrGM7lHJ9RlIyd4sKk3t6Unl22JmM8nzPG/gJhh/zxVw0uG2lIxY+CZfM7G+vFrrQqQwDMB6nSnMgXma//kvv9W/wQo8E+AeoN/AlRV7grKGYN6N+vq9R4+8z7GP1V5OrTyNMc/X+8nwz5z4GKed2b/HPYZ7jd8pu0Jw5kz7DM1jPaZ43BO/pmyTaIoFbj7O8U1EfQ9vPz+158/aDfE1ThnJ0Z4gFYTsRbR+TfEiNrRt+sfn+mriF71i85EwidtXS5W2MVdmKFVGhZFgDVWmsAJmmVGx1RlcYCSrBSyUFaW5NklTLrUYZ+uBAxMUDWVXk2QGRDRWkAyAsNLRCiCwhPbmtGio5SsS6nqy3CyDmcVP3ut/ouH9fI3C4hlwAgUAAA=]]

A0はRECT1に接続すべきPATH1内のアンカー点である。A0の座標は、RECT1の中心からA0の次の点(A1)へ向かう線上にある。また、RECT1の辺の上でもあるので、両者の交点がその座標となる。A-1も同様に考える。これら各点、各オブジェクトの関係を仮に次のように表す。

- ~PATH1.A0 = intersection(line(RECT1.CENTER, PATH1.A1), RECT1.edge)~
- ~PATH1.A-1 = intersection(line(RECT2.CENTER, PATH1.A-2), RECT2.edge)~

長いので略して次のようにも書く。

- ~PATH1.A0 = connect-obj(RECT1, PATH1.A1)~
- ~PATH1.A-1 = connect-obj(RECT2, PATH1.A-2)~

PATH1.A0のconnect-obj(RECT1, PATH1.A1)はどのように計算すべきか。

- A1が存在しない場合、RECT1の中心点とする。または点を更新しなくても良い。(PATH1に点が一つしか存在しないケース)
- A1が固定座標の場合、問題なく計算できる。(上図左のケース)
- A1が計算で求めるべき点(接続されている点)の場合。(上図右のケース)
  - ~PATH1.A-1 = connect-obj(RECT2, PATH1.A-2)~

    インデックス番号を正規化する。上図右のケースだとA-1はA1、A-2はA0なので

    ~PATH1.A1 = connect-obj(RECT2, PATH1.A0)~

    A1の座標は今まさに求めたいPATH1.A0に依存しているので循環していることが分かる。

    ~PATH1.A0 = connect-obj(RECT1, PATH1.A1) = connect-obj(RECT1, connect-obj(RECT2, PATH1, A0))~

    connect-obj(RECT2, PATH1.A0)は現在計算中のA0を含んでいるので、これではいつになっても計算が終わらない。そこでRECT2.CENTERに置き換える。

    ~PATH1.A0 = connect-obj(RECT1, RECT2.CENTER)~

    となり計算できるようになる。
  - それ以外のケースはひとまず非対応で良い。

*** data属性上での接続の表現

物体Aの任意のアンカー点pの座標を、「物体Bの中心から物体Bの任意のアンカー点qへの直線」と「物体Bの辺」との交点に接続したい。そのことを次のように書いた。

- ~A.p = intersection(line(B.center, A.q), B.edge)~
- ~A.p = connect-obj(B, A.q)~

通常A.qはA.pの次(0なら1、-1なら-2)なので省略して良い。

この関係をSVGに記録するため、物体Aのdata-edraw-point-connections属性を使用する。

#+begin_src svg
<rect data-edraw-id="bbbbbbbb" x= ... />
<rect data-edraw-id="cccccccc" x= ... />
<path data-edraw-id="aaaaaaaa" data-edraw-point-connections="ANCHOR(0):OBJ(bbbbbbbb),ANCHOR(-1):OBJ(cccccccc)," />
#+end_src

ANCHOR()は長いので単にA()と書いても良いことにする。

*** 方向指定接続先
物体の明示的に指定された任意の方向(角度)に接続する機能があると便利かもしれない。これは次のように書く。

- ~A.p = intersection(line(B.center, B.center + (cos(dir), sin(dir))), B.edge)~
- ~A.p = connect-obj-dir(B, dir)~
- ~ANCHOR(p):OBJDIR(B dir)~

** DONE できるだけedraw-set-node-positionを使う
CLOSED: [2023-05-28 Sun 21:18]
Z orderを変更する関数はできるだけedraw-set-node-positionを使うべき。
UNDOの処理などが重複しているので。

- edraw-bring-to-front
- edraw-bring-forward
- edraw-send-backward
- edraw-send-to-back
** DONE ハンドルのドラッグはedraw-editor-with-temp-modificationsを使うべき
CLOSED: [2023-05-29 Mon 15:33]
edraw-editor-with-temp-modificationsを使うようにする。
edraw-move(edraw-on-path-point-move)のマージ機能に頼らないようにする。

- [X] edraw-mouse-down-handle-point 単純にハンドルを移動するとき
- [X] edraw-drag-handle-on-click-anchor パスを継続したり閉じたりするとき
- [X] edraw-on-down-mouse-1 edraw-editor-tool-path 最初のアンカー
** DONE プロパティエディタ/プロパティ名のドラッグ時にスライダーを非表示にする
CLOSED: [2023-05-29 Mon 16:24]

元々イベントが文字単位でしか来ない問題を回避するために画像を表示したが、mouse-fine-grained-trackingという変数をtにすることでも回避できることが分かった。

edraw-property-editor-number-dragging-use-slider-barというカスタマイズ変数で従来通りの表示も出来るようにしておく。
** DONE プロパティエディタからUNDOデータのマージを制御する
CLOSED: [2023-05-30 Tue 12:37]
プロパティエディタが連続的にプロパティを変更するときにUNDOデータが適度に一つにまとまるようにする。

案:
- 何かフラグを立てて、その間だけマージ機能を有効にする。
  (問題: 今のままだと接着時にマージ出来ない)
- (edraw-undo-list shape)で先頭のUNDOデータを取得できるようにする。edraw-set-propertyの前後にそれを呼び出してUNDOデータが生成されたかを調べ、記録しておく。
次のset-property時に連続変更の条件が満たされたら、(edraw-undo shape)を実行する。

targetがshapeではない場合も考慮しなければならないが、後者で実装する。

edraw-property-editor-read-property-paint-colorだけが心配。こちらも同様の方法で対処する。

** DONE UNDOのマージ機能を作り直す
CLOSED: [2023-05-30 Tue 12:45]
同じ属性を変更するときではなく、同じコマンドが連続するときだけマージするべき。
コマンド側に必要に応じてUNDOしてから変更する機能を追加する。

新しいマージ機能を作る。
- [X] プロパティエディタ
  プロパティエディタはedraw.elに直接依存していないのでUNDOを直接制御できない所が難しい。
  - edraw-property-editor-read-property-paint-colorは非常の多くのedraw-set-propertyを実行してしまう。もしマージしなかったら大量にUNDOが生成されるはず。
  - 他は基本的にupdatorを介してedraw-set-propertyする。
    updatorが呼ばれるのは:
    - 色ボタンを押してカラーピッカーで色を選択した後(選択中は直接edraw-set-propertyが呼ばれる！)
    - プロパティ名をドラッグしたとき
    - プロパティ名の上でホイールを回したとき
    - フィールドを編集したとき
- [X] ドラッグ移動したとき(既に対応しているつもりだが漏れがないか確認する)
  - ハンドルのドラッグが未対応
- [X] キーで移動したとき(キー移動コマンドが連続するなら一つにまとめるべき)

今のマージ機能は全て廃止する。
- [X] edraw-push-undo-path-point-moveのmerge引数 => キー移動とドラッグ
- +[ ] テキストのedraw-set-anchor-position => set-propertiesを使うべき+
- [X] edraw-set-properties-internal(一般的なプロパティ設定) => プロパティエディタ

** DONE UNDOデータのマージに一貫性がない問題について考える
CLOSED: [2023-05-30 Tue 12:45]
edraw-merge-set-properties-undo-data等、同じ操作を連続して行ったときにUNDO情報のマージを行っているが、それらは機能したりしなかったりしている。

プロパティエディタでx属性をドラッグで変化させた場合は一つのUNDO情報にまとめられる。これはありがたい機能。

+キーボードによる選択図形の移動は現在の所マージされていない。当初はマージされていたかもしれないが、今は複数の選択図形を一度に移動するためにグループ化されているので、グループ同士はマージされない。+ [2023-05-29 Mon]連続するedraw-editor-move-selected-by-arrow-keyコマンドによる平行移動はUNDOして一つにまとめられるようにした。

右クリックで一つの図形を選んで平行移動する場合でも、edraw-set-properties-internalが無変化のプロパティを削除するので、マージされない場合がある。例えばrectの場合、最初はx,y,width,heightが文字列なので一回目の平行移動はx,y,width,heightの全てのプロパティが変化する。しかし二回目はxやyのみ変化するので、一回目のプロパティ列と一致しないのでマージされない。

図形のドラッグ移動についてはドラッグ操作側で edraw-editor-with-temp-modifications を使って確実に1回にまとめているので問題ない。

edraw-push-undo-path-point-moveによるパスのアンカーやハンドルの移動はキーボードでもマージされる。これは悪くないと思う。

他にもマージするケースがあるのかは不明。

これらの挙動には一部一貫性が欠ける動作があるように思えるがどうしたら良いか。

→対処法: UNDOデータのマージはもっと高レベルの場所で制御すべき。edraw-set-propertiesのレベルではマージすべきではない。
** DONE テキストのedraw-set-anchor-positionはプロパティ変更を使うべき
CLOSED: [2023-05-30 Tue 13:39]
その方がrect系などとの統一性を出しやすいはず。
UNDO等の挙動において。
** DONE パスのedraw-set-propertiesはdの変更を同時に行うべき
CLOSED: [2023-05-30 Tue 16:07]
現状はまずdの更新を完全に済ませてからその他のプロパティを更新している。
+UNDOをマージすることが前提になっている。+
UNDO登録やon-shape-changedを1回にまとめられないものか。
** DONE 点接続/AABBを基準にした接続元クラスを追加する
CLOSED: [2023-05-30 Tue 18:26]
~AABB(0.5 0.5):OBJ(somerectshape)~ のように指定出来るようにする。
1. edraw-point-connection-src-aabbクラスを追加する。
2. edraw-point-connection-parse-src-aabbを追加する。
3. edraw-point-connection-src-typesに登録する。
** DONE 点接続/選択または重なり図形と接着
CLOSED: [2023-05-30 Tue 18:52]
「選択図形と接着」を「選択または重なり図形と接着」へ変更する。
選択しなくても接着できて便利。
** DONE 点接続/任意の図形の中心位置を他の図形の中心に固定できるようにする
CLOSED: [2023-05-30 Tue 20:12]
特にテキストを他の図形の中心に固定したい。
~AABB(0.5 0.5):OBJ(somerectshape)~ のように指定出来るようにする。
AABBの中心だとわずかに上にずれるが、そこは今後の課題。
接着するコマンドが必要。

(edraw-glue-to-selected-or-overlapped-shape (shape edraw-shape-text))を追加する。
** DONE 点接続/場当たり的で良いのでtextの接着時に少し下に下げる
CLOSED: [2023-05-30 Tue 22:44]
descentの分だけ無理矢理にでも下に下げる。
edraw-point-connection-aabbを追加。textは最終行のdescentを含まない矩形を返す。
** DONE 矢印マーカーの形状がstartとendでわずかに異なっているのを直す
CLOSED: [2023-05-31 Wed 07:15]

修正前:

[[edraw:data=H4sIABpwdmQAA82TTXODIBCG/wqzubQzKh9t0iSjHnrqIT3342YjKqORDJKQ/PsimCat6aWnzijLsuy+DzsQd/sSGZHrKgF2TwBVXJSVHpw9V52QbQI0ooAOm6btEqi03i4xNsZE5i6SqsSMEIJtoWHL8tCItr62kS4WC+yikMY5Lzok8gR4rjIT9q5d3WSq5gp58+LBZjD4TwOcXdgLbh7lIQGCCKL9B0jx4jWBqZu8uYlUgrc2IdtpCajTStY8gVa2HFAhmiaBiUWC7xghCTOlpLE020xXyMaeSUCjKSLB3I4PEQmm74BwGmPP9T+w6Ribem7qwVk0HYHjvu9prPha/34Pel5ARzcO+kVR/CQ703xk67pUctfmTqy8DMn8CIPe1YPluU1SVtG15uitdZkn6M2Jk1xwzomTcic/1fVN8l74lXRS8qp9l2YkYIysrKF9Sd+akLc2tlPNzWR0M27/rkXnTmXVW8bOap3OlB7p0Us9XNrfPrP0EzRipxm1AwAA]]

修正後:

[[edraw:data=H4sIAIZ1dmQAA82TyW7DIBBAfwVNLq0UwtIoS2V86KmH9Nzl5ga8KI6JMAnJ3xeM06R1e+mpkvEwIHiPMU7aQ4FcJW0pgE8poFJVRWn75KBMW+lGAJswQMdt3bQCSmt394Q45ybubqJNQTillPiNIE2kyltUSQFKmszhkPrRbWY2yqAYniNtBn3+2BP9wKFS7kEfBWBGUWg8PICMyl8ExM5r19GmUo1flO2tBtRaozdKQKMbBSiv6lrAaLlcwlcVTHFmjHbeaJfZEvm5J08Z43mAjedoOqZvgEiakKj2f8zZ0DyKd954KE5C6dPEqLX9/fseO6NT9+7ZeZ5/t7qYvGfrTWH0vpEdrLie0vIEPe/HQ0npFxlPZKEapxh9yqNBCGdPeuW5oB2qO/V531igmOHPRWdSpIYKzeiYc7rygYUtY2mwavzc3tQ3o8HFuP07iy06yipEzi+01mbGDnjsmkcK3/zvk34A5j05w40DAAA=]]
** DONE 点接続/場当たり的で良いので矢印の位置を調整する
CLOSED: [2023-05-31 Wed 08:02]
矢印の大きさ(パスの線の太さ)と接続先の線の太さを考慮すべき。

~(cl-defmethod edraw-gap-distance ((src edraw-point-connection-src-anchor) dst-shape) ...)~ を追加。
** DONE パスのアンカーポイントを追加するときに接着できるようにする
CLOSED: [2023-05-31 Wed 11:02]
Ctrl+クリックで接着するとか？
二回目に接着したときはそこでパスを終わらせる必要がある。
コネクターツールを作るのは後でも出来る。
ツール選択時にヘルプを出す。
[Path] Click:Add anchor, Drag:Add anchor and handle, S-Click:45-degree, C-Click:Glue, C-u Click:Avoid connection
** DONE テキスト追加時に接着できるようにする
CLOSED: [2023-05-31 Wed 11:08]
- +カスタマイズ変数で何もしない、スナップ、接着を選べるようにする+
- Ctrl+クリックで接着・スナップしないようにする
- +接着したら接着したと表示する+
- ヘルプを表示する
[Text] Click:Add text, C-Click:Glue
** DONE 各ツールでマウス操作のヘルプを表示する
CLOSED: [2023-05-31 Wed 13:00]
すでにpath、textでは実装済み。
** DONE 親子関係のあるshapeの変更通知機構を直す
CLOSED: [2023-06-02 Fri 16:18]
edraw-transform等で子孫の変更を一回にまとめるための仕組みが必要。
現状だと子孫の一つが変化するたびに更新通知が発生してしまう。
更新通知で点接続の更新をしているので、子孫が一つ変形するたびに位置を更新してを繰り返しグループ内の形状がメチャクチャになってしまう。
ただ、将来子孫を直接選択出来るようにした場合、必ずしも悪くないかもしれない。

とりあえず子孫の変更が親を飛び越えて祖先要素へ通知される仕様は廃止した。
** DONE グループを他のshapeに接着すると動かしている間に崩れる
CLOSED: [2023-06-02 Fri 16:19]
次の図で矩形を移動するとりんごがバラバラになる。

[[edraw:data=H4sIAPnudmQAA52T32+bMBDH/xXLfWklYnz4dxUiNXmbNu19bzQ4gJpBRLzS/Pc7Aum8NJWmnWSMz+f7fu4My+NrRYamDHVOBeeU1L6p6pBTsLh49f2x6VpcMaDk7ee+Pea0DuHwmKbDMLBBsK6v0oxznmIiulr2fhs+z/eWU3yezs9ds9/n9G6321FyDH334nPadq2npClz6su+GBbPxfal6rtfbUlJulpW8VZXni56fx+fE5clHupREVCsP00zLu1EoHGaOUFGnKO/LEKxmGRGQedl8ey8nxmi3UPXtGGx7doWMbBR2J2np/X6njNFcDw8fl9/ub8cf0DcQxHqd9w759yl9sXMIt/5vRZeoCYCfINMJdYyoSMzm9GrDTNcS5XpjGdCZIqABBbHaZcYxfAu/hgQUPyjdwMKNWKDW0eN+sTrJLMuMrsZvQASu3Ej9WWDT2+bG+BzCNYJ3DAXV09u9uTH+Y7+vcvTF3NusTCM2whQJlYxiKvMEDFjqOqYkDEnFnGFrscgDnEzMOhKARKLHv3/yPJjQsmMiT1fQV41XiZaMXUWTat54L+7+g2BFNnVCgQAAA==]]

パスに限らずrectやellipseをグループ化したものでも起きる。

[[edraw:data=H4sIACjudmQAA32R0W6EIBBFf4VMnxVZN+26Ef9FBZFowSBd9O87Kk1sYvsgk2Hg3nOxnF+KBC18zyHPMiC91Kr3HNgDm5d0s7YGu5QBWT5HM3PovZ+elIYQ0pCn1il6y7KMolA88lxGbYarg6woCrpPoSqdbP3f1gsHXNd97fQ4cnjrug7I7J0dJAdjjQSiBQcpXB2Spm4H5eyXEUBoVarzyIr1x+/39SgsBF5y6MjQzK1HxfZxELxjiZzsfuLc9kXt6+Sw2Qxb0XzUTdFEhtN0str4pLXGIAa+KT4kMslx1NMsr7HyBxMCI7dLNG7Xg2lDvUXUrdL/wsmGCXadbxeNmjHgOd/9kKYqfviHq2/PW2uQMAIAAA==]]

あ原因分かった。子供が一つ動くたびに親のon-shape-changedが呼ばれるからだ。どうしよう。最低でもtransformするときは子供を全部transformし終わってから一回だけon-shape-changedを呼ぶようにしなければならない。それで問題ない？

他にも一括で要素全体を操作するものはできるだけ一回にまとめた方が無難かも。

その前に親子関係の通知の仕組みがメチャクチャなので徹底的に直した方が良い。

厄介なのはUNDO。transformを一つにまとめたとしても、UNDOは一つにまとまらない。UNDOはそれぞれの子孫のtransformのUNDOが個別に実行されるから。

対策案:

- ×UNDOも一つにまとめる(子孫のUNDO登録を抑制して、最後にgroup全体に対する逆transformを一つだけ登録する)
  => 誤差が累積しやすい(今更?) 逆行列が求められない場合がある(全く元に戻らない)
- △make-undo-group時に個別に変更通知がいかないようにする仕組みを作る
  => make-undo-group自体には手を加えたくない。
- ○make-undo-groupで出来たUNDOデータをさらに包んで更新通知を抑制する
- point-connection-src-aabbはtransformプロパティの変更によって移動する
  => 最終手段
- まとめなくても正しく動作するようにする
  => どうやって

一つ目をやろうとしたが無理があった。逆行列が求められない場合がある。そんな場合でも個別にUNDOすることはできることが多い。ほとんどの形状のtransformはxとかyとかのプロパティ値の変更になるので、元のプロパティ値に戻すUNDOが登録される。

make-undo-groupで一つにしたUNDOデータをさらに包んで通知を抑制するのが一番簡単そう。

1. (edraw-funcall-with-child-change-notification-suppressed group change-type fun args...)みたいな関数を作成する。
2. make-undo-groupと似たような方法で包む。
** DONE Set=>Fillでパスの塗りつぶし色を設定するときpreviewされないことがある
CLOSED: [2023-06-02 Fri 20:01]

パスに限らずfillが指定されていない図形で起きる。カラーピッカー内で最初の色をクリックしたときだけpreviewが反映されない。変化チェックが正しく機能していない？

[[edraw:data=H4sIACjFeWQAA3VPyw7CIBD8FbJeNNHysDWpKf2XWpASEQyg1L93NWq8eNiZTDY7M9ulmyHFqjxJEIwBmbQ1U5bABYqbjskGj6riQOaz80nClPNlT2kppSrbKkRD8ZBRNIK+i3rM//1mCYj3Fx6tcxKiOQxL0TTrz7BqWzd8BSTlGE5agg9eA7FKglZxKJvDMJ5MDFevgNC+M7+roO7YQTtnL0l/HRZC8Ja3QEbM589SI1bYIcf5zahr9sncvPvXrwBqcPC5/gGwADr4KwEAAA==]]

edraw-color-picker-read-color 内の on-color-change lambdaでpicker-color-strと同時にminibuffer-colorをコールバックに渡しているのが原因。なぜそんなことをしたんだろう。気が付かなかっただけ？
** DONE 点接続/パスを接着したときの位置が微妙にずれている
CLOSED: [2023-06-02 Fri 21:56]

最初にアンカーを置いた場所に引きずられているように見える。

[[edraw:data=H4sIACbpeWQAA52S226DMAyGXwW5N0UqkEDFoSJI3eW0ac+QkXBQuwSFrJS3nwuloheTplmKLSex/y+HvL/UztAK2zCIQgJOI9u6sZgQTC7S9K1WDKhPwbl+nVXPoLG2OwTBMAz+EPna1EFICAmwERS5kaX9vd+VAfpx8lV7PjPYVFUFTm+NPkkGSisJTisYSGH44H3y8lQb/a0EOEGR1+slLcZF77n83lgILDKoSFHMjHPENJ4JbuHOGZIV521ecMu9WeYmyKsyFQmRE8O/BWn6d0WZcLlPymhS7LhtHoqbLMuW+/Lu3fYLwoyD9e80Dn1Co/Rh2Y7SzM/WlrzROPbJHv1iuCt9pul0q6xXaqXw3PgV8P2PW4+6h4+X1+2C6e6OWzJPLXflTuhBjQM/RvEDJOB6hWcCAAA=]]

追加する前にコネクションを更新しているのが問題なのだと思う。
追加してから、コネクションを更新して、その後UNDOデータを登録する。
そのためにはadd-point-connectionにupdate引数を追加しなければならない。
** DONE 色/カラーピッカーの最近使った色を保存・復元する
CLOSED: [2023-06-03 Sat 19:37]
optionsに:recent-colorsを追加する。
単なるリストでは無くedraw-listというコンテナ構造体を作ってそれを使用する。
** DONE 色/カラーピッカーで最近使った色をキー操作で選べるようにする
CLOSED: [2023-06-04 Sun 13:16]
C-1のようなキー割り当てにする。
ミニバッファに割り当てるにはマイナーモードにするのが手っ取り早い。
color-picker-minibuffer-mode-map。
またはset-transient-mapのようなやり方でもいいのかもしれない。

さらにツールチップで色コードとキー割り当てを表示したい。
areaにhelp-echoを持たせて、svg-image :map image-mapに設定する。
** DONE プロパティエディタ/複数選択してプロパティを設定
CLOSED: [2023-06-04 Sun 23:19]
- +必須プロパティは除外+ (xを揃えるというような使い方もできるので維持)
- 全てnilで始めるか、全てが完全に一致しているものだけ埋めるか
- 例によって代理となるオブジェクトを作る
- コンテキストメニューに「Properties...」を追加する
** DONE 複数選択した図形に対してSetメニューを使えるようにする
CLOSED: [2023-06-05 Mon 16:37]
複数の図形に対して一括でSet=>FillやSet=>End Marker等を使いたい。
** DONE Ctrl+クリックで選択図形を追加したときにedraw-multiple-shapesを使う
CLOSED: [2023-06-05 Mon 17:04]
edraw-add-shape-selectionのtodo部分を参照。
** DONE プロパティエディタやシェイプピッカーの最近使った色問題
CLOSED: [2023-06-05 Mon 21:34]
プロパティエディタやシェイプピッカーで次のような実装にしてしまったのは問題では無いか。

#+begin_src elisp
,@(when (fboundp 'edraw-editor-recent-colors)
                (list
                 (cons :recent-colors (edraw-editor-recent-colors))))
#+end_src

プロパティエディタやシェイプピッカーをエディタから独立して使えるようにしたいのであれば、エディタから使うときにだけ明示的に(edraw-editor-recent-colors)を使うようにエディタから指定すべき。

edraw-editor-image-scaling-factorについても同じ事が言える。

何かオプションを引き渡す仕組みが必要。

とにかくedraw-editorへの依存を取り除くべき。
** DONE 選択図形をグループ化するキーを割り当てる
CLOSED: [2023-06-06 Tue 09:04]
gでグループ化、Gでグループ化解除。
選択図形のグループ化解除は新たに作る必要がある。
** DONE 選択図形のプロパティエディタを開くキーを割り当てる
CLOSED: [2023-06-06 Tue 09:25]
Alt+Enterとしたいところだが、Emacs的ではない？
fillとstrokeの設定をp f、p sにしたので、プロパティ一覧を開くのはp pにした。
ついでにAlt+Enter(M-RET)も追加した。その方が一般的だし。
** DONE TABとS-TABを図形選択の前後変更に割り当てる
CLOSED: [2023-06-06 Tue 09:31]
M-[やM-]に割り当てられているが覚えられないので。
** DONE 選択ツールにおいてCtrl+ドラッグで選択図形を追加・削除したい
CLOSED: [2023-06-07 Wed 18:07]
現状では選択ツールでCtrl+ドラッグ自体ができない。
矩形と交差している図形は選択状態が反転する。
** CANCELLED プロパティエディタ/ボタン類の表示を改善する
CLOSED: [2023-06-08 Thu 20:42]
バッファの上の方に表示できないか。バーのようにすると良い？
Prev, Nextを連続して押しづらい。
見た目もあまりよろしくない。

[2023-06-08 Thu]一応以前ボタンの位置を上に移動したので、今はそれほど不満は無い。
そもそもこのボタンで前後選択しないし。
** DONE プロパティエディタが開かない場合があるのを修正する
CLOSED: [2023-06-08 Thu 23:16]
すでにプロパティエディタのバッファが存在していて、それが非表示の時、同じターゲットでプロパティエディタを開こうとすると、バッファが表示されない。
ターゲットの変更処理は行う必要は無いが、バッファの表示は必ず行うべき。
** DONE プロパティエディタ/「Set as default」ボタンの条件非表示
CLOSED: [2023-06-18 Sun 14:04]
「Set as default」ボタンはshapeのときだけ出すようにする。
** DONE マーカーをカスタマイズできるようにする
CLOSED: [2023-06-18 Sun 13:51]
- (プロパティエディタで)矢印のサイズを調整したい。
- (将来的に)マーカーの種類を増やせるようにしたい。(最低限タイプ変数を用意する)

変更:
- edraw-dom-svg.el
  - defs、marker要素管理機構の整理。
  - edraw-svg-markerデータ構造を追加。(marker <type> <properties>)
  - edraw-svg-marker-types変数を追加。
    - marker要素作成・プロパティの反映
    - プロパティの取得
    - プロパティ情報の取得 (shapeと同じ形式にする)
    - はみ出し量の計算
  - marker型を追加。marker-start、marker-mid、marker-endに適用。edraw-svg-get-marker-propertyはedraw-svg-markerデータ構造を返す。edraw-svg-set-marker-propertyはedraw-svg-markerデータ構造を元にmarker要素を作成してdefsに加える。
- edraw-property-editor.el
  - edraw-alist-properties-holderを追加。alistをプロパティエディタで編集できるようにする。
  - edraw-insert-property-widgetsがサブプロパティを扱えるようにする。
    - prop-widgetリストを返す。
    - targetやmargin-left引数をとる。
  - edraw-property-editor-prop-widgetオブジェクトの作成はedraw-create-prop-widgetでは無く、各widgetタイプが行うようにする。派生クラスを作れるようにするため。
  - edraw-create-prop-widget-updatorのサブプロパティ対応。サブプロパティの更新時はUNDOを操作しない。
  - edraw-property-editor-prop-widget-create-widgetのmargin-left対応。
  - marker-widget追加。
    - edraw-property-editor-marker-widgetクラスを追加。
    - edraw-property-editor-create-marker-widget関数を追加。
- edraw.el
  - edraw-default-marker-properties変数を追加。デフォルトのマーカープロパティ。edraw-property-editor-open呼び出し時にそれをオプションとして引き渡す。
  - マーカー変更メニューは新しいマーカー管理機構を使う。
  - edraw-property-proxy-shapeクラスはedraw-alist-properties-holderを継承する。
  - 「Shape's Defaults」から「Default Config」へ変更。Shapeのデフォルトの他にMarkerのデフォルト設定を加える。
  - 点接続のedraw-gap-distanceは新しいマーカー管理機構を使う。より一般化された(arrow決め打ちでは無い)はみ出し量計算ができる。
- msg/edraw-msg-ja.el
  - 翻訳を追加。
** DONE 一つの図形に対するedraw-editor-edit-properties-of-selected-shapes
CLOSED: [2023-06-18 Sun 17:06]
edraw-editor-edit-properties-of-selected-shapesは図形が一つの時はedraw-multiple-shapesを使わないようにする。
** DONE 編集ツールを追加しやすくする
CLOSED: [2023-06-18 Sun 21:07]
現在はedraw-editor-tool-で始まることが前提になっている。サードパーティーの入る余地がない。
edraw-editor-tool-listにはedraw-editor-tool-を含めたシンボルを指定するようにする。

- edraw-editor-tool-*をtool-idとする。
- tool-idをそのままオブジェクトのコンストラクタとする。
- edraw-editor-tool-*--titleでタイトル取得。
- edraw-editor-tool-*--iconでアイコン取得。
** DONE edraw-read-rectangleをC-gで中断すると矩形が残るのを修正する
CLOSED: [2023-06-23 Fri 17:37]
コードを読んでいてunwind-protectのUNWINDFORMSが無いことに気が付いた。
一応全てのunwind-protectを調べたが、同じような所は無かった。
** DONE プロパティエディタ/即事反映でないときにカラーピッカーで色変更できない
CLOSED: [2023-06-25 Sun 15:47]
edraw-property-editor-apply-immediatelyがnilのとき、カラーピッカーで色を指定してもフィールドの値が変わらない(OKすると元に戻ってしまう)。preview自体も出すべきではない？
原因はpreviewをキャンセルするためのedraw-set-propertyがwidgetの更新タイマーをセットしてしまうこと。widgetの値(文字列)だけ変更しても、その直後にタイマーで更新が走ってtargetの現在値がwidgetに反映され元に戻ってしまう。
preview自体出さない方向で修正。
** DONE 変形/GUIで変形できるようにする
CLOSED: [2023-06-30 Fri 20:20]
transform属性を変更できるようにする(図形オブジェクト全体の変形)
edraw-read-rectangleのようにread-eventループに入ってしまうのも手かもしれない。

- edraw-interactive-scroll-and-zoom方式(つまりread-eventループ)でやる？　出来なくはないが、スクロールとかにも対応しなければならない。一時的なkeymapを使う方が楽では無いか？　まぁどちらでも良い。一時的なkeymapを実現する方法はいくつかありそう。エディタオーバーレイのキーマップを一時的に変えても良いし、set-transient-mapを使っても良い。transient-toolのような概念があっても面白いがやりすぎ？(PhotoshopではCtrl+tを押すとツール選択が一時的に解除されるので)　もしくはツールはスタック出来るべき？
- edraw-update-imageにフックを追加できるようにするか？　read-rectangle方式であれば必ずしも必要ない。キーマップを使うならできた方がいいかもしれない。
- 選択UIを非表示にする機能が必要。代わりに変形UIを表示するので。
- 選択図形のAABBから変形UIを作成する。
- キー操作: r回転 t平行移動 sスケーリング o原点指定 lローカル座標 gグローバル座標 RET確定 C-gキャンセル

とりあえず作るべきは
- edraw-interactive-transformコマンド
- 選択図形から選択UI SVGを作成する関数
- 変形モード中のマウスクリックハンドラ
  - +図形+ AABBの中→移動
  - +図形+ AABBの外→回転
  - +図形+ AABBの角や辺→スケーリング
** DONE UI用SVG図形の構築でedraw-dom-elementやedraw-svg-を使うようにする
CLOSED: [2023-07-01 Sat 13:45]
svg-circle、svg-rectangle、svg-line、svg-ellipse等は余計な処理が挟まっているのと親子関係の構築方法がイマイチなので。
あちこちにあるので全部直すのは案外大変かもしれない。
- アイコン
- edraw-svg-ui-*
- ツールバーまわり
- ドキュメントの背景
- その他
** DONE ORG/インライン画像の最大表示サイズを指定出来るようにする
CLOSED: [2023-07-01 Sat 20:18]
機能的には[[https://github.com/misohena/org-inline-image-fix#limit-inline-image-sizeorg-limit-image-sizeel][misohena/org-inline-image-fix]]と同じでよい。
edraw-org-link-image-max-size変数を追加する。
** DONE 図の再編集時にエディタが表示されない問題を修正する
CLOSED: [2023-07-30 Sun 10:56]
xmlns属性を必ず指定するようにしたら直った。
librsvgのバージョンによって動作が変わっているのかもしれない。
** DONE 画像の参照にはhrefではなくxlink:hrefを使う
CLOSED: [2023-07-30 Sun 10:56]
xmlns:xlink属性も指定する。
** DONE 画像ツールでクリック時にエラーが出る問題を修正する
CLOSED: [2023-07-30 Sun 10:53]
create-imageには絶対パスを渡さなければならない。

さらに、image-flushやimage-size等が失敗することがあるらしい。
「Invalid image specification」というエラーが出る。
画像ファイルでは無いファイルを指定すると必ず起きる。
念のためサイズを取得できなかった場合はその旨を報告して、100x100として扱う。
** DONE 画像ツールでのread-file-nameにMUSTMATCH=tを指定する
CLOSED: [2023-07-30 Sun 16:26]
MacでMUSTMATCHがnilの場合保存ダイアログが開いてしまう。
その場合、既存のファイルを開いても拡張子が入らない。二回選択すると拡張子が入る。
保存時は拡張子はプログラム側で補うべきと言う考え方なのかもしれない。
そもそも既存のファイルを指定するのでtであるべき。
** DONE iキーに画像ツールを割り当てる
CLOSED: [2023-07-31 Mon 08:30]
なぜか画像ツールだけキーが割り当てられていない。
たまに連続して何回も使いたいときに不便なので追加する。
** DONE ドキュメントのviewBox指定にキーを割り当てる
CLOSED: [2023-08-16 Wed 11:23]
調整するのに何度もメニューから選ぶのがつらかったので。
dvbで。dv～は他にも使えそうだからとっておく。
** DONE C-tを変形コマンドにしてしまう。
CLOSED: [2023-08-19 Sat 11:32]
何度も間違えるので、もうそれでいいや。
どのみちC-t (transpose-chars)はedrawエディタ上では使えない(エラーになる)ので。
** DONE マウスカーソルがチラつくのを修正する
CLOSED: [2023-08-19 Sat 11:30]
Emacs 29.1(Windows版)に移行してから妙にマウスカーソルがチラつくようになった。
Org-modeのedrawリンク部分を編集する時 +だけ+ によりチラつくので、背後のfaceの問題と推測。

調査の結果、mouse-faceプロパティが原因と判明した。
mouse-faceがあるとなぜかpointerが一瞬handマークになる。
オーバーレイにpointer arrowが指定されているのですぐにarrowになる。

+Org-mode以外でもあり得るので、edraw-initializeでmouse-faceをnilにする。+
オーバーレイのmouse-faceをnilにしてもテキストプロパティのmouse-faceの効果は消えないので無意味。
再現コード。

#+begin_src elisp
(let ((beg (point))
      (_ (insert "[THIS-IS-A-LINK]"))
      (end (point)))
  (put-text-property beg end 'mouse-face 'highlight)
;;  (put-text-property beg end 'pointer 'arrow)

  (let ((ov (make-overlay beg end)))
    (overlay-put ov 'evaporate t)
    ;;(overlay-put ov 'display "display")
    (overlay-put ov 'mouse-face nil)
    (overlay-put ov 'pointer 'arrow)
    ))
#+end_src

オーバーレイでmouse-faceをdefaultにしても意味が無い。見た目はハイライトでは無くなるが、やはりpointerがhandになる効果は同じだからだ。

ちらつきはポイントがリンクの中にあるときだけ起こるというのが興味深い。
あ、カーソルの点滅時にマウスカーソルもチラついている。

テキストプロパティにpointer arrowを指定すると改善する気がする。これは note_mouse_highlight 関数がpointerが指定されていないときだけQhandを使うからかもしれない。しかし完全には無くならない。

~(setq mouse-highlight nil)~ するとちらつきは完全に無くなる。しかしさすがにそうするわけにもいかない。

一番良さそうなのは、mouse-faceテキストプロパティを完全に消してしまうこと。

org-modeのインライン画像を編集中に非表示にしているように、編集中はmouse-faceプロパティを消去すれば良い。

[[elisp-function:edraw-org-link-remove-mouse-face]]と[[elisp-function:edraw-org-link-recover-mouse-face]]を追加した。
** DONE ドラッグ時にマウスカーソルがチラつくのを修正する。
CLOSED: [2023-08-19 Sat 16:49]
ドラッグでマウスが移動すると一瞬だけマウスカーソル(pointer)がIマークになる。
特殊なイベントループ中なので何かdrag-mouse-1に割り当てられたコマンドが呼ばれるということはないはず。
原因が分からない。
track-mouse変数を'draggingにするとarrowのまま変わらなくなるので、とりあえずそのようにして回避した。
[[elisp-function:edraw-track-dragging]]のkeep-pointer-shape-change-pをallow-pointer-shape-change-pに変更してデフォルトはpointerの形状が変わらないようにした。
ドラッグ中にポインタの形を変える必要がある場所は今のところ存在しない。
** DONE edraw-editor-auto-view-enlargement-max-sizeのデフォルト値
CLOSED: [2023-08-20 Sun 00:47]
(cons 560 420)ではなくedraw-default-document-propertiesの値を使うべき？　意図的に小さくしているときに困る。

それともフレームサイズにすべき？ ウィンドウ分割がどうなるかによって変わってくる。

それともimage-compute-scaling-factorを参考に
~(* (/ (float (window-width nil t)) (window-width)) 70)~ みたいにしてみる？
ただ、これはビューサイズなのでこれにimage-scaleを考慮しなければならないけど。

[2023-08-19 Sat]現在のウィンドウ幅までは広げたい。細かい図を編集する時はこれが案外重要。高さはあまり変なことはしない方がいいような気がする。

最大サイズを:
- 固定サイズで指定する
- ウィンドウサイズを使う
  (フレームサイズだと、左右2分割しているときに無意味に大きくなってしまう。あくまで操作時点のウィンドウサイズを元に決めたほうがいい)
  +その上で最小サイズと最大サイズを制限したい。+ いや、いらないか。最小サイズは、ウィンドウが縮むわけでは無いし。

edraw-editor-auto-view-enlargement-max-size はスケール前のサイズ。
最終的にedraw-update-root-transformで(oref editor image-scale)がかかる。

エディタのx位置をどう考えるか。y位置は別に考慮しなくて良いと思う。スクロールすれば済むだけだから。xはC-x <みたいな操作は知らない人もいるだろうし。truncate-linesなら別に考慮しなくてもいいんだろうけど。

edraw-editor-auto-view-enlargement-max-sizeの仕様:

- nil : 自動拡張しない
- (/w/ . /h/) : /w/ /h/ まで広げる

/w/ や /h/ の仕様:
- 整数値 : ピクセル数 (自動scaling前のサイズ?)
- (window /props/) : 現在のウィンドウサイズまで広げる。実際には、現在のエディタの左上からウィンドウ右下までのサイズを使う。すでにはみ出している軸は広げない。もちろん収まるように縮めたりもしない。あくまでズーム操作時点でどこまで広げるかの基準とする。

……いっそのこと式にしたら？ (max 300 (min 1000 (window-pixel-width))) みたいに。

まぁ、シンプルにこれでいいのでは。

(window /min/ /max/)

エディタの左上からウィンドウ右下までの寸法は測れるのか。

- 現在のポイントの位置は (window-absolute-pixel-position (point)) (537 . 291)
- ウィンドウの寸法は (window-absolute-body-pixel-edges)  (9 51 649 525)
  (ヘッダーラインやモードラインは含まない)

これらはディスプレイ左上からの座標。nilが返ってくる場合もある。

#+begin_src elisp
(if-let ((pt (window-absolute-pixel-position (point)))
         (edges (window-absolute-body-pixel-edges nil)))
    (cons
     (- (nth 2 edges) (car pt))
     (- (nth 3 edges) (cdr pt)))
  (let ((edges (window-body-pixel-edges nil)))
    (cons
     (- (nth 2 edges) (nth 0 edges))
     (- (nth 3 edges) (nth 1 edges)))))
#+end_src

うーんあまりよろしくない。エディタが一番上に来たときに、なぜかwindow-absolute-pixel-positionがエディタ右側の座標を返してくる。

window-text-pixel-sizeを使うのも無理。左にorg-indent-modeで空白を空けたら。

諦めて単純にウィンドウのサイズだけ考慮する。

edraw-editor-auto-view-enlargement-max-sizeの仕様:

- nil : 自動拡張しない
- (/w/ . /h/) : /w/ /h/ まで広げる

/w/ または /h/ の仕様:
- /integer/ : ピクセル数 (スケール前の)
- /float/ : フレームに対する比率
- (window /ratio/ /minus/ /min/ /max/) :
  clamp(ウィンドウサイズ*ratio-minus, min, max)

少し複雑すぎる気もするけど一応これで行く。
** DONE edraw-set-view-size-specの誤操作を防止する
CLOSED: [2023-08-20 Sun 11:24]
ビューのサイズを変更するときに、非常に大きな値を入力してしまいやすい。
Widthを入力するときに既に現在の幅が入力されているので、その後に続けて数字を入力してしまう。例えば現在の高さが300のときに400へ変更したい場合、300400と入力してしまう。400Enterと入力したら高さ300400にしようとしてしばらくフリーズする。

対策:
- 空文字列をこれまでと同じ値にし、指定クリアを別な方法にする
- 最大サイズを決める

指定をクリアする良い方法は何だろう。

v0、つまり、edraw-reset-view-sizeコマンドは ~(edraw-set-view-size-spec editor nil)~ と同じでありedraw-set-view-size-specコマンドで空文字列を入力するのと同じなのだから、そっちを使えば済む話。
edraw-set-view-size-specコマンドはinteractiveでリセットを指定出来る必要は無い。どうしてもと言うならprefix argを見るくらい(不要)。

「自動」という状態があることに気が付きにくいところが一番の問題だが、まぁ、しかたない。

ついでに、サイズは1からmax-image-sizeに限定する。
** DONE マウスカーソルのちらつきを抑えるためにmouse-faceをより抑制する
CLOSED: [2023-08-20 Sun 11:59]
orgのリンクにmouse-faceが設定されているせいで、マウスカーソルがチラつくことがある。
現在はedraw-org-link-remove-mouse-faceとedraw-org-link-recover-mouse-faceで制御しているつもりになっている。
しかし、エディタと同じ行をテキスト編集するとすぐに復活してしまう。
リンクパラメータの:mouse-faceをnilにすれば抑制できないか。org-activate-linksを見る限り、結果がnilならhighlightを設定してしまうので抑制できない。
リンクパラメータの:activate-funcで編集中を検出してmouse-faceを消すことはできそう。
** DONE 色/カラーピッカーのドラッグ中に左や上に外れて困るのを何とかする
CLOSED: [2023-08-20 Sun 16:38]
:PROPERTIES:
:CREATED: [2023-08-19 Sat 14:51]
:END:
左のフリンジや上のテキスト領域に差し掛かると色の選択が終わってしまうので、操作しづらい。
左や上のマージンを広げた方が極端な色を指定しやすい。

いや、それよりもドラッグ中に外に出ても継続される方がいい。出来る？

例えばエディタの右側からドラッグしてフレームの右外へ移動したときのイベント:

(mouse-fine-grained-trackingを使用している。使用しないと
fringeやscroll-barの中に入るとイベントが1回しか発生しない)

上下に分割にして下のウィンドウから右外へ出してみる。

: move          event=(mouse-movement (#<window 205 on todo.org<org>> 3521 (597 . 140) 606046812 nil 3521 (1 . 0) (image :type svg :data ...) (559 . 140) (560 . 420)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (598 . 140) 606046875 nil 3531 (2 . 0) nil (0 . 140) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (599 . 140) 606047062 nil 3531 (2 . 0) nil (1 . 140) (8 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (637 . 146) 606048765 nil 3531 (6 . 0) nil (39 . 146) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (638 . 146) 606048968 nil 3531 (7 . 0) nil (40 . 146) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (639 . 147) 606049062 nil 3531 (7 . 0) nil (41 . 147) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (648 . 147) 606049125 nil 3531 (0 . 0) nil (8 . 147) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (649 . 147) 606049609 nil 3531 (0 . 0) nil (9 . 147) (8 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (654 . 148) 606050281 nil 3531 (0 . 0) nil (14 . 148) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (655 . 148) 606050375 nil 3531 (0 . 0) nil (15 . 148) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (656 . 148) 606050406 nil 3531 (8 . 0) nil (656 . 148) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (657 . 148) 606050531 nil 3531 (8 . 0) nil (657 . 148) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (658 . 148) 606050640 nil 3531 (8 . 0) nil (658 . 148) (17 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (670 . 150) 606051578 nil 3531 (10 . 0) nil (670 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (671 . 150) 606051812 nil 3531 (10 . 0) nil (671 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (672 . 150) 606051859 nil 3531 (10 . 0) nil (672 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<frame todo.org<org> - GNU Emacs at YAMABUKI 000001db2c5c1560> nil (673 . 646) 606051968))
: out of target event=(mouse-movement (#<frame todo.org<org> - GNU Emacs at YAMABUKI 000001db2c5c1560> nil (673 . 647) 606052125))

- ドラッグ中はボタンを離すまでフレームの外でもモーションイベントが来る。
- ドラッグ中は他のフレームの上に来ても元のフレームからの座標が来る。
- fringeに出るところで明確なギャップが見られる。
- fringeとscroll-barでは同一系のように見える。
- frameに出るとyが大きく変わる。ウィンドウ左上基準がフレーム左上基準に変わるから。xは連続しているように見える。fringeやscroll-barの基準点はフレーム左端とほぼ同じだと推測できる。

座標の意味についてはマニュアル参照:
- [[https://ayatakesi.github.io/emacs/24.5/elisp_html/Click-Events.html#Click-Events][Click Events (GNU Emacs Lisp Reference Manual)]]
- [[https://ayatakesi.github.io/emacs/24.5/elisp_html/Coordinates-and-Windows.html#Coordinates-and-Windows][Coordinates and Windows (GNU Emacs Lisp Reference Manual)]]

pos-or-areaによってx,yの解釈が変わる。pos-or-areaが:
- point(integer) ::
  x,yはテキスト領域左上からの座標
- mode-line, header-line, tab-line, horizontal-scroll-bar ::
  ウィンドウ左上からの座標
- vertical-line, left-margin, right-margin, left-fringe, right-fringe, vertical-scroll-bar ::
  (ウィンドウ左, テキスト領域上)からの座標

マニュアルではvertical-line等の時はxは無意味と書かれているが、少なくともWindows実装ではウィンドウ左からの座標になっている。実際の所、画面外なので多少ずれていても構わない。最悪ウィンドウ左右端の座標で止めても構わない。

出来そうだ。

1. まずイベントを一律フレーム座標系へ変換する関数を書く。
2. 最初にdownしたときのフレーム座標から対象内座標への差を取っておく。
3. 対象から出たときは、フレーム座標にその差を適用することで対象内座標を割り出して、move関数をコールする。
** DONE テキストツールで既存のテキストを変更しやすくする
CLOSED: [2023-08-21 Mon 12:02]
クリック時に下にテキストがあれば、それを編集する。
+オプションでこの動作は無効に出来ても良い。+
また、C-uクリックでその動作を無効にしたい。
** DONE メインメニューに全選択・全選択解除を追加する
CLOSED: [2023-08-21 Mon 17:26]
コンテキストメニューの方にはあるがメインメニューの方にはない。
** DONE ツールバーの基本カーソル形状をarrowにする
CLOSED: [2023-08-21 Mon 17:30]
ボタン以外の所でI(テキスト選択)形状になる。これまではmouse-faceの影響があった？
** DONE デフォルトとして設定したときにツールバーの色が変わらない
CLOSED: [2023-08-21 Mon 17:44]
例えばrectツールを選択しているときに何かrectのプロパティエディタから「デフォルトとして設定」を選ぶと次に作るrectのプロパティが変わるがツールバー上の色が変わらない。
** DONE edraw-mode/find-fileで新しいファイルを開くとキャンバスが出ない
CLOSED: [2023-08-22 Tue 13:44]
多分バッファが空だと表示されない。
** DONE edraw-mode/編集中にある程度文字が入力できてしまう
CLOSED: [2023-08-22 Tue 13:44]
EnterやC-qで。
まず、バッファが空だとread-onlyテキストプロパティが設定できない。
次に、セーブ時にバッファテキストを更新するときにread-onlyテキストプロパティが消えてしまう。
** DONE edraw-mode/ファイルへ保存するときはUTF-8で保存する
CLOSED: [2023-08-22 Tue 13:47]
** DONE edraw-mode/カーソルを消す
CLOSED: [2023-08-22 Tue 13:50]
(setq cursor-type nil)で消せる。
** DONE edraw-mode/SVG要素のparseで問題が生じたらモードの切り替えをしない
CLOSED: [2023-08-22 Tue 20:06]
まず一番最初にparseして結果を検査する。
その後に切り替えの処理をする。
** DONE edraw-mode/ファイルの先頭のコメントを許容する
CLOSED: [2023-08-22 Tue 20:10]
モード指定コメント ~(-*- mode: edraw -*-)~ を許容したいので。
libxml-parse-xml-regionはコメントがあると ~(top nil (comment nil "コメント") (svg ...))~ のようなツリーを返してくる。コメントを除去するには昔は第四引数を指定したそうだが、現在それは廃止されてxml-remove-commentsを使用せよとのこと。しかし全体のコメントを消すか残すかは微妙な所。残して編集が継続できるならそれに越したことは無い。とりあえず最上位のtopとその下のコメントは削除して、top直下のsvgを使うようにする。
** DONE edraw-mode/svg要素のwidthやheightが存在しないときのエラーを防止する
CLOSED: [2023-08-22 Tue 20:12]
nilとの算術演算でエラーが発生する。
指定が存在しないときは警告を出しつつドキュメントのデフォルトのサイズで補う。
** DONE edraw-editorに引き渡されたsvgがちゃんとsvg要素か確認する
CLOSED: [2023-08-22 Tue 20:12]
違う場合は警告を出しつつnilとして進める。
エラーにしたいなら呼び出し側でちゃんと確認すること。
** DONE edraw-mode/メインメニューの「保存」を何とかする
CLOSED: [2023-08-22 Tue 21:17]
edraw-modeでは普通にsave-buffer(C-x C-s)が使える。
メインメニューの「保存」はテキストバッファに反映させるだけ。
他のメジャーモードに移行する前にも自動的に反映させるので、正直要らない。
完全に消すか、C-x C-sを載せるか。
** DONE edraw-mode/メインメニューにxml-modeへの切り替えを追加する
CLOSED: [2023-08-22 Tue 21:20]
** DONE edraw-mode/専用のウィンドウで独立して動作するエディタを作る
CLOSED: [2023-08-22 Tue 21:38]
M-x edraw-editor で起動するような。
起動してからファイルを読み込んだりする。
edraw-modeじゃダメなの？
switch-to-bufferで空のバッファを作ってからedraw-modeしても作図は出来る。
まぁ、同じでも良いけど、あくまで使い方の違い。
実際からのバッファを作ってedraw-modeを立ち上げるだけでも良い。

edraw-modeを再整備したので、 M-x edraw で新しいバッファを作ってedraw-modeを立ち上げる。
** DONE 色/カラーピッカーを必要に応じてフレーム化する
CLOSED: [2023-08-24 Thu 00:54]
エディタやプロパティエディタ、シェイプピッカーから使う時はミニバッファに表示するのでフレーム化は難しい。モーダルでなければならない。
カラーピッカー単体で使うコマンドはフレームにしてもよいのではないか。

次の関数は

- edraw-color-picker-insert-color
- edraw-color-picker-replace-color-at-point
- edraw-color-picker-replace-color-at (新規追加)
** DONE 色/カラーピッカーをポイントの近くに表示するときの拡大率をカスタマイズ
CLOSED: [2023-08-24 Thu 01:46]
0.75がハードコードされている。
変数edraw-color-picker-near-point-scaleを追加する。
** DONE 色/edraw-color-picker-replace-color-at-pointのキー入力を改善する
CLOSED: [2023-08-24 Thu 00:54]
C-c C-c や C-c C-kが効かない。
edraw-color-picker-insert-color共々set-transient-mapを使用する。
** DONE 色/rgba(?,?,?,1)のような出力を回避する
CLOSED: [2023-08-24 Thu 01:57]
alphaが1のときはrgbを使うようにする。
** DONE 色/edraw-color-picker-replace-color-atコマンドを追加する
CLOSED: [2023-08-24 Thu 02:02]
edraw-color-picker-replace-color-at-pointのposition指定版。
edraw-color-picker-replace-color-at-pointは内部でedraw-color-picker-replace-color-atを呼び出す。
** DONE 色/edraw-color-picker-replace-or-insert-color-at-pointコマンドを追加
CLOSED: [2023-08-24 Thu 02:10]
一つのコマンド(一つのキー割り当て)で置換または新規挿入を行う。
mhtml-modeには案外空いているキーが少ないので。
** DONE シェイプピッカーで図が表示されないのを修正する。
CLOSED: [2023-08-24 Thu 15:51]
一部でedraw-svg-decodeはsvg要素専門では無い！ ([2024-05-27 Mon]追記:edraw-svg-decodeをedraw-svg-decode-xmlへ改名した)
svg要素専門だと勘違いして色々修正してしまったのが原因。
<g>要素をそのままdecodeすることもある。
そちらの使い方の方が正しい。

svg要素を期待して処理しているところを全て確認する。
- edraw-org-link-load-svg
  - edraw-org-link-html-link-to-svg エクスポート時
  - edraw-org-edit-link (edraw-editorに引き渡す)
  - edraw-org-link-copy-contents-at-point (edraw-get-document-bodyに引き渡す)
- edraw-mode
- edraw-svg-read-from-file
  - edraw-org-link-load-svg
  - edraw-org-edit-regular-file-link (edraw-edit-svgに引き渡す)

とりあえず、edraw-svg-decodeは単にxmlをデコードするだけにする。
コメント除去を期待する部分はedraw-svg-decode-svgという関数を呼び出すようにする。
** DONE 変形/GUI変形時にマウスの位置に操作種類記号を表示する
CLOSED: [2023-08-24 Thu 21:24]
拡大、回転、平行移動等。

[[edraw:data=H4sIAFbg5GQAA3VS226DMAz9Fct7bZsL0bRWTV947X5gb10JEJVCFbJC/34OSbuibUjh2D72MTli218rGM9N22/GxrYnjbX3lw1jwzCshmzVuYqJ9XrNJhZj619NknPOSAxhsIWvNSrFEWpjq9qn5Gpcb7tWo1gJ3G2dOXoYNRJzm97/DtpCoyncYVh+Ho6nynVfbYHQe9edjMa2aw1CaZtG40tZlghst62eh7riRvsuB18DFd8zyReS7yWBkDxPCBmfYR6QOAg8xSAi5uIpD3zCfSgThFTJ2KYSnakH5lLFnM5CJpzWRQQlZ7iPX/vxuCGfnvv1l8k08eNH8OBug2kae+kNOHJYvNGUG1NwDBUZgjEFUT+6+aTF+Sufac04JeeDYZGUadEU/F5EWqyiQ3/L7hun+cU+gAIAAA==]]

[[edraw:data=H4sIAGPf5GQAA3WRz26EIBDGX4VMr135oxc3ixev9gV6sysi0YUN0sV9+6Kia5OWBH75nJkPZryMD4mm26DH8zQo3XPonLufMfbeJz5NjJWY5nmOlyisqX8lMUIIDmaAvGpcxyHLCKBOKNm5KB7CjspoDjShUFysuDo0cQiR53L+W6gaDqKxtT991ddeWvOtG0Cjs6YXHLTRAlCrhoHDW9u2gHBxkcci0zzDfffadSh8/Aie74yRKg2kjJSRaGZoY2O5aUp+sTzquS6yWl1nlbI1K41Rlu0sN724v1gedcp2VvG1n3uLZFlb/6c4NfoayDyEbQ5Yhh1+S/EDBY9v8OkBAAA=]]

[[edraw:data=H4sIANDe5GQAA3WSzW6DMAyAXyXyrm0TSDS1VdOLr90L7NaVX8Gggqy0b7+QOCWVNiT4+IgTx8SH8Vay+3fbjft7W3eNhsqY657zaZo2k9z0Q8mT3W7H3Sj40L+CUiEEt4sBm+rMVBqUEsCqvC4rQ3LLh7HuOw3JJoHjYcgvht012JGHe/47sc405NlwntZf50tTDv1PlwEbzdA3uYau73JgRd22Gt6KogDGj4cyntRnD5vvejYVsx8/7JqrNBUn+S5WiRJIZDNtGYEYPFUvxNi3AUgmRQQks9lW9ET/nvhoDyRLRQSMzGUTlJ18GwMXmyvxOPkyrUgfISleBSCZW3Mhxm7/QiAGn/cbEYPPtSn1JAaXNI+IwVP1Qozd5Ve0H3J3IgsxdimePNEJfz7bQrgr9MyaOi1ZmmhunNA7vLS3beXjL3oE9dUdAwAA]]

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M320,20L220,120L300,120C300,220 220,300 120,300L120,220L20,320L120,420L120,340C240,340 340,240 340,120L420,120L320,20Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M440,220L340,120L340,200L100,200L100,120L0,220L100,320L100,240L340,240L340,320L440,220Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M440,220L360,140L360,200L240,200L240,80L300,80L220,0L140,80L200,80L200,200L80,200L80,140L0,220L80,300L80,240L200,240L200,360L140,360L220,440L300,360L240,360L240,240L360,240L360,300L440,220Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src
** DONE 選択図形の複製機能をメインメニューに追加する
CLOSED: [2023-08-25 Fri 10:33]
コンテキストメニューにあるのにメインメニューに無いので追加する。
** DONE メインメニューの選択オブジェクトに対する項目の:enableを修正する
CLOSED: [2023-08-25 Fri 10:38]
一部のコマンドが選択していないのに選べてしまうのを直す。
グループ化と変形に関するコマンド。
** DONE 図形の複製機能にキーを割り当てる
CLOSED: [2023-08-25 Fri 10:45]
コピー、ペーストやM-移動すれば良いのだが、一つのキーでやりたい。
Dとか？
** DONE edraw-mode/ファイルトップレベルのコメントをセーブ時に復元する
CLOSED: [2023-08-25 Fri 15:48]
svg要素内のコメントは復元するようにしたが、肝心のトップレベルのコメントはしていない。
~<!-- -*- mode: edraw -*- -->~ のようなコメントを維持したい。

簡単なように見えて実は結構難しい問題。
コメントがありうるのはedraw-modeに限らない。
org-modeのedrawリンクやfileリンクをインラインで編集したときにも生じうる。

かといって、全ての所をコメント対応にして良いのかも疑問。エクスポートするときはコメントを出力しない方が良さそう。

編集後のDOMツリーからedraw-body下の要素を取り出すような場所もある。topがあるDOMツリーが返ってくるとそこが動かなくなる。

方針としては、SVG DOMツリーを扱う各所では、読み書きそれぞれについて、コメントを受け入れるかをフラグなり関数名なりで明示すべき。コメントを受け入れる旨を明示したところだけ、コメント付きのDOMツリーを流通させる。

1. まずedraw-editorをトップレベルコメント付きSVG DOMに対応させる
   - (入力)svgの初期化時にコメントを待避させる (svgの前のコメントと後ろのコメントに分ける)
   - (出力)edraw-document-svg関数にwith-top-level-comments-p引数を追加する。
   これらをサポートするための関数 edraw-dom-split-top-nodes と edraw-dom-merge-top-nodes を追加する。
2. edraw-svg-printをトップレベルコメントに対応させる。
3. edraw-document-svg使用箇所を修正する。(出力系を対応させる)
   即edraw-svg-printしている所(export-to-buffer|file)はwith-top-level-comments-p引数を指定する。
   edraw-mode-save はその後結局svg-printするだけなので問題なし。
   問題は次の二箇所。
   - edraw-edit-svg--finish-edit
   - edraw-save
   この辺りは関数利用者がどうなっているかによる。
   edraw-editorに document-writer-accepts-top-level-comments-p というオプションを追加するくらいしか無い。
   その上で既知の関数利用者を調べる。
   ~:document-writer~ を指定しているところ。
   - edraw-org-edit-link : OK
   - edraw-edit-svg : 利用者次第
   edraw-edit-svgの利用者を調べる。
   - edraw-shape-picker-edit-shape-atとedraw-shape-picker-insert-new-shape-at : OK
     (どちらもedraw-shape-picker-editor-svg-to-stringでedraw-get-document-bodyをを使ってbody下の要素を列挙している)
   - edraw-org-edit-regular-file-link : OK
4. edraw-editorに:svgを引き渡しているところを調べる。
   - edraw-editor-create : OK コメントでしか使われていない。
   - edraw-edit-svg : 利用箇所による。
     - edraw-shape-picker-edit-shape-at : OK edraw-create-document-svg使用
     - edraw-shape-picker-insert-new-shape-at : OK edraw-create-document-svg使用
     - edraw-org-edit-regular-file-link :
       edraw-svg-read-from-file => edraw-svg-decode-svg
   - edraw-org-edit-link :
     edraw-org-link-load-svg => edraw-svg-read-from-file => edraw-svg-decode-svg
   - edraw-mode : 後でじっくり調べる。
5. edraw-org-link-html-convert-svg-for-embed-in-htmlをトップレベルコメントに対応させる。
6. 次の関数に accept-top-level-comments-p 引数を追加する。
   - edraw-svg-decode-svg
   - edraw-svg-read-from-file
   - edraw-org-link-load-svg
7. 次の関数は accept-comments-p をtにする。
   - edraw-mode--parse-svg
   - edraw-org-edit-regular-file-link
   - edraw-org-link-html-link-to-svg
   - edraw-org-edit-link
8. edraw-modeはコメントがあるかもしれない前提で検査をする

注意:コメントの前後の改行位置までは保持されない。コメントの前後は必ず改行で区切られる。これは最初の一行に ~<!-- -*- mode: edraw -*- -->~ と書かれている場合を想定した処置。
** DONE edraw-mode/拡張子を.edraw.svgとせず.svgでもedraw-modeで開くようにする
CLOSED: [2023-08-25 Fri 18:06]
セーブ時に.edraw.svgという拡張子を入力するのが煩わしい。

必ずedraw-modeで開くファイルコメントを追加するというのはどうか。
svgファイルの先頭に ~<!-- -*- mode: edraw -*- -->~ と入れればOK。コメントがある場合の解析は対策済み。
しかし本当にそれで良いのだろうか。迷う。
オプションを追加するくらい？

他の方法としては、magic-mode-alistで ~id="edraw-body"~ とか edraw-def? を検出するとか？　edraw-bodyはedraw-defが肥大化するとそこまで検索できないかもしれないので。 ~id="edraw-~ で十分かな?

両方の方法をREADME.orgに記載した。
** DONE 色/色を色名に変換する関数を追加する
CLOSED: [2023-08-25 Fri 23:25]
** DONE 色/edraw-color-picker-replace-color-atは色名を認識すべき
CLOSED: [2023-08-25 Fri 23:14]
** DONE 色/edraw-color-picker-replace-color-at等をCustom-modeで使えるようにする
CLOSED: [2023-08-25 Fri 23:16]
デフォルトのcolor-name-schemeをバッファローカル変数で指定出来るようにする。
キー割り当ては custom-field-keymap に追加しなければならない。
READMEに設定方法を書く。
** DONE Ubuntuで子フレーム表示のカラーピッカーがドラッグできないのを直す
CLOSED: [2023-08-26 Sat 02:00]
** DONE Emacs28～27でカラーピッカー文字置き換え・追加コマンドがエラーになる
CLOSED: [2023-08-26 Sat 02:20]
set-transient-mapの第四引数(message)はEmacs29からなので、その前はエラーになる。
** CANCELLED Ubuntuでメニューの日本語が化けるのを直す
CLOSED: [2023-08-26 Sat 12:50]
原因はEmacsなのかデスクトップシステム側なのか。
メニューに使うフォントの問題かも？

~/.XresourcesにEmacs*fontに対するフォント設定をしたら日本語が表示されるようになった。が、通常の文字も変わってしまった。メニューだけ変える方法が分からない。メニューバーとは違う。
まぁ、常用環境では無いし、設定で回避できそうだからユーザーの責任と言うことで。
** DONE パス編集/切り替えツールが欲しい
CLOSED: [2023-08-26 Sat 15:32]
パスで図形を書いていて、次の区間のハンドルだけを変えたい場合は沢山ある。
M-ドラッグでそのハンドルの位置だけを単独で移動させたい。

アンカーをM-ドラッグした場合は、両方のハンドルを直線上に同じ長さで反対向きに伸ばす。
アンカーをM-クリックした場合は、両方のハンドルを除去して完全な角にする。
** DONE Emacs 27.1で発生した警告を修正する。
CLOSED: [2023-08-26 Sat 19:49]
- (require 'seq)が必要。
- tab-bar-formatはEmacs 28.1以降。
- org-export-derived-backend-pはedraw-org.elからはox.elが必要なので何で大丈夫なんだろう。autoloadを足しておいた。
** DONE xlink:hrefがhrefになってしまうのを何とかする
CLOSED: [2023-08-26 Sat 19:55]
とにかくSVGを読み込んだら強制的にxlink:hrefに直す。
ついでにedraw-svg-version変数を追加して2.0用の入出力も出来るようにしておく。

libxml-parse-xml-regionを使うとxlink:hrefがhrefになってしまう。
Emacs27環境で試したらxlink:hrefでは表示されていたものが保存してエディタで開き直すと表示されなくなる。Emacs29環境ではどちらも表示されるが、xlink:hrefがhrefになるのは変わらない。

#+begin_src elisp :results pp
(with-temp-buffer
  (insert "<svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>")
  (libxml-parse-xml-region (point-min) (point-max)))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((width . "560")
  (height . "420")
  (version . "1.1"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (href . "steak.jpg"))))
#+end_example

修正後のテスト。

#+begin_src elisp :results pp
(let ((edraw-svg-version "1.1"))
  (edraw-svg-decode-svg "<!-- test --><svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>" nil))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((xmlns . "http://www.w3.org/2000/svg")
  (xmlns:xlink . "http://www.w3.org/1999/xlink")
  (width . "560")
  (height . "420")
  (version . "1.1"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (xlink:href . "steak.jpg"))))
#+end_example

2.0だと次のようになる。

#+begin_src elisp :results pp
(let ((edraw-svg-version "2.0"))
  (edraw-svg-decode-svg "<!-- test --><svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>" nil))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((xmlns . "http://www.w3.org/2000/svg")
  (width . "560")
  (height . "420"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (href . "steak.jpg"))))
#+end_example
** DONE edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない
CLOSED: [2023-08-27 Sun 14:27]
buffer-file-nameがnilなのでcreate-imageに(画像記述子に):base-uriを指定しないと外部画像は参照できないのは当然。

対処方法は二つ考えられる:

- 画像ツールを選択した段階で、ファイル名を付けて保存するように警告を出す。
- ファイル名を付けて保存するまでの間、:base-uriをdefault-directory(下のダミーファイル名)にする。

外部にある画像ファイルへの相対パスを埋め込むのだから、参照元のファイル名を確定させろというのは筋の通っている話。

とは言え、edrawコマンドを実行したときのdefault-directoryで問題ない場合もあるだろうし、その場合いちいちファイル名を決めなければならないのは不便。edrawコマンドは手軽に図を作成するのが目的なので、そこは何とかしたい。

なので後者で実装することにした。

base-uriに対応していないEmacs 27では画像が表示されない現象は残るがそこは諦める。時間とともに解決するだろう。
** DONE 既にテキスト以外の図形がある所にテキストを追加できないのを直す
CLOSED: [2023-08-27 Sun 17:02]
テキストをクリックで変更できるようにしたときに生じたバグ。
[[https://github.com/misohena/el-easydraw/commit/bd1d19271972a04c8fa3e6a3d892288cfc00faa2][Change existing text on click in text tool · misohena/el-easydraw@bd1d192]]
対象をテキストに限定していないのが原因。
** DONE 手書きツールのスムーズ化の方式を選べるようにする
CLOSED: [2023-09-01 Fri 23:37]
現在のベジェ曲線フィッティングは歪むのが気になるという人がいるようなので、とりあえず昔の挙動に戻せるようにする。
[[https://github.com/misohena/el-easydraw/issues/17][Improve path smoothing in the free hand tool · Issue #17 · misohena/el-easydraw]]

edraw-editor-tool-freehand-smoothing-method変数を追加した。
** DONE テキスト/縦書きが出来るようにしたい
CLOSED: [2023-09-10 Sun 09:35]
writing-modeプロパティを追加する。SVG1.1だとtbだがSVG2ではvertical-rl。

[[edraw:data=H4sIANOm9mQAA3WQUUrEMBCGrxLG527arsh2afrqGXysTZqGpomks5uuj907qAcQRUTwAN6moHgL02VZfNCHGRiG75s/yfutJF5xbBgsz2MgjVCyQQbpRRiGTpueQYN4s6bUe7/wy4V1kqZxHNOAAtkK1ytrGCSL5AisB61M+xeWZFlGD1socicqJAODcGd36P/GUJyB4K700XVZtdLZjeFAenS2FQyMNQJIrbRmcFbXNRBa5PI3ZPku3EMxYIB2OjDeKVRGRp3lYj2/AVVV6sjpQ5Y5QAi2ik/aNE2BzIKoNFVjHYMeS4dhbw1GvboNzmR1HOuyUzporjbk0mKjKig+796/Xsbv14dp/zbtP6b9/TQ+TePzND7mdPYWOZWhwpcWP7TPEl6TAQAA]]

ただし、現時点のlibrsvgでは正しく表示されない。
フォントは何を指定してもダメ。もちろんエクスポートすればブラウザで正しく表示される。

境界矩形を正しく計算したい。
text-anchorは縦書きでも本来はちゃんと機能する(librsvgは何かがおかしい)。
+writing-modeはどうやって取得するべきなのか。属性とスタイルの両方を見るべきだし、祖先も見るべきなのか。+ とりあえずwriting-mode属性のみ考慮する。
** DONE 編集開始時にグループ内のmarker使用が消える問題を修正する
CLOSED: [2023-09-10 Sun 10:05]
グループ内で矢印を使っていたときに、編集前には表示されている矢印が編集を開始したとたん消える。
おそらくグループ内まで検索していないのだと思う。
** DONE 非GUI環境でのエラーや警告を修正する
CLOSED: [2023-09-12 Tue 21:03]
最低限エクスポートだけはできるようにする。
エラー:
- mwheel.el
  - mouse-wheel-up-eventとmouse-wheel-down-event (変数)
警告:
- image.c
  - image-size
  - image-flush
  - max-image-size
- image.el
  - image-compute-scaling-factor
  - image-scaling-factor (変数)
** DONE エクスポート前の段階でedraw.elを読み込まないようにする
CLOSED: [2023-09-12 Tue 21:17]
ox-htmlやox-latexが読み込まれた時点でedraw.elが読み込まれてしまう。
実際にエクスポート関数が呼ばれた時点までedraw.elの読み込みを遅延する。
** DONE Version 1.1.0
CLOSED: [2023-11-14 Tue 18:05]
** DONE プリセット/プロパティエディタに全プロパティの保存・復帰機能を追加する
CLOSED: [2023-11-17 Fri 00:28]
1. 下部ボタン(またはメニュー内)にSave to Preset、Load from Presetを追加する。Presetボタンを追加してPresetメニューを表示する？(Delete Presetなんかもできるようになる)
2. Save to Presetを押したらPreset名を入力させて変数に保存する。ファイルにも保存する。未指定はnilとして保存する。すでにある名前の時は上書きするか聞く。
3. Load from Presetを押したらPreset名を入力させてプロパティエディタ内のプロパティを書き替える。保存されているプロパティのみ書き替える。nilはプロパティ未指定を意味するので削除する。

プリセットはtype, subtype, propertiesを持つ。とりあえずtypeとしてはshape、subtypeとしてはそのサブクラス(rectとか)が入る。将来的にはtypeとしてmarkerを入れる。

- プリセット管理関数
  - (edraw-preset-save type name data)
  - (edraw-preset-load type name)
  - (edraw-preset-enum type pred)
  - (edraw-preset-enum-names type pred)
  - (edraw-preset-delete type name)
  - (edraw-preset-rename type old-name new-name)
- プリセット生成・適用メソッド
  - (edraw-preset-type object) => nil
    - (edraw-preset-type shape) => 'shape
    - (edraw-preset-type multiple-shapes) => 'shape
    - (edraw-preset-type alist-properties-holder) => preset-typeスロットの値
  - (edraw-preset-properties object) => nil
    - (edraw-preset-properties properties-holder) => 値nilを除く全プロパティリスト
  - (edraw-preset-subtype object) => nil
    - (edraw-preset-subtype shape) => (edraw-shape-type shape)
    - (edraw-preset-subtype multiple-shapes) => nil
    - (edraw-preset-subtype alist-properties-holder) => preset-subtypeスロットの値
  - (edraw-preset-data object) => '((subtype . ,(edraw-preset-subtype object)) (properties . ,(edraw-preset-properties object)))
  - (edraw-preset-apply object data)
    - (edraw-preset-apply properties-holder data)
- プロパティエディタ
  - 下部にPresetメニューを追加
  - セーブ時に名前を聞いて (edraw-preset-save name (edraw-preset-data target))
  - ロード時に一覧を表示してロードして適用
    - 一覧: (edraw-preset-enum-names (edraw-preset-type target))
    - 選ぶ: completing-readまたはx-popup-menuを使う。選んだ名前をnameとする
    - ロード: data <= (edraw-preset-load (edraw-preset-type target) name)
    - 適用: (edraw-preset-apply target data)
  - 削除
  - 改名
  - クリア
  - 上書き

改善点:
- ○セーブ時の上書き確認
- ○プリセットのクリア
- △ロード時の一覧表示(専用のウィンドウでサムネイル表示)
- △セーブするプロパティの限定(「全図形共通プロパティのみ保存(subtype=nilとして保存)」)
  - 切り替えUI
- +プロパティの「無指定」のセーブ(現在はnilは省いてしまうのでロードしてもプロパティ値が以前の値のままになってしまう。stroke-widthをnilにしたいのにならない★)+
- △不要なプロパティをセーブしない?(基本的にロード時に限定した方が良いことが多い気がする)
- △ロードするプロパティの限定
  - スタイルのみロード(ジオメトリ指定プロパティは読み込まない(rx,ryなど))
  - 切り替えUI
- △一覧に表示するプリセットの限定
  - 切り替えUI
- △プリセットはエディタ毎に持てるべき？(他のエディタとプリセット集合を共有しない別のエディタを作れるべき)　一般にedraw-ui-stateは同様の問題を抱えている。ui-stateクラスを作ってエディタはそのオブジェクトを持つべきかもしれない。
** DONE プロパティ操作メソッドを整理する
CLOSED: [2023-11-17 Fri 11:39]
edraw-get-propertyに代表されるようなオブジェクトのプロパティに対する一般的な操作を整理する。

- edraw-property-editor.elの先頭部分にまとめる。
- edraw-property-editor-targetに対するdefmethodをdefgenericにする。
- edraw-property-editor-targetクラスを削除する(使われていない)。
- edraw-set-propertyを一般化する。
- edraw-get-property-infoを追加する。
** DONE 設定/デフォルト図形プロパティをツール毎に指定出来るようにする
CLOSED: [2023-11-17 Fri 16:34]
カスタムシェイプツールでpath以外(rectやellipse)にも同一の属性を適用したくなる。
とは言えrectツールではstrokeを入れたくないし、pathではfillを入れたくない。
ひょっとして図形種類毎では無くツール毎にデフォルト値を持つべきなのでは？
とは言えやはりtextは同一視できないんじゃない？　カスタムシェイプにtextなんて入れることがある？
手書きツールとpathツールではデフォルトを分けたいかもしれない。手書きツールでは線を描きたいが、pathツールは多角形を描きたいというような場合。

1. edraw-default-shape-properties-for-each-tool変数を追加する。
2. editorクラスにdefault-shape-properties-for-each-toolスロットを持たせる。
3. default-shape-propertiesを使っているところはdefault-shape-properties-for-each-toolも考慮させる。
** DONE edraw-ui-stateをedraw-editor毎に変えられるようにする
CLOSED: [2023-11-19 Sun 17:48]
他のエディタとプリセット集合を共有しない別のエディタを作れるべき。一般にedraw-ui-stateは同様の問題を抱えている。ui-stateクラスを作ってエディタはそのオブジェクトを持つべきかもしれない。

現在のところ必要は無いが、グローバル変数をあちこちからアクセスすると情報の共有範囲が曖昧で責任の所在が分かりづらいので、edraw-ui-stateクラスを作ることにする。

クラス名はあまり良くない気がするが、とりあえずそのままにする。edraw-editorにとっては、同時に開いている他のエディタオブジェクトと即事共有される情報を保持するクラスとなる。最近使った色やプリセットはエディタを二つ並べて使うときに共有されているととても便利。フレーム化の設定は正直どうでもいい。一方でグリッドの表示状態などはedraw-ui-stateに持たせるべきではない。同時に開いている複数のエディタ毎に違う設定にしたい場合があるから。そう考えると、edraw-shared-info辺りだろうか？　とりあえず保留。

property-editorやshape-pickerにもui-stateオブジェクトを引き渡さなければならない(フレーム状態の保存・復元のため)。color-pickerが直接ui-stateに依存するのは良くない。edraw-editor-util.elへ依存したくないから。カラーピッカーはedraw-get-recent-colorsとedraw-set-recent-colorsというメソッドのみを使って、最近使った色を取得・変更することにする。optionsの:recent-colorsにはそのメソッドを適用出来るオブジェクトを指定することにする。edraw-editor-recent-colorsクラスにui-stateを持たせて、そのクラスに対するedraw-get-recent-colors・edraw-set-recent-colorsはui-stateに対するリストの取得・設定とする。
** DONE shape-typeとtagの違いを明確にする
CLOSED: [2023-12-04 Mon 12:57]
しばしば混同して使われている。tagは本来SVG要素のタグ名のはずだが、shape-typeがそのまま使われている場所がある。shape-typeは、今のところタグ名と同じだが、将来的に必ずしもタグ名と同じとは限らない。

例えば何らかの機能を持つ独自のshapeクラスを追加する可能性がある。

- 変数edraw-shape-typesやオブジェクト生成まわり
- 設定まわり
** DONE プリセット/初期デフォルトを設定できるようにする
CLOSED: [2023-12-04 Mon 17:08]
ユーザーが任意のプロパティをエディタ起動時の初期デフォルトプロパティにできるようにする。

特殊なプリセットとして保存することで実現する。プリセットにすることによって、読み込みや書き替え、削除が特別なUIを追加せずにできるようになる。ただし、保存だけは専用のボタンを用意しなければならない。特別な名前もしくはフラグ等の情報をもたせるためには通常の保存で名前を付ける方法ではダメだから。具体的には、プリセットメニューの中に「Save as Initial Rect Shape Default」のような項目を用意する。それを使うと「(Initial Rect Shape Default)」という名前のプリセットが出来る。内部的な名前は、shape-typeなどが割り出せるように特別なリストで表現する。alist-getではstring=ではなくequalを使えば良い。

editor起動時にその特殊なプリセットを検出してdefault-shape-propertiesに反映する。

ツール毎の設定もできなくはない。「Save as Initial Rect Tool Default」みたいな。

+エディタの現在のデフォルトについてもプリセットにするかどうか。「Save as Rect Shape Default」(これはすでに独立したボタンとして存在する)や「Save as Rect Tool Default」があればよい。+ (←プリセットという長期保存となじまないのでやめた方が良い)

「Special Preset」というメニューグループがあって、その中にこれらのボタンがあるとか？

プリセット一覧には、現在のツールや、ツールが生成する図形用の特殊プリセットだけ表示したい。

残り作業:
- [X] プリセット選択メニュー内での表記の改善(initial-default-rectでは良くない)
- [X] プリセット選択メニュー内でのソート(もしくは保存時のソート)
- [X] 「Save as Initial Default」の後にshape名を表示する。場合によっては非表示にする？→「Save as Initial %s Shape Default」にした。
- × 「Save as Default %s」「Save as %s Tool Default」を追加する。日本語訳は「デフォルトの%sとして保存」「%sツールのデフォルトとして保存」。ui-stateではなくeditor毎に持つデータなので、本来はここには入れるべきでは無い。やはりツール設定メニューが必要？
- [X] 「Save as Initial %s Tool Default」を追加する。日本語訳は「編集開始時の%sツールのデフォルトとして保存」(「Save as Initial %s Default」は「編集開始時の%sのデフォルトとして保存」)
** DONE edraw-initializeを廃止してinitialize-instanceを使う
CLOSED: [2023-12-05 Tue 00:04]
CLOSでオブジェクト構築時の初期化をカスタマイズするには、initialize-instanceをオーバーロードすべきらしい。

[[https://www.reddit.com/r/emacs/comments/7fnfju/how_to_customize_constructors_for_eieio_objects/][How to customize constructors for EIEIO objects? : emacs]]

#+begin_src elisp
(require 'eieio)

(defclass thblt/once-and-twice ()
  ((once
    :initarg :once
    :initform :once)
   (twice)))

(cl-defmethod initialize-instance :after ((obj thblt/once-and-twice) &rest _)
          (oset obj twice (* 2 (oref obj once))))

(thblt/once-and-twice :once 3)
#+end_src

~(edraw-initialize editor)~ と毎回書かせるのは良くないので、この方法を使うべき。

- [X] (edraw-initialize (EDITOR edraw-editor)) 互換性維持のため空の実装を残す。
- [X] (edraw-initialize (PICKER edraw-color-picker) &optional OPTIONS) 削除する。
- +[ ] (edraw-initialize (DISPLAY edraw-color-picker-display-frame) PICKER)+
- +[ ] (edraw-initialize (DISPLAY edraw-color-picker-display-overlay) PICKER)+

edraw-color-picker-display-*についてはpickerとの関連付けを含むのでそのままにする。
** DONE default-marker-propertiesもdefault-shape-propertiesと同じように扱う
CLOSED: [2023-12-05 Tue 14:23]

default-shape-propertiesやdefault-shape-properties-for-each-toolは、edraw-editorオブジェクト内のslotにコピーしている。

マーカーはグローバル変数edraw-default-marker-propertiesを直接操作しているので良くない。default-shape-propertiesと同じように扱うべき。

ついでに、プリセットで初期デフォルトとして保存する機能に対応すべき。
** DONE edraw-editorにkeymapスロットを追加する
CLOSED: [2023-12-05 Tue 17:10]
~:keymap~ でエディタのキーマップを直接指定出来るようにする。
edraw-editorオブジェクトの構築が簡潔に書けるようになるので。
** DONE ?キーでツールのヘルプを表示する
CLOSED: [2023-12-28 Thu 10:36]
同時に、ツールを切り替えたときにヘルプを表示しないオプションを追加する。

1. edraw-editor-show-help-for-selected-toolを作る
2. ?キーにedraw-editor-show-help-for-selected-toolを割り当てる
3. ツール切り替え時にヘルプを表示するかをカスタマイズできるようにする
   (edraw-editor-show-help-when-selecting-tool-p変数)
** DONE パスに矢印を付けるキーを割り当てたい
CLOSED: [2023-12-28 Thu 12:24]
~p m s a~ (property marker start arrow) さすがにダメだよね？

~p <~ と ~p >~ というのはどうだろう。

押すたびに次のマーカー種類に変更する。

- edraw-set-marker-start-next-selected
  (edraw-editor-set-marker-start-next-selected)
- edraw-set-marker-end-next-selected
  (edraw-editor-set-marker-end-next-selected)
- edraw-set-marker-start-next
- edraw-set-marker-end-next

pathに対するメニューと選択オブジェクトに対するメニューにNext Typeを追加する。
** DONE メインメニューの「選択オブジェクト」を右クリックメニューと同じにする
CLOSED: [2023-12-28 Thu 13:35]
複数選択をして右クリックした時に出るメニューとメインメニューの「選択オブジェクト」を選んだときに出るメニューが異なっている。メインメニューの方には「設定」などが無い。同じであるべきでは無いか。
違いを調べるところから。
** DONE 選択オブジェクトに対するキー操作をコンテキストメニューに表示する
CLOSED: [2023-12-28 Thu 21:24]
図形を右クリックした時のメニューにキー操作が表示されない。複数選択して右クリックした時には表示される。

なぜなら、選択されていない一つの図形または一つの図形が選択されているときのその図形を右クリックした時に表示されるメニューは、現在選択されている図形ではなく右クリックした図形に対する直接的な操作になるから。

しかし、右クリックした図形が現在選択されている唯一の図形と一致するならば、メニューに選択図形に対するキー操作を表示しても良いのではないか。そうすることで、キー操作をユーザーに分からせる効果がある。

~(edraw-get-actions shape)~ において、shapeが唯一の選択オブジェクトと一致する場合に限り、キー割り当てを表示できるメニューを返せば良い。そのとき二通りの実装が考えられる。shapeが唯一の選択オブジェクトと一致する場合に:

- 選択オブジェクトに対する操作コマンドをメニューに載せる
- メニューに載せるメソッドは変えずにキー操作だけ割り出して載せる

後者の方が動作としては筋が良いが、割り出す処理が手間。

前者は割り出す処理が不要だが、具体的なメニュー表示の実装によっては不可能。しかし、調べた限り問題なく処理が出来そう。shapeに対するedraw-get-actionsは、edraw-popup-context-menuのみが呼び出しており、そこではそのメニューとshapeを引数にしてedraw-popup-menuを呼び出している。edraw-popup-menuは選択されたのがコマンド(commandp)であれば引数shapeを使わないので問題なくエディタのコマンドを呼べるはず。ポイントが他の場所にあるときでも大丈夫かは要確認。

動作が変わるのが怖いので前者で実現する。
** DONE 二つの画像を選択して右クリックからHrefを変更しようとするとエラー
CLOSED: [2023-12-28 Thu 22:17]
edraw-multiple-shapesに対するedraw-edit-hrefが実装されていないから。
しかし、fillとかと同じようにedraw-properties-holderに対して実装すべき？
いや、edraw-properties-holderに対してedraw-edit-fillがあること自体がおかしいような気もするけど。

複数のテキストに対するfont-size設定も同様にエラーになる。

うーん、まぁ、edraw-properties-holderに対して実装するしか無いかなぁ。一応hrefやfont-sizeプロパティがあることを確認して入力・設定を行う。
** DONE プロパティエディタ/色編集フィールドに色サンプルを表示する(+補完)
CLOSED: [2024-01-04 Thu 17:19]
color widgetの実装を参考にする。
[[elisp-function:widget-color-value-create]]やら[[elisp-function:widget-color-sample-face-get]]やらが参考になる。

:formatを"%v %{      %}"のようにして、%vの中で値と一緒にボタンを追加する。
本当はfaceではなくSVGで色サンプルを表示した方が良い(枠線が描けたり、半透明が表現できたりするので)が、色々面倒なのでそのうち気が向いたら。

ついでに:completionsを指定したので、フィールド上でカラーキーワードを補完できるようになった。
** DONE widget/デフォルトプロパティ設定をdefcustomにしたい
CLOSED: [2024-01-25 Thu 20:47]

[[*プリセット/初期デフォルトを設定できるようにする][プリセット/初期デフォルトを設定できるようにする]]によって既に初期デフォルトを変更できるようになっているが、一応defcustomでも設定できるようにしておく。同時に設定された場合プリセットの方を優先する。

まずEmacs Widget Libraryの勉強をした。Widgetの作成方法について詳しく調べた。ブログにもいくつか記事を書いた。

- [[https://misohena.jp/blog/2024-01-07-study-of-emacs-widget-library.html][Emacs Widget Libraryについて調べる | Misohena Blog]]
- [[https://misohena.jp/blog/2024-01-16-define-web-color-widget.html][Webカラーwidgetを作る(Emacs Widget Libraryについて調べる2) | Misohena Blog]]

edraw-widget.elを追加し、Webカラーを編集するwidget(edraw-color)とプロパティのリスト(決まった型のプロパティ群を持つplistまたはalist)を編集するwidget(edraw-attribute-list、edraw-attribute-plist、edraw-attribute-alist、edraw-properties)を作成した。

次の変数をdefvarからdefcustomへ変更し、:typeに上記widgetを適用した。

- edraw-default-document-properties
- edraw-default-shape-properties
- edraw-default-shape-properties-for-each-tool
- edraw-default-marker-properties

元の初期値はedraw-package-default-という名前のdefconstに、上記カスタマイズ変数はそこから変更するプロパティだけを指定する形とした。それによってユーザーがカスタマイズした後でも将来プロパティを増やしたときに適切な初期値を設定することが出来る。

** DONE 右クリック時にcontext-menu-modeが優先される問題を修正する
CLOSED: [2024-02-01 Thu 16:34]
[[https://github.com/misohena/el-easydraw/issues/21][edraw context menu interferes with context-menu-mode · Issue #21 · misohena/el-easydraw]]

[[elisp-function:context-menu-mode][context-menu-mode]]はグローバルマイナーモード。minor-modeのキーマップ([[elisp-variable:context-menu-mode-map][context-menu-mode-map]])に割り当てられたdown-mouse-3に対するコマンドでメニューを開いている。

なので、エディタのkeymapにdown-mouse-3を追加してしまう方が良さそう。他のマウスのボタンも同じようにして既に定義されている動作を上書きしているので。

同様に mouse-3 を使用しているところは他にもある。検索した限り:
- edraw-orgのインライン画像
- プロパティエディタ
- シェイプピッカー

インライン画像はエディタと同様にオーバーレイのキーマップで対処可能。

プロパティエディタとシェイプピッカーはメジャーモードのキーマップでコンテキストメニューを出している。そこでdown-mouse-3を無視しても、マイナーモードのキーマップの方が優先されてしまい、context-menu-modeを無効化できない。

マイナーモードマップについてマニュアルをあたったところ、[[elisp-variable:minor-mode-overriding-map-alist][minor-mode-overriding-map-alist]]という変数があった。メジャーモードからマイナーモードの割り当てを上書きできる。ちょうど良い。それを使ってcontext-menu-modeのキーマップを全て無効化した。

down-mouse-3以外のキー割り当てを残すか迷ったが、context-menu-modeを使っていないのにcontext-menu-mode-mapにアクセスするのがためらわれたのでやめておいた。context-menu-modeはmouse.el内にあり、mouse.elはおそらく必ず読み込まれるのではないかと思うが、確信が無かった。
** DONE テキスト/空行が無視されるのを直す
CLOSED: [2024-02-12 Mon 22:54]

[[edraw:data=H4sIAC0iymUAA7VSvU7DMBB+FeuYEycpP00VZ2NAQrxDiJ3ESmJXtmlSNjowsDHyCLwCEi9Dh74Gl6QCBhB0YPCdTvf96eTErkrSt42yDCrnlgtKu67zu5mvTUmjIAgoImCCLPpGqvo7YBjHMR23QDrJXcUgPA2AVEKWldsPK2Gs1AonP4Q0MSJ3pGeAm/VYfyRKzkBwk3XedZbXpdE3igOxzuhaMFBaCSCFbBoGR0VRAKFpUn4lab5GPyd6R4bicZFrk7kxC0oJg8HFmOIY3TDSHFuhlfOsvEWHcA4TMVN5pQ2DVnLefJpGUTTo22WmSN5kFm85wifZSS+9vLg6DxM6on4F/xFHOGaORDupz/5V/eQQVjiwyMGMwefs7f5x9/yye3rd3m22m4cPEToQsZX48E+m7zr08DS7AgAA]]

tspanのdyはdy="1,2,3"のように内容の各文字に対して指定出来るらしい。そして数値に対応する文字が無い場合は効果が無いと規定されているとのこと。なので空の文字列の場合は効果が無い。

空白文字を入れて回避しようかと思ったが、アンダーラインなどに影響が出ては面白くないのでやめた。実際には空白を入れても何も効果が無かった。

y=を指定しようとも思ったが、x=と同様にテキストが動くたびに更新しなければならないのでやめた。

dy=の値を空行があるたびに増やし、空行以外でリセットする方法に落ち着いた。

ちなみに増分を1.5などにすれば行間を増やすことも可能。

空白だけを含む行の扱いは非常に微妙でよく分からない。tspan要素の前後に改行や空白を入れると空行扱いされたり、微妙に(tspanの前のインデントの分だけ?)位置がずれたりする。とりあえずインデント等は一切無しで出力する分には、空白が入っている行は普通の行として扱って問題ないみたい。
** DONE テキスト/行間を広げたい
CLOSED: [2024-02-13 Tue 09:46]
SVG1のレベルでは標準では無理なので独自のプロパティを追加する。
data-edraw-text-leadingで行送り量を設定できるようにする。
Photoshopとかの行送り設定と同じ。line-heightよりも計算がやりやすい。
境界矩形計算も修正が必要。

負の値に注意。
[[edraw:data=H4sIAJWsymUAA7VVy47TMBT9FcuzAalpbCdN21FTCSQESAMLNjDsTOMkVlO7ctymw44/QWINC34JCfEZ+NFMX9OhzCNq2vj6+jzuzVVH9bIAq1kl6hSWWs/Pw7Bpmm4TdaUqQoIQCk0G9Cnnq4qL6U2JeDgchm4XgoZnukxhDyEISsaLUqcQD8xiyVTNpTCrLobjUcbyGvAshSxTtAns0kRnVE2Z2o0HKKBKyQYCv/veMyTt+tWaxQTmitVMLdmzes4m+h3VXKZQSMEMPWfNc7lKYYARsDexHwgUyz+kMHYPlyk0Eak4EwaPLrSEoNZKTlmLkvOqSuEZcpfRO6e6BEbsG4PYCfoWuNMHcQd9hCAcj0Kv0DxYf+ORMqrAyrFcue+j1dpU4BOdTAslFyI7IibPc0dWbB+S2dW2PII6GKELHLvfDVDrZB0I1npIC+6Jwj2keI0U3xnpIOkAZvuU4028hWiwtnA/qMQjJR7I9aWtP9n0JfGNsg0xXSPDf9m7pp7kxFynYMePiI2JB+89AvbgHtCub340AiZMSxaqenJ2MPBPfbtw+/KSu75ymq00yKXQQc0/M+/Glgd5D9aK283pjFdm43IBXkpd8gkE9mhAxaSUKoUznmXVZvCsnfHF67cv8Ci0eceJ4gciIi3R6RX8//GI2klLrufD+9qIOaJ21/gxp1uVj0zeTRV8OKZkj4jsELkZ6bkMHN0CtMWHB3uaak2V3m3V7+/ffn35UTGacVGc5qxF2SW6xdjAy476xtifn18P+cLC3Obfe/wXtE7RJOUHAAA=]]

writing-mode:horizontal-tb
[[edraw:data=H4sIAMe3ymUAA52UXW+CMBSG/0pzvB22FLJMY7lbliVu97vsaIFGbA1Uwf36tWVOF8fUXUDTnPc9H084LNpdifp1rVsGlbWbOcZd1027ZGqaElNCCHYKGCTzvlZ69Zswns1mOEQBdUrYikFCCaBKqrKyDKi/7GTTKqMZxNMYskUjc4t6Bi6yD+9RoxIMpGh4F73zfFU2ZqsFoNY2ZiUZaKMloELVNYNJURSAcLYoT01G7F09K3uLCqNt1KoP56ND4difro0Hd4RowdeqdoG3LXoytlI5IG+NuM4r0zBYKyHqY0VKqU/ebrhGec1bBzLIHQx5SJwtn18f4wUOqktiJHxXcj246L9cybcLe+XvwwtueTQgGtJJLpQuGaTkx3Qj44+wOkEa35O/0QTB1Wy8OoyZkhvYnLlG2JzMOwom8mTGaRzRXgGHphfg0PQWOF4dxoxuonNuO8Oz4bZCbpleKLlzzS8TEs7jAk7c8h9u0dcS08MXNGyn20hcusf9S7JPHuE9dXMEAAA=]]

writing-mode:vertical-rl (縦書きはlibrsvgのバグ多し)
[[edraw:data=H4sIAF+1ymUAA7WUvW7bMBSFX4Vg1soUpTSNA1Nrl/YBOrIiJRGmSENiIqdbxwIp+gCZumTs0qFGX6dJ08foJWXBShC7idEM+iF4zuHlR+nO2rMSLWttWoYr5xYnhHRdN+nSiW1KksRxTECBe8nJUiszf0hIp9MpCbMYdUq4iuHkMMaokqqsHMPpMQzOZNMqaximE4qzWSNzh5YMw8x5uG81KsGwFA3vovc8n5eNPTUCo9Y1di4ZNtZIjAqlNcMHRVFgRLJZOTZZcQ7rObl0qLDGRa36AL4EksOw4LXSUMK7U/TaukrlUEqjnDJlVFsBSijcqZzrqNGh1iNwQuHUJ/jUiJu8sg3DtRJCb4pJksSv2y64QbnmLTAOcuAkh6DsdnX1+3L16+Pnmy/fb35czUjQ/8uGBBQQUVnj7PrnxZ+vF7eX3/awrj7dsxIvX7MS3PGoR9iHSC4ACsP+gEZb3EXrYTyPOwQY0eMN6p378sJ9UIYFAhDY1NNQ3rPuRDmmtRWrz3lGlmn8SJZeuA/LsIAH8mSUd53bSC64qxD81W9hBy+S+I1/HHrn0AkOoAsNo2joJsOn2rcJsu47d0V0lJEXSTimsWvoRjTetKmjvm/RHuqr+H9mh3cfnvbp6bOkJy/XHwTt40kJF3T77C81YcTgFQYAAA==]]

writing-mode:vertical-lr
[[edraw:data=H4sIAFK0ymUAA7WUvW7bMBSFX4Vg1srUTxrEgak1S/oAHVmRkghTpCExkdOtY4EUfYBMXTJ26VCjr9Pm5zFySVmwEtiuHSSDJBM659zLj/KdNBcFmldKNxSX1s5OCGnbdtQmI1MXJA7DkIACd5KTuZJ6uk4Yjcdj4t9i1EpuS4rjwxCjUsiitBQnx7C4EHUjjaY4GkU4ndQis2hOMby59PeNRskpFrxmbfCJZdOiNueaY9TY2kwFxdpogVEulaL4IM9zjEg6KYYmwy+hnhVzi3KjbdDIz+CLIdkvc1ZJBS18PEenxpYyg1ZqaaUugspwUELjVmZMBar2vR6BExqPXIJLDZjOSlNTXEnO1aqZOI5d3WbGNMoUa4CxlwMn0Qel94ubu+vF3y/fbr//uv19MyFe/z8b4q4BUeH035+rhx9X99c/93cuvj5zEqdekuLMsqAD2GUIxgEJxe54Bhvcxmo9nN2OAFbR8Qr01m054UtA+gKOB+xpP5BPnVtBDllthBo4qm9HMgl3JOmELyHpCzgewd4on1k3sZwxWyL4T3+APbyLwzP3OHTWfg4cwAzqV0E/S/pPtRsSZDl1noqi1biJwtUcOuoGU7QkFw1LZXnsz3On8K2udZX9b1c6GdR+/fj4fRefdOmkgAuGffoIG4yaFxQGAAA=]]

プロパティエディタ上でのプロパティ名が長くなるのでdata-edraw-の表示を省略したい。完全に消すのも何なので「(ed)text-leading」みたいなのでどう？
** DONE テキスト/プロパティエディタ上で複数行編集が簡単にできるようにする
CLOSED: [2024-02-13 Tue 14:10]
現状でもC-q C-jで改行できるが、wid-edit.elのtext widgetと同じようにキーマップを変えることで普通にRETで改行できるようにする。

RETで改行できるようになると自動インデントが邪魔なので無効化する。[[elisp-variable:indent-line-function]]に何もしない関数を指定すれば良いはず。

また、二行目以降を正しくインデントする。line-prefixとwrap-prefixを指定すれば実現可能。widgetを配置した後にput-text-propertyで設定してしまえば十分。fieldの前の空白にも設定しておくことで、値が空になっても次の入力にはそのテキストプロパティが継承される。また、フィールド直後の改行にも設定しておかないと、最後が改行で終わる場合にインデントされない。
** DONE アンカーポイントをDeleteキーで削除しようとするとエラーになる
CLOSED: [2024-02-13 Tue 14:49]
テキストのアンカーポイントを選択してDeleteキーを押すと次のようなエラーになる。
: cl-no-applicable-method: No applicable method: edraw-delete-point, #s(edraw-shape-point-text ...
空の文字列に対して範囲選択すると点が表示され、それを選択してDeleteキーを押すとこうなる。
出来ればテキストそのものを削除したい。

そもそもpath以外の全ての図形でエラーになる。edraw-delete-pointを実装しているのはedraw-shape-point-pathのみだから。

なので一般的なedraw-shape-pointに対するedraw-delete-pointを実装して、実行時には明示的なエラーメッセージを表示する。そしてテキスト(edraw-shape-point-text)に対しては、親オブジェクトを削除する。
** DONE プロパティエディタ/値の自動更新時にポイントが動かないようにする
CLOSED: [2024-02-13 Tue 15:03]
接着されたテキストのテキスト内容を編集しているとき、境界矩形が変化して接着に従ってx,y属性が変化し、そのときにポイントがyプロパティの場所へ移動してしまう。

+なぜ移動してしまうのかよく分からないが、とりあえず変更フック→タイマーで更新するときにsave-excursionした。+

一応もう少し調査した。[[elisp-function:widget-field-value-set]]がgoto-charを使っているにもかかわらずsave-excursionしていないのが原因。widget-value-setの唯一の使用箇所であるedraw-property-editor-prop-widget-value-set-without-notifyでwidget-value-setする前にsave-excursionした。通知先でポイントを移動したい場合がもしあったら困るが、そんなものは無いと信じる。
** DONE パス編集/path d=属性の字句区切り解析を直す
CLOSED: [2024-03-02 Sat 18:25]

TobiasZawadaさんからプルリクエストあり:
[[https://github.com/misohena/el-easydraw/issues/23][comma/whitespace separators in svg path descriptors arguments are optional #23]]

数字間の空白も省略可能なのだとか！　省略可能とは知っていたけれど、数字の間を符号で区切るという発想はなかった。

https://www.w3.org/TR/SVG11/paths.html#PathDataBNF をよく見ると"M 100-200"という例がちゃんと書いてある。

プルリクエストを確認し、若干修正してもらってからマージした。

この関数([[elisp-function:edraw-path-d-parse]])には細かく見ていくといくつか問題がある。

- dの末尾まで解析が終わったか確認していない
- コマンド間の文法的な正しさを確認していない(例えば最初にMかmが来なければならないこと)
- コマンド名の正しさを確認していない
- コマンド引数の数を確認していない
- M1e2233e4を M 1e2233 e 4 と解析してしまう
- コマンド名の正規表現は大文字のみ指定されている([[elisp-variable:case-fold-search]]の影響を受ける)

ただし、この関数は[[elisp-function:edraw-path-cmdlist-from-d]]からしか呼ばれず、そこではparse後のリストをある程度チェックしている。コマンド名や引数の数はそこでエラーになる。しかしいくつかの点は相変わらずスルーされている。

- dの末尾まで解析が終わったか確認していない
- コマンド間の文法的な正しさを確認していない(例えば最初にMかmが来なければならないこと)
- コマンド名の正規表現は大文字のみ指定されている([[elisp-variable:case-fold-search]]の影響を受ける)

最初にMまたはmが来るかはとりあえず保留。万が一動かなくなっても困るし。

その他の末尾まで解析とcase-fold-searchは直した。

その他numberの連接で何かおかしな事が起きないか検討したが、一応大丈夫そう。

numberの全パターン:

11         +11
11e33      +11e33
11e+33     +11e+33
.22        +.22
.22e33     +.22e33
.22e+33    +.22e+33
11.22      +11.22
11.22e33   +11.22e33
11.22e+33  +11.22e+33
.22        +.22
.22e33     +.22e33
.22e+33    +.22e+33
11.22      +11.22
11.22e33   +11.22e33
11.22e+33  +11.22e+33
11.        +11.
11.e33     +11.e33
11.e+33    +11.e+33

- 末尾: 整数部, 小数点, 小数部, 指数
- 先頭: 符号, 整数部, 小数点

- 組み合わせ (let ((str "1e34e5")) (when (string-match (format "\\(%s\\)\\(%s\\)*" edraw-path-d-number edraw-path-d-number) str) (list (match-string 1 str) (match-string 2 str))))
  - 整数 符号     : 111+999   OK 受理(111 +999)
  - 整数 整数     : 111999    NG 受理(111999)
  - 整数 小数点   : 111.888   NG 受理(111.888 nil)
  - 小数点 符号   : 111.+999  OK 受理(111. +999)
  - 小数点 整数   : 111.999   NG 受理(111.999 nil)
  - 小数点 小数点 : 111..888  OK 受理(111. .888)
  - 小数 符号     : .222+999  OK 受理(.222 +999)
  - 小数 整数     : .222999   NG 受理(.222999 nil)
  - 小数 小数点   : .222.888  OK 受理(.222 .888)
  - 指数 符号     : 1e3+999   OK 受理(1e3 +999)
  - 指数 整数     : 1e3999    NG 受理(1e3999 nil)
  - 指数 小数点   : 1e3.888   OK 受理(1e3 .888)

1e234e5のような異常な文字列が次のような正規表現では数列の途中で区切られてしまうが……

#+begin_src elisp :results pp
(let ((str "1e234e5"))
  (when (string-match (format "\\(%s\\)%s?\\(%s\\)" edraw-path-d-number edraw-path-d-comma-wsp edraw-path-d-number) str)
    (list (match-string 1 str) (match-string 2 str))))
#+end_src

#+RESULTS:
: ("1e23" "4e5")

次のように1回以上の繰り返しの正規表現にすると単にe5の前でマッチングが終わるだけで済む。

#+begin_src elisp :results pp
(let ((str "1e234e5"))
  (when (string-match (format "\\(%s\\)\\(%s?\\(%s\\)\\)*" edraw-path-d-number edraw-path-d-comma-wsp edraw-path-d-number) str)
    (list (match-string 1 str) (match-string 2 str))))
#+end_src

#+RESULTS:
: ("1e234" nil)

その後e5がeコマンドの引数5として認識されてしまうのだけど、それは一応エラーになるので大丈夫。
** DONE edraw-modeでcontext-menu-modeが優先される問題を修正する
CLOSED: [2024-03-05 Tue 21:33]
右クリックした時にコンテキストメニューが出てきてしまう。
[[*右クリック時にcontext-menu-modeが優先される問題を修正する][以前の問題]]の修正漏れ。
** DONE edraw-modeでedrawが生成したSVG以外をエラーにする
CLOSED: [2024-03-06 Wed 23:18]
[[https://github.com/misohena/el-easydraw/issues/25][Scrolling & Zooming not working for SVG imported from dvisvgm · Issue #25 · misohena/el-easydraw]] より:

#+begin_quote
The current state is not really satisfying since it is possible to switch to edraw-mode for any SVG image. But, one does not get what one expects.
#+end_quote

というので g#edraw-body が存在しない場合はedraw-modeが立ち上がらないようにした。
** DONE 長さの単位に対応する
CLOSED: [2024-03-07 Thu 18:00]
[[elisp-function:edraw-svg-transform-parse-numbers]]という関数に次のコードがある:
#+begin_src elisp
(pcase unit
  ((or 'nil "") num)
  ;; angle to degrees
  ("deg" num)
  ("rad" (radians-to-degrees num))
  ("grad" (/ (* num 180) 200.0))
  ("turn" (* 360 num))
  ;; length to px
  ;;@todo relative
  ("cm" (/ (* num 96) 2.54))
  ("mm" (/ (* num 96) 25.4))
  ("Q" (/ (* num 96) 2.54 40))
  ("in" (* num 96))
  ("pc" (/ (* num 96) 6))
  ("pt" (/ (* num 96) 72))
  ("px" num)
  (_ (cons num unit)))
#+end_src

これを一般化できないだろうか。

[[elisp-function:edraw-svg-attr-length-to-number]]を修正すれば良いが
- em, exの情報をどこから持ってくるか。
- %は縦と横を区別する必要がある。

次のようにする。
- elementから親をたどれるようにすべき。
  - 基本
    - edraw-dom-set-parent
    - edraw-dom-get-parent
    - edraw-dom-update-parents
  - setする関数
    - edraw-dom-insert-first
    - edraw-dom-insert-nth
    - edraw-dom-append-child (新規追加)
- 継承された属性値を求める関数を追加すべき。
  - edraw-svg-attr-length-or-inherited
- %は属性によって基準となる値が変わる。(edraw-svg-attr-length-percentage)
  - font-sizeは属性を親からルートへたどって探す。
  - ビューポートサイズは一番近い祖先svg要素を探す。
- emやexはfont-sizeを基準に決めるしかない。
  - edraw-svg-attr-length-em
  - edraw-svg-attr-length-ex
- [[elisp-function:edraw-svg-attr-length-to-number]]に引数elementとattrを追加する。

無指定の場合のデフォルト値はDPIが96、フォントサイズが16となっている(手元のEmacsで実際に試してみた限り)。emはフォントサイズで代用し、exはその半分とする。

やり残し:
- 要素の親子関係は不正確(属性値を解決するのに十分な程度しか処理していない)
  - edraw-dom-set-parentを呼んでいない箇所がある
  - remove時にnilにしていない
  - できれば :-edraw- の表記はedraw-dom-svg.el側でサポートしたい

 - プロパティ情報 :to-number は廃止したい(文字列を数値へ変換するには対象オブジェクトとプロパティ名が必要。それ込みで:to-numberを生成するのは無駄)
  - プロパティエディタは単位を保持したままホイール・ドラッグ操作をしたい
    (:to-numberと関係あり)

[[edraw:data=H4sIAAiC6WUAA3WS0W6DIBSGX4WcZpeK2narjXi37AHWm106ASWl0CCtdk8/jsVsS9YQ5ej5///zGKrh2pHppM3AoPf+vKd0HMd0XKfWdbTIsowGBdwl+0krc/xPmJdlSecukFFx3zPYPmdAeqG63jPYFOHhKtygrGGQpznUlROtJxOD0LnN94dGxRkI7pox+WzaY+fsxXAgg3f2KBgYawQQqbRmsJJSAqF11f02WX4LPKG1Og8i+pKF9gTEBf5LOlfTUrXh3TbDYorFwlvlGa4FecfTOA9GrWMQ7sscOSZE5FwHXY6DBh1ufz+qeEhbyR2uGejF5Im0xieD+hKYG4OL4h682aAPBbI5KR06HxfyZn2vWiDoThrT9tYxOCnO9c9fjMz68Pp+qCgq64p24Qpnof4G//6jyjMCAAA=]]
** DONE text要素のx、y属性を単位指定に対応させる
CLOSED: [2024-03-07 Thu 18:36]
textのxとyはlengthのリストなので特別処理をしている。
** DONE DOMの親を取得する機能をちゃんとする
CLOSED: [2024-03-07 Thu 21:39]
[[*長さの単位に対応する][長さの単位に対応する]]で百分率の計算に必要な部分は実装したが、全体的にはちゃんと実装していない。正しい親が取得できないシチュエーションがある。
- edraw-dom-set-parentを呼んでいない箇所がある
- remove時にnilにしていない

対策:
- できるだけノードの追加・削除にかかわるdom-関数は使わないようにする。
- 代わりにedraw-dom-関数を整備する。
- そのedraw-dom-関数ではedraw-dom-set-parentとedraw-dom-reset-parentを適切に使用して親を記録する。
- edraw-dom-parentを作成し、親情報が適切ならそれを使い、そうでなければdom-parentを呼び出すようにする。
- ノードを作成するdom-nodeもできるだけ使わないようにする。
- 代わりにedraw-dom-elementやedraw-svg-rect等を使うようにする。
** DONE DOMの内部使用属性名の処理をedraw-dom-svg.elにまとめる
CLOSED: [2024-03-08 Fri 00:44]
現在はedraw.elで :-edraw-shape を使っており、一方でedraw-dom-svg.elで :-edraw-parent-element を使っている。

次の関数がedraw.elにあるが、これはedraw-dom-svg.elにあるべきではないか？
- edraw-editor-internal-attr-p
- edraw-editor-remove-internal-attributes-from-svg
上の関数は削除した。

次の関数を追加した。
- edraw-dom-attr-internal-p
- edraw-dom-remove-internal-attributes
- edraw-dom-remove-internal-attributes-from-tree

edraw-dom-copy-treeはedraw-dom-attr-internal-pに該当する属性は複製しないようにした。

edraw-svg-printについても後でそのようにする。
** DONE edraw-svg-printが内部使用属性を必ず出力しないようにする
CLOSED: [2024-03-08 Fri 01:04]
edraw-svg-printのattr-filter引数には必ずedraw-svg-print-attr-filterが指定されているので意味が無い。
edraw-dom-attr-internal-pを作ったので、必ずそれを使って内部使用目的の属性は出力しないようにする。
edraw-svg-print-attr-filterもはや必要ない。しかし、マニュアルにも書かれている関数なのでひとまずobsoleteにする。常にtを返すようにする。
edraw-svg-printやedraw-svg-to-stringに'edraw-svg-print-attr-filterを引き渡しているところはnilへ変更する。
** DONE svg-imageの使用をedraw-svg-to-imageに置き換える
CLOSED: [2024-03-08 Fri 01:16]
そうすればsvg.elへの依存はかなり減るはず。
** CANCELLED transform属性の長さの単位に対応する
CLOSED: [2024-03-08 Fri 11:09]
[[elisp-function:edraw-svg-transform-parse-numbers]]という関数にTODOコメントがある。
[[*長さの単位に対応する][長さの単位に対応する]]でlength値は既に対応したので、同じように対応すべき。

[2024-03-08 Fri]SVGのtransform属性はCSSプロパティと異なり単位を指定出来ない。
[[*SVGのtransform属性の構文解析を正確にする。][SVGのtransform属性の構文解析を正確にする。]]
** DONE SVGのtransform属性の構文解析を正確にする。
CLOSED: [2024-03-08 Fri 12:28]
[[https://www.w3.org/TR/css-transforms-1/#svg-syntax][7.2. Syntax of the SVG transform attribute - CSS Transforms Module Level 1]]に書かれているように、後方互換性のためにSVGのtransform属性の構文はCSSプロパティとは違う。これを区別できるようにすべき。

一部余計な関数(translateXとか)が使えてしまうが、まあいいか。
** DONE svg要素のwidth=, height=が単位付きの場合やviewBox=の扱いを改善する
CLOSED: [2024-03-08 Fri 22:23]
width、height、viewboxはオリジナルを別途保持する。これによって単位を破壊しないようにする。

ビューのデフォルト表示範囲はviewBoxと同じであるべき。viewBoxが無い場合はwidthとheightをピクセル単位に変換したものを表示範囲とする(左上は0,0)。とりあえずスケールまではviewBoxとwidth, heightとの関係に合わせなくても良い。編集はviewBoxを基準にすべき。

背景をviewBoxに合わせるかどうかは迷う。おそらく合わせた方が良い。カスタマイズオプションで設定するか？([[elisp-variable:edraw-editor-background-align]]を追加)　本当はsvg内にどこに合わせるかの状態を持たせなければならない。data-edraw-background-alignみたいな属性が必要になる。まぁ、そこまでは要らないかなぁ。本当に必要なら自分で背景rectを置けば良いだけだもんね。

まとめ:
- svg要素のwidthやheightが単位付きの場合、その元々の指定をできるだけ維持する。
- svg要素のviewBoxが指定されている場合、デフォルトビュー範囲はそのviewBoxの範囲とする。viewBoxが指定されていない場合は、svgのwidthとheightをピクセル単位に直したものを範囲とする(左上は0,0)。
- 背景矩形はviewBoxの範囲に合わせる。カスタマイズオプション([[elisp-variable:edraw-editor-background-align]])で昔の挙動にもできる。
** DONE 親リンクまわりを改善する
CLOSED: [2024-03-09 Sat 22:16]
- edraw-dom-update-parents→edraw-dom-update-parent-linksへ改名
- edraw-dom-remove-parent-linksを追加
- 親リンクの作成を抑止できるようにする (edraw-dom-inhibit-
** DONE edraw-dom-elementで空の属性や空の子どもをどう扱うか考える
CLOSED: [2024-03-09 Sat 22:29]
できればnilは自動的に削除したい。

(edraw-dom-element :id "hoge" nil child2 child3)のときnilは属性なのか子なのか。
→現在は属性名として扱われている。

値がnilの属性はどうなるのか。
(edraw-dom-element 'g :id nil)
→そのまま値がnilとなる。

edraw-svg-printは属性名がnilの場合や値がnilの場合はどうしているのか。
(edraw-svg-to-string (dom-node 'rect '((nil . 1) (x . nil))) nil nil)
属性名nilはnilという属性名で出力される。
属性値nilは空文字列で出力される。
*属性名としてnilを指定することはありえない。*
→なのでnilは無効な子として扱う。

nilの子は自動的に取り除く。

複数の:childrenを書きたい。
** DONE text-lineクラスをedraw-text-lineへ変更する
CLOSED: [2024-03-10 Sun 19:56]
プレフィックス無しでtext-lineはさすがに他と被ることがあり得るのでは？(htmlに埋め込んだ場合)
しかし今更変えられるのか。余計な問題が増えるだけなのではないか。
とりあえずこれからはedraw-text-lineを出力し、解析はどちらも受け入れるようにする。
ちなみにInkscapeはtspanに sodipodi:role="line" という属性を付けることで行を表している。
** DONE テキストの内容処理を改善する
CLOSED: [2024-03-10 Sun 21:19]
text要素以下を文字列へ変換する方法を改善する。現在はstringまたはtspan.edraw-text-lineのどちらかがあることしか考えていない。.edraw-text-line以外のtspanやa要素も考慮すべき。

- string : 現在の行に追加する。
- tspan.edraw-text-line : 先頭に新しい行を作成する(ただし先頭の要素でないとき)。
- tspan (その他) : 現在の行に内容を追加する。(将来的には属性・styleを解析してテキストプロパティに付与する)
- a : 現在の行に内容を追加する。
** DONE edraw-import-svg.elを作成する
CLOSED: [2024-03-11 Mon 13:19]
インポーターの役割は、現在のバッファの内容(またはSVG DOMツリー)をedrawが読み込めるだろうSVG DOMツリーへ変換すること。将来的にはSVG以外のフォーマットからインポートすることも考えられる。

インポーターが呼び出されるシチュエーション:
- edraw-modeを起動したとき。
- (これは微妙) [[elisp-function:edraw-initialize-svg-document]]で、edraw-bodyが無かったとき(SVG用のインポーターのみ呼び出す可能性がある)
- edraw-org-edit-linkやedraw-org-edit-regular-file-linkでファイルを開くときにedraw-bodyが無かったとき(SVG用のインポーターのみ呼び出す可能性がある)(dataは、まぁ、いいでしょ)
- 専用の変換コマンド(.edraw.svgへ変換する。magicコメントも入れる)。

変換は次の点に留意する:
- [X] 必要な要素(rect、ellipse、path、text、image、g)以外は全て破棄する。descやtitle等は要らない。
- [X] defsは一応残す。(SVG直下にまとめて配置する？　専用のgの中に入れる？)
- [X] 必要な属性以外は全て破棄する。
- [X] polyline、polygonはpathへ変換する。
- [X] circleはellipseへ変換する。
- [X] dom-nodeの代わりにedraw-dom-elementを使う。
- [X] aは内部だけを変換して露出させる。
- [X] XML名前空間を認識・変換する。Inkscapeの出力したSVGを変換できるようにする。libxmlは名前空間を全て捨ててしまうので、_ns-xlink--hrefのようにエスケープしてからlibxmlでDOMツリーにし、変換過程で名前空間を処理する。
- [X] +textはテキストノードが入っているのみの単純なもの以外は色々警告を出す。+ textはedraw-editor側がもう少しちゃんと解析をすべき。行以外のtspanやaを考慮する。その上で、tspanとa以外は除去すれば良い。
- [X] 同じ警告は抑制する。
- [X] 終了時に警告の数を報告する。
- [X] style属性を使っていたら警告を出す。
- [X] 複数のサブパスを持つパスデータは警告を出す。
** DONE ズーム時にズーム倍率の逆数ピクセル数でスナップする
CLOSED: [2024-03-11 Mon 21:15]

ピクセル以下のスナップをどうするか。

現在はグリッドを非表示にしているときでもピクセルにスナップしている。つまり図形作成や変形時に整数座標以外は指定出来ないようになっている。(点や図形をピックアップするときは正確な座標が必要なのでスナップしていない)

この仕様は切りの悪い座標値が無くなり計算誤差を防ぎ、SVGテキストが簡潔で小さくなる等の効果がある。また、高DPI環境では自動スケーリングによってエディタが常に非整数倍に拡大されており、マウスの入力座標が(ズームしていないときでも)整数にならない(整数座標がマウスで入力できない)という問題への対策でもある。

が、アイコンなど非常に小さな絵を描いているときは1ピクセル未満の座標が欲しくなる場合がある。もちろんグリッド間隔を1px未満にしたり、数値入力で平行移動したりすれば指定出来るが、グリッドが無いときでもズーム時にマウスで小数座標が指定出来ても良いのではないか。

解決策の案:

- 設定で一時的にピクセルスナップをOFFに出来るようにする
- +グリッド表示間隔とスナップ間隔を分けて1ピクセル以下のスナップ間隔を指定出来るようにする+ (←既に1ピクセル以下のグリッド間隔は実現した。問題はグリッドを表示していないときの挙動)
- ズーム拡大率の逆数間隔(2倍ズームなら0.5px間隔、4倍ズームなら0.25px間隔)にスナップする(自動スケーリングの影響を受けないこと)

ピクセルスナップをOFFにするのは高解像度環境かどうかで操作性が変わってしまうので避けたい。

+常にズーム拡大率の逆数間隔でスナップするのは、1ピクセル単位でスナップして欲しい時に困る気もする。+ (←それはグリッド間隔の指定でやれば良いのでは？)

+結局何らかの設定で小数単位グリッドスナップを行えるようにするしかないのではないか。+

やるなら、グリッド非表示の時はズーム倍率の逆数のピクセル数でスナップするのが良さそう。1px単位固定というのも魅力的だけど、それがやりたければグリッド間隔を1pxにすべき。

逆にズームアウトしていたらどうするのだろう。0.5倍の時は2px単位にすべき？　そうでなければ高解像度環境で整数値とは言え不規則な座標値になってしまいそうだけど。

1.5倍ズームの場合は0.666666666667ピクセル単位でスナップするの？　マジで？　まぁ、でも他にしようがない。ただ、edraw-grid-roundでは剰余を取っているので大きな座標で誤差が問題になるかもしれない((mod 10000 0.666666666667)=0.6666666616665555だから気にするほどでも無い？)。別な計算方法はある？

もしスナップを改良するなら edraw-snap-xy を修正すること。

[2024-03-11 Mon]ズーム時のみ、拡大率の逆数座標へスナップするようにした。小さなSVGをedraw用に変換していじるときに不便なので。縮小時はそのまま。とりあえずこれで様子見。
** DONE シェイプピッカー/edraw-shape-picker-file-last-selection-putを修正する
CLOSED: [2024-03-11 Mon 21:58]
変数edraw-shape-picker-file-last-selectionが選択のたびに際限なく増えてしまう。
alist-getでファイル名をキーにしているにもかかわらずTESTFNを指定していなかったから。#'equalを指定する。
** DONE アンカーポイントやハンドルのコンテキストメニューで座標を表示する
CLOSED: [2024-03-12 Tue 08:59]
右クリックした時に「アンカーポイント」や「ハンドルポイント」と出るが、その右に座標を表示したい。長くなるので「ポイント」は省く。
クリックした時に座標が出来るが、イマイチ分かりづらい。
** DONE Shift+ドラッグの挙動を修正する
CLOSED: [2024-03-12 Tue 20:08]
矩形のアンカーポイントに対するShift+ドラッグは45度単位ではなく次のような挙動をするべき:
- 角の点は対角線上にのみ移動できる。反対側の角を越えたらその角の点の点対称になる。他の方向の変形は行わない。
- 辺の点は、対辺中点を原点とする変形を行う。
これらは新規で矩形を作る時などとは別。そちらはShift+ドラッグで正方形になる。

影響:
rectツール、ellipseツール、imageツール(?)、インタラクティブ変形

射影する？

[[edraw:data=H4sIAF7W72UAA91Wy27jNhT9FYKzSVA9+BAlamC5aNNFF9NNgaKPRQHFpmU1jmRQiu0MZtefKjD/MD/RH+klZUW2pGQSAdMBAskmRZHnnnN1+JhVuwwdbjdFleB1XW/f+v5+v/f23Ct15jNCiA89cNPl7WGTFzdjHWkcx759i9E+X9brBAeMYLRWebauE8xCeNgpXeVlkWDqUTyfLdWqQvkywWqp071rHqH1NtU3Sp+3u8Rd5HqxURg1r389hmiffzyGgYatVpXSO/VdtVWL+ue0zssEF2UBY3e52n9fHhLsCgQ3JXBjpNXqtwQ3ld9tpdS5KgAtvatLjKpalzeqxVjlm02C31BiLqDb8EKLgx25uG+QLBN/PvMbeo+oYq9SFXdTrct9T5Tsi4qeKQr0mB8zdyuLT5S1Tes1ArI/AaLjRgbYiVDgkD+eoSv48rrE19AlXqULw1epin55D0Zfw4PRqK7JH2tMl8teJuz6+voFqnyze81nGjih5sM23/XRvbDTf50ubjJd3hXLR5isVisbLDsdVC7vW3rNIHffM4OrCuh+pzcXbwaJvsRWFAM1lMt3PAgcyngbsYnecrGZMPGtuPNgtFMlO7U0bPSbApIRkE6KNNcJ9tE+Bt5qeYI6faB+7FTVqa4H3dqjwlFiQJyQvINzjEM7Hj2BLYlzbaxjNRD9BM2wi/8kT9H1GxA5ZdmJ4Iw4IGQaLf687LHz7PEQ8sZOQj+ZP/9kvljK/0e+gzNHHzPV0P483VodauPUKLRO5aS/rqFVWdRulb9XxtYYmQFuWizWJazYt/lyCTvMfEtmvnnR4VEuLCCjwTREOkBk1GsweURMbQoqO0PtIYwN6cPeW0ktEcagNt/yAVfCGvUxnch0R9gAlHILSkU8EfIhp+Mes35nwqExGIhCKQWUYKRYPNNIpzSaFZCGLWk5konHeP7790dIgP8Bqh8+z9la/ooTR8LpRJoFHcoISkGu2mejg8F2+LJ5PBoulg4YMBJXceRBtiLhCRQLU5XEVCm8c2QA/5OzJpkdbfJGhjNyNGuf/mkTpTabfFsppO/teUEfbGGOWXYDMMcuNoLasql1WlSrUt8Cdlrr/HBBvDgOpJQs5jwKolhSxyUeMINaSIhk0EQC6Yy3DcdSIjwSi0gSAX054cJxGfekiEkQUxgreESDy2ayQd/jZAvZiYPsltxL3GheftBpluVF1p9NjAfNFI3kxCUPfYMuHryKfGTd+ie7tA2D5atdD1+2HNg9Cs9/gc+5g8NHqeH4V/4Ftbwsvm1D+Bn8ql02/w9chd5yyxAAAA==]]

いや、これだとx、yどちらもグリッドに合わない。

[[edraw:data=H4sIAF/e72UAA91X3Y6rNhB+FcSRqt0KEo+x+TlNIrWq1F6kN22l/tyx4CRoE0CGk2TPG/Qt+mx9ko4xJCSQ7G6WbaWjJAKM55v55huPnUmxXRr7zTotpuaqLPOP4/FutxvtnFEml2NKCBnjDFNP+bhfJ+lj30QIgmBcvTWNXRKXq6nJKDGNlUiWq3JqUhcftkIWSZZOTRiBOZvEYlEYSTw1RSzDna0ecXQTykchT8dtYkeJjNbCNPTr32oXzfOPtRscyKUohNyKb4tcROXPYZlkUzPNUrTdJmL3XbafmjY38AsEv6YhxeL3qalv/qhuMpmIFNHCT2VmGkUps0fRYCyS9XpqfgCiPhiujsuI9pVl9KSRqkjGs8lYh3eBFf8iWblfJCuwQymz3Rkp/5yU90JSyEf9qPo2tLwbaeVhuTIw2J8Q0bI9BWx5BrPIny/g5fXyulmsPl42fR2xh4eHt7Ly318tuLUK30QseJlc/A3EXsnLdd23kqLvrxb7P8RyennxIcVy3pnXWO3Ks4nEqAzdNnXXvLjHHzPwEEaPS5l9SuMLwSwWi8rZsm2UxU9NeI1RVWJ1zmyR4txPcn33obMo7s2KkcOIRYHMHU4sCEjjTrvWmHYdvlv5bzlrXvhX/Xkn/tCXBY4/d5hrAbh9/uqmppxVmTx1BscU+sfUgquTrS6YeUaOefPVp4Vdq3rgciV0OIReTyrKUJadac15q6aIGXXJHA+DFrDehLaCOOVGL2UYrmbYPfq/Gic/zusE0o5SkSAWI3MsWIvyVq4O9P4LWvSkcHRWHRezCs4z7tFbKfalKgjPrQrCIeer2lhkaWkXyWehqsc0lIEdptEqwzPOJoljPJPNcjIZqxdHPHB4BUiB3YYIHURgI43puIG6uwWVnqCeIfSZnMNW1KAOBJgKaZY7nVgJ1ewDuDHSLaEdUOZpr95tKd2SQ07Fep3khTDkk97E9tUlqpyoQ6wKnXRLYXxqSbUl7cyrgFT1RZVap5Znc3tCoHUI4LZqtJRhWiwyuUFCYSmT/R0ZBQHzfZ8GjuMxL/DBsskICME7lxCf4hBhvtU/1rUFwkck4J5POM51iMMtmzojnweEBYC23PGA3Vc1QHFuU4y0JXHVkNtiXCir2fcyXC6TdHkucrNsXlc1VR8zZ7+kYW6UmZGKELf+0ljKJDbw77NovDzXyP3TPU81EUrmoK+v6mVwXTk/4MA5auFiwXEOKAhj3OOYdY9RCPBBidkZ67EE7owYasiJ53vExRuUEvwRoJSUoamLErlaNvD1unSOO6o+B7STS+vHRbhJ1mhUYPg2HqSSxaWuImQeZ+UdrlkLF9n9V+vym05DpKC3XODPttjXeZ+URR6mRrQOi6I58FQTlfAHl9ik9lMMbv91gUXya/YDlsZdTp/uxzj4hMEqkBdiGbFKpdiYM+NOWf/z19/k/gDRLrUsD6OkVIc7tUY6FaI3UFpvoJcKjNGICHJlb+zMbMOchnCyZbNBQV0N6g4K6mtQf1BQbIcVKpBhYWshq1YxIGytFgwrF9R6wbCCQa0YDCsZJc0iGRa2WXvDSkabM/GwkvXCXtnNnMNu1tt56jPy3HnR9qb+vy7xV2yXs38BNKzHut8WAAA=]]

ドラッグしている角に対して、縦の辺がある領域はドラッグ中のY座標を採用する。
ドラッグしている角に対して、横の辺がある領域はドラッグ中のX座標を採用する。
採用しなかった軸の座標は採用した方から対角線上の点を算出する。

[[edraw:data=H4sIAAzz72UAA81XXW+bMBT9K5b70kpxMYaQpAqRtr7sYXuZNC3dGwsmsUIgMm6h+/XzFyEpYUWokxCBi/Hl3nN878HKsnjZguqQZkUId0IcHxynLMv70rvP+dYhGGNHekDj8lClLNtfc3QXi4WjZyEoWSx2IZwSDMGOsu1OhNAN5OCF8oLlmRzdu3C1jGlSABaHkMY8KpEayqeHiO8pv3yOMIo4z0sIzOxPk8Grx19slikER04Lyl/op+JIN+J7JFgewizPqEzPaPk5r0KIXAzUSdQPAk6TdQjNzZO+yTmjmYwXPYscgkLwfE/rKAlL0xDezOdzCfYYiR2QSL+5eIJmQF5nAPkT/AsCZ7V0DLoOTu7YOSFDCmlWPUmRsZMaUChv7JyGFMofO6kBhZqOndOQQgVjJzWgULOxc3qnUI7aq1ZLLiGBSqd41dfOna+h/zva7Lc8f87iDiRJkuhk2/OX8vgV2nx13KDJ5xKDwJemMqYONldHk+nGxeqoHyAbgOiMmv3lhAv1chAfT1wffyV44p2CG9StyDIQTVN2LCjgr7qovNJmI0culh6byq6KBXmJ6R2QdezWXGdZr8EgFgbBuKFuqotoJik/8/T2prVX39UdigoRcdFywyc3vWoYTwL8aAxQRtKvbccqasCX3IJeCL1+CMnJrZXkEsM5Oq3yuYRN8KO1wPUvrMYoaCVUH86nug9J0ys2Zp4JVLA/VFXADpPowFL5ThFlBZJSZ7L7VRwUZZtdzkN4YHGcUrj6IYv+tHTUnM10HvraK73zqY6w2lF9qVOtL1IpD894EHfxgaxu15OnuzqV1ndnY59k8Ubb//ggBAayd97lLYF3xG9KP5UdS6T4VeU93E+Fb8HWw7YWAytFn/QM3Ufgfh006KfvaT/1+EPVI3GoT4ExQBn1KbC2F8JZP4TBYIRSx75EqA3w8ZlptP2RirMfCX+B/7e2rXBVg12R9kdmqjfg2eyNsp2tPOX/6NVfTvNgR28PAAA=]]

あ、回転された矩形もちゃんと考慮する必要があった。

[[edraw:data=H4sIAOw18GUAA91XW2+bMBT+K5b70koQbGNuVYi0Pe2hk6Y9dJc3D0xiheDI0EL362cbSJrbFKlZKk2EGB/j7zvf8fFxMq2f56BblVWdwkXTrO89r23bSetPpJp7BCHk6Tdg/8p9V4pqeexFnCSJZ0chaEXeLFLoUwTBgov5okmhBoLgmatayCqFeILhbJrzogYiTyHPFWtd09XWFVNLrnbtbuwypWQLQT/6rWfAdDR8GmgSCNaK11w98w/1mmfNV9YImcJKVlzzC95+lF0KXYyAuYn5QKB48T2F/cMP+yCV4JXGY0+NhKBulFzyEaUQZZnCG4zMpR1es2YBtLefNaLjRgbYiQB10E8IvNnU6z08ISz5X4VhdAVl8bsow1dQFr2Hsmss2b8W5pkyMpsq7RXoLMuL/T5ZlLYh+MWy5VzJpyo/4UxRFJZs/nqSzF+gMTWKVXUh1SqFK9Yo0d2iSRKEAaVREvs+wVGUOC6akAQHcUBREFJCtdE5ajqcSfAE+YkfhmFEY4ICSpwATWIS+HpWSOIkioI7OCgfFYZb5Zj0sTAB6PpmlBWba6t5DPpgcAcAYrXbddgdwNAujI+QgyP0QJDjb8D7+G2QGWMWhZelWNccKO2QrzOis02me9isSab7OET7WXCehyP2wdjB7D30I86EgzM2Uy6MTUdsenlscg2/44tjj9BDRGyu9Rvb5ZXOsSdV3t4c/Cq428+DISFxrBMSoQfT0lMZOTpzBt1Y+I/xndDakxlniNkdodkduiXnESZv4NNchueBnk+H3iLPxJpqedS2lq/hXWMqTkRsxcFJdJAChawatxa/udlrQ7dgK1HqabWup64+ZIQuugbKZVW2kEqXV5HnJYezR/Yy9czIlgr7geUKk0tTdQdUBuVEnXoT15fsgCrsazaOL0212qHagz425Ww+uxi+ddsUildUx0+Qv+27bWJuMhvZzD5nV2+yMLLOXDqEj5ncXy6f7p+wl1msDZE3H279z2z2BxyHXlvBDQAA]]

(c=corner, o=opposite, m=mouse)

つまり、PmがPc→Poの線よりVay側ならVaxを使い、Vax側ならVayを使う。直線(Pm,VaxまたはVay)と直線(Pc,Vco)との交点がスナップ結果となる。細かい例外条件があるので注意。
** DONE SHIFT+ドラッグで矩形をリサイズするときの原点を対角点にすべき
CLOSED: [2024-03-12 Tue 20:08]
現状はドラッグするアンカーポイントの元の座標が原点になっている。
しかしその点から45度単位でリサイズするのは何か違和感がある。
おそらくドラッグするアンカーポイントの対角にある点が原点になって、そこから +45度単位+ 対角線上を移動すべき。
問題はselectツールでの一般的なアンカーポイントの移動であるということ。selectツールはどうやってSHIFT+移動の原点を決めるべきだろうか。rect, ellipse, image, g、つまりshape-with-rect-boundaryはいずれもそのような動作になるべき。

→ edraw-get-opposite-point-vectorsというメソッドを追加してedraw-shape-point-rect-boundaryだけが結果を返すことで解決した。

** DONE 変形/Shift+ドラッグで拡縮するときに縦横比が失われる
CLOSED: [2024-03-12 Tue 20:09]
ドラッグした点から45度単位の方向へスケーリングしようとしてしまう。
[[*SHIFT+ドラッグで矩形をリサイズするときの原点を対角点にすべき][SHIFT+ドラッグで矩形をリサイズするときの原点を対角点にすべき]]も関係ある？

→仕組みが違うので別なメソッドにしたが、やっていること自体はほぼ同じになった。
出来ればまとめたいが、今はその時ではないだろう。
** DONE メニューフィルターを改善する
CLOSED: [2024-03-13 Wed 19:45]
- 現在のメニューフィルターは全てのメニューを網羅していない。
  → 全てのメニューをカスタマイズできるようにすべき。
  - menu-typeに次を追加する。
    - document : Documentサブメニュー
    - document-quick : メインメニューやドキュメントコンテキストメニューの直下
    - selected-shapes : 選択図形サブメニュー
    - view : 表示サブメニュー
    - default-config : デフォルト設定サブメニュー
    - (shape . <plist>) : shapeメニュー
    - (shape-point . <plist>) : shape-pointメニュー
    次はこれまで通り:
    - context-document
    - main-menu
- メニューを生成する関数は統一感が無い。関数名の規則性が弱い。
  → ほぼ全ての関数をメニュー名も同時に生成するように変更し、 ~edraw-menu-~ で始まるようにした。ただし、メニュー項目のリストだけを生成する物は ~edraw-menu-items-~ で始めるようにした。
- メニューを生成する関数は粒度がバラバラ。ドキュメントや表示などの大きめなサブメニューを生成する部分は別の関数に分割する。
- ポップアップする部分のコードを少し整理する。マウスのイベントハンドラ側でゴチャゴチャやっているところはオブジェクト側のメソッドにする。
** DONE edraw-get-actionsを整理する。
CLOSED: [2024-03-15 Fri 10:07]
[[*選択オブジェクトに対するキー操作をコンテキストメニューに表示する][選択オブジェクトに対するキー操作をコンテキストメニューに表示する]]の続き。

[[elisp-function:edraw-menu-selected-shapes]](旧edraw-get-actions-for-selected-shapes)と[[elisp-function:edraw-get-actions]]メソッドを統合したい。可能？

複数選択時のメニュー表示は、edraw-multiple-shapesに対するedraw-get-actionsを使うべきだと思う。→とりあえずこれは保留。統合すればいつでも出来るようになる。

しかし[[elisp-function:edraw-menu-selected-shapes]]は[[elisp-function:edraw-main-menu][edraw-main-menu]]からも使われているのがネック。

[2024-03-15 Fri]
- edraw-menu-items-shape-common を追加。edraw-shape(基本クラス)に対するedraw-get-actionsと同じで、メニュー項目のbindingにはshapeに対するメソッドを指定する。
- ただし、引数shapeはedraw-shapeとedraw-multiple-shapesのどちらも指定出来るようにする。共通する基本クラスはedraw-properties-holder。
- メニュー項目のプロパティに :cmd-for-selected を追加して選択図形に対するコマンドを同時に指定する。
- :enableや:visibleはshapeがedraw-shapeかedraw-multiple-shapesかによってある程度動作を変える。
- どちらかの操作が存在しない場合はnilを指定する。このnilは何もしないダミーコマンドへ置換する。nilのままだと太文字で表示されてしまうので。ignoreはすでにignoreにキーが割り当てられているとそのキーシーケンスが表示されてしまう(私のところだとC-kanaと表示されてしまう)ので、専用のダミーコマンドを作る(edraw-menu-items-shape-common--dummy)。
- ついでに修正:
  - 複数選択時のZ順序操作のenable判定
  - 選択のvisible判定
  - 選択解除を追加
  - 単一shapeに対する次選択・前選択操作を追加

** DONE 選択済み図形に対するメニュー項目の「選択」を何か別のものにする
CLOSED: [2024-03-15 Fri 10:07]
「選択解除」にしたい。さもなくばメニュー項目を消すべき。
** DONE サブメニューが全て非表示の時に親項目を非表示にする
CLOSED: [2024-03-15 Fri 12:18]
選択図形に対するコンテキストメニューの「設定」で設定できるプロパティが無いときに「設定」だけ表示される。image要素はhrefしか設定できない。他の要素と同時に選択すると、共通のプロパティが一つも無くなる。
** DONE インポート/use要素を展開する
CLOSED: [2024-03-15 Fri 21:16]
参照先が同じSVG内で、対応している要素であれば展開しても良いかもしれない。
オプションで。
dvisvgmでは、--no-fontsを指定するとuseやpathを使い、--no-fonts=1だとpathのみを使うらしい。

その前に名前空間処理を先に全部済ませる必要があった。
** DONE インポート/空のdefsを削除する
CLOSED: [2024-03-15 Fri 21:17]
** DONE 別ファイルの内容をインポートする機能を追加する
CLOSED: [2024-03-16 Sat 23:16]
別ファイルの#edraw-bodyの中身を現在のドキュメントに追加する。
#edraw-defsも何とかして更新すべき。

いくつか方法があり得る。

- shape descriptorを経由する。
- SVG DOMノードを直接挿入する。
- 専用の形式を経由する。

一番ネックになるのはdefs下の要素を参照している属性の取扱。edrawではpathのmarker-start、marker-mid、marker-endが該当するが、SVGレベルで見るともっと沢山あり得る(マーカーだけでももっといろんな要素に指定出来るし、グラデーションや形状などの参照など色々あり得る)。

shape descriptorの良い所は将来的に追加されるだろう様々な種類の図形タイプに対応できるところ。欠点はshape descriptorの生成はedraw-editorが管理しているedraw-shapeオブジェクトからしかできない点。つまり、editorにインポートしたいのにeditorで開かなければならない。もちろん別エディターで開いてから持って来るという手はある。

SVG DOMノードを直接コピーしてくるのは、参照する別要素(defs下)をどうするかという問題がある。一緒にコピーするだけだと、既存のdefs下と重複したりIDが衝突したりする。ただし、解決方法が無いわけでも無い。本体を移した後、元のdefs下を参照している属性だけ作り直すことも出来る。もしくは、より一般的なSVG DOM同士のマージを行うような手法を採ることも出来る。それは少々やり過ぎなので、defs下の要素の重複除去とIDの振り直しだけするという手もある。ただ、まだ開いていない二つのSVGをマージするのではなく、すでにeditorで開いているSVGにインポートしなければならないので、一番最初の方法が一番妥当だろう。

他要素への依存を排した専用の形式を用意するという方法もある。これはshape descriptorではなく単純にSVGのmarker属性の記法を修正しただけのもの。修正SVG法とでも呼ぼう。実際これはかなり魅力的な方法ではある。marker-start=(参照ID)は:edraw-ref-marker-start=(マーカー情報)に置き換えてしまうわけだ。

- 他要素参照の振り直し
- 重複IDの除去(というか基本的にIDは全て除去すべきでは？)
- インポーターが見逃した形式をどうするか

3番目の手法は魅力的だが、インポートのための手っ取り早い実装とは言えない。なので2番目の方法が妥当だろう。ただし、shape descriptorは現在も色々と問題を抱えているし、将来的にも同じような問題が生じる可能性はある。3番目の手法も研究しておきたいところ。

2番目でやるなら:
1. ファイル→edraw用SVG DOM変換(edraw-import)
2. #edraw-bodyと#edraw-defsを確保
3. #edraw-bodyの中のdefs参照属性を、インポート先でのdefs参照に置き換える
4. インポート先の#edraw-bodyに入れる(グループ化、位置調整を含む)

メモ:
- マーカーのテスト
- inkscapeのテキストが移動できない (あー、あれはtspanのxとかdxとかだから……)
** DONE 同一マーカーが一つにまとまっていない？
CLOSED: [2024-03-17 Sun 17:01]
原因は親リンク。parent links (:-edraw-dom-parent) 属性。すでに追加されているマーカーとまだ追加されていないマーカーでは親が異なるのでedraw-svg-def-element-equal-pは一致していると判定できない。
edraw-dom-equalやedraw-dom-equal-attributesが必要。それらは内部使用目的の属性を排除する。他にも同じ間違いが無いか調べる。DOMや属性列に対するequalをしている場所を探す。→(equalで検索してザッと見た限り無い。
** DONE pathを消してもマーカー定義が残ってしまう
CLOSED: [2024-03-17 Sun 20:04]
プロパティがそのままなら参照は削除されないのでマーカー定義は残る。

Undoの事を考えるとその方が良い？　pathの削除でマーカー定義を消して、Undoで復活させるのはかなり難しい。pathを消すときに元のマーカー定義をどこに持たせるかが問題になるから。

いや、pathを削除するときは同時にmarker-*属性をset-propertyで削除するという手もある。つまり、Undoするとその属性もUndoで戻るというわけ。いやいや、削除するときはそれで良いかもしれないけど、グループ化な順序変更などいったんremoveしてからすぐにinsertするようなケースはそれだけではダメ。

もしくはそのままにしておいて、保存・エクスポートするときにdom内で使われていない定義を削除するという手もある。

ちなみに読み込み時に不要な定義は自動的に削除されている。

とりあえず出力時に不要な定義を削除するのが一番手軽。

理想的にはpath要素の追加や削除と同時に依存するmarker要素も自動的に追加されたり削除されたりするような仕組みがあればいいのだけど、とりあえずそこまではしないでおく。

一応TODO「[[*定義要素の参照元要素が削除されても残ってしまう問題][定義要素の参照元要素が削除されても残ってしまう問題]]」を残しておく。
** DONE defrefs周辺のコードを整理したい
CLOSED: [2024-03-17 Sun 20:46]
ぱっと見でよく理解できない。
defrefsは必要なのだろうか。その都度検索するんじゃダメ？ (現在は親要素を取得できるので自ら探すことも出来る)
defrefsの仕組みは参照先の種類とは独立だけど、参照部分を一括でアップデートしたいことがある(インポート時)。
マーカー周辺のコードも関係してくる。マーカーの属性名はmarker-start、mid、endをハードコードしてしまっているがそれで良いのか。

そもそもdefrefsという名前が既に分かりづらい。deftblでどうだろう。定義を引くためのテーブルだと分かる。

既にいくつか不具合がある。
- 内容が同じマーカー定義が複数生成されている
- マーカーを使うオブジェクト(path)を消してもマーカー定義が残ってしまう
  (これは非常に深刻で、消したときにマーカー定義も消すとUndoしたときにマーカー定義を復活できない。エクスポートするときに未使用マーカー定義を消すことは出来るはず)

やること:
- [X] GVやcl-libを使ってコードを短くする。
- [X] 全体的に関数名や変数名、コメントを修正する。
- [X] defrefs→deftbl (ただしdefrefs-defrefsのところはdeftbl-defrefsにする。
- [X] 定義要素のIDを作ったり読んだりするところを整理する。
  edraw-svg-def-element-*という関数名にする。
- [X] edraw-svg-deftbl-from-domのrecursive-pは常にtなので不要。
- [X] edraw-svg-deftbl-from-domの未参照要素を削除する部分は分離する。
- [X] 親リンクのせいでedraw-svg-def-element-equal-pが正しく動かなくなっているのを直す。
- [X] edraw-svg-update-marker-properties-in-domはマーカーに限定されないより汎用的なものへ置き換える。
  基本的にはプロパティ値として(古いdeftblから)getして(新しいdeftblへ)setしなおせば良い。
  対象とする属性は edraw-svg-deftbl-target-attributes に指定されている属性を使う。これは将来的にマーカー以外も指すようになることが予定されている。
- [X] 出力時に使われていない定義要素を削除する。

defrefs改めdeftblの目的:
- marker等の定義要素の使用状況(被参照状況)を求める。
  なぜその都度検索ではダメなのか:
  - 高速に求めるため
  - UndoのためにSVGツリーから外れても定義要素を保持し続けられるようにするため
    (これは弊害ももたらす)
** DONE テキスト/どの座標指定形式であっても平行移動できるようにする
CLOSED: [2024-03-18 Mon 20:44]
textとその下のtsapnを考慮する。
x= y= dx= dy=それぞれについて、複数指定バージョンも考慮する。
ただし、手元の環境では座標の複数指定は表示に反映されない(librsvgが未対応？)。

x, y属性の変更は、その下のtspanのx, yも変更するものとする。まぁ、正しいとは限らないんだけどね。
** DONE インポート/インポートしたテキストが移動できないことがある
CLOSED: [2024-03-18 Mon 20:44]
** DONE style属性を解析する
CLOSED: [2024-03-20 Wed 22:30]
- SVG仕様書
  - SVG2 [[https://www.w3.org/TR/SVG2/styling.html][Styling — SVG 2]]
  - SVG1 [[https://www.w3.org/TR/SVG11/styling.html][Styling – SVG 1.1 (Second Edition)]]
- CSS
  - [[https://www.w3.org/TR/css-style-attr/][CSS Style Attributes]] (日本語:[[https://triple-underscore.github.io/css-style-attr-ja.html][CSS Style Attributes]])
    - [[https://www.w3.org/TR/2013/REC-css-style-attr-20131107/#syntax][declaration-list]]
  - [[https://www.w3.org/TR/2011/REC-CSS2-20110607/][Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification]]
    - [[https://www.w3.org/TR/CSS21/syndata.html#syntax][4.1 Syntax]]
    - [[https://www.w3.org/TR/CSS21/grammar.html][Appendix G. Grammar of CSS 2.1]]
  - [[https://www.w3.org/TR/css-syntax-3/][CSS Syntax Module Level 3]]
    - [[https://www.w3.org/TR/css-syntax-3/#escaping][2.1. Escaping]]
    - [[https://www.w3.org/TR/css-syntax-3/#tokenization][4. Tokenization]]
      - ident
      - function : ident (
      - at-keyword : @ ident
      - hash : # nmchar+
      - string : "..." or '...'
      - bad-string
      - url : url(...)
      - bad-url
      - number
      - percentage : number %
      - dimension : number ident
      - whitespace
      - CDO : <!--
      - CDC : -->
      - colon : :
      - semicolon : ;
      - comma : ,
      - [
      - ]
      - (
      - )
      - {
      - }
      - delim
    - [[https://www.w3.org/TR/css-syntax-3/#token-diagrams][4.1. Token Railroad Diagrams]]
    - [[https://www.w3.org/TR/css-syntax-3/#tokenizer-algorithms][4.3. Tokenizer Algorithms]]
    - [[https://www.w3.org/TR/css-syntax-3/#consume-token][4.3.1. Consume a token]]
    - [[https://www.w3.org/TR/css-syntax-3/#parse-list-of-declarations][5.3.8. Parse a list of declarations]]
    - [[https://www.w3.org/TR/css-syntax-3/#consume-list-of-declarations][5.4.5. Consume a list of declarations]]
      - whitespace-token => 何もしない
      - semicolon-token => 何もしない
      - EOF-token => 終了
      - at-keyword-token => よくわからん。必要？
      - ident-token => ident : component-value* ( ; or EOF )
    - [[https://www.w3.org/TR/css-syntax-3/#consume-component-value][5.4.7. Consume a component value]]
      再帰しているので正規表現で書くわけにも行かない。
      - ( component-value* )
      - { component-value* }
      - [ component-value* ]
      - function-token component-value* )
      - 任意のトークン

疑問: urlやプロパティはunescapeしなければならないのか？　まぁ、そうだね。

#+begin_src html
<html><body>
  <div style="content:url(note/20240101-widget-library/classes-basic.png)"></div>
  <div style="content:u\72 l(note/20240101-widget-library/classes-basic.png)"></div>
  <svg width="640" height="480"><rect x="100" y="100" width="440" height="280" style="f\69ll:blue" /></svg>
</body></html>
#+end_src

疑問: CDOとCDCはスタイル属性にも必要？　んー、おそらく純粋にエラーになっている気がする。

#+begin_src html
<html><body>
  <svg width="640" height="200" stroke="black"><rect x="100" y="10" width="440" height="180" style="f\69ll:cyan; &lt;!-- stroke:red; --&gt; stroke-width:4px;" /></svg>
  <svg width="640" height="200" stroke="black"><rect x="100" y="10" width="440" height="180" style="f\69ll:cyan; <!-- stroke:red; --> stroke-width:4px;" /></svg>
  <svg width="640" height="200" stroke="black"><rect x="100" y="10" width="440" height="180" style="f\69ll:cyan; /* stroke:red; */ stroke-width:4px;" /></svg>
  <svg width="640" height="200" stroke="black"><rect x="100" y="10" width="440" height="180" style="f\69ll:cyan; stroke:red; stroke-width:4px;" /></svg>
</body></html>
#+end_src

作った関数:
- ([[elisp-function:edraw-css-match]] str ppos noerror) :: string-matchの代わり。pposはcarに文字列内のインデックス番号を持つconsセル。
- ([[elisp-function:edraw-css-token]] str ppos) :: strのpposからトークンを一つ取り出す。結果は(type . (begin . end))
- ([[elisp-function:edraw-css-token-value]] str token) :: [[elisp-function:edraw-css-token]]の戻り値からトークンの値を取り出す。
- ([[elisp-function:edraw-css-split-decl-list]] str ppos) :: strからプロパティを切り出す。結果は (ident-token . (vbeg . vend)) のリスト。ident-tokenは(ident . (idbeg . idend))であり、[[elisp-function:edraw-css-token-value]]でプロパティ名を取り出せる。
- [[elisp-function:edraw-css-split-decl-list-as-strings]] :: (プロパティ名文字列 . プロパティ値文字列)のリストの形で切り出す。
** DONE インポート/style属性を対応するSVG属性へ変換する
CLOSED: [2024-03-20 Wed 22:33]
基本的にはその方が良い。
カスタマイズ変数で変換しないようにできてもよい。
** DONE CSS/style属性中のat-keywordをスキップする
CLOSED: [2024-03-21 Thu 14:08]

現状では@mediaは効かないようだ。

#+begin_src html
<svg width="560" height="420" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">
<rect x="10" y="10" width="540" height="400" style="fill:blue; @media all { fill:red; } stroke: red; stroke-width: 10px;" />
</svg>
#+end_src

[[https://drafts.csswg.org/css-style-attr/#syntax][3. Syntax and Parsing - CSS Style Attributes (Editor's Draft 10 April 2015)]]には「Although the grammar allows it, no at-rule valid in style attributes is define at the moment.」と書かれているので、有効な指定は無いのかもしれない。

しかしその次に「The forward-compatible parsing rules are such that a declaration following an at-rule is not ignored:<span style="@unsupported { splines: reticulating } color: green">」と書かれているので、読み飛ばせるようにはすべき。
** DONE pathツールのヘルプを短くする
CLOSED: [2024-03-23 Sat 19:19]
行数を減らす。
ついでにaが新規パスであることを明記。
** DONE shapeプロパティまわりを改修する
CLOSED: [2024-03-25 Mon 16:33]
現在の仕組みは新しいshapeクラスを作るのに適していない。
edraw-svg-element-もしくはedraw-svg-elem-は拡張性が乏しく、新しいshapeクラスを作ったときに新しい独自のプロパティ(data-edraw-)を追加しづらい。

- edraw-svg-を整理する
  - [X] プロパティ情報の:internal tを:flagにまとめる。同時に末尾にplistを付ける形式を廃止する。
  - [X] edraw-svg-element-get-property-info-list系はプロパティ定義をそのまま返すようにする。利用側はplist-getではなくedraw-svg-elem-prop-系関数を使うようにする。internalやrequired、geometryといったフラグは専用の述語を作成する。to-stringやfrom-stringについても専用の値変換関数(edraw-svg-elem-prop-to-string等)を追加し、それを使うようにする。
  - [X] (edraw-svg-elem-prop name source type flags) 関数を追加し、それをできるだけ使うようにする。
  - [X] edraw-svg-element-get-property-info-list-by-tagはedraw-svg-tag-get-property-info-listへ改名する。
  - [X] edraw-can-have-property-pはdefgenericにする。
  - [X] edraw-svg-element-get-propertyやedraw-svg-element-set-propertyはオプション引数で任意のprop-info-listを取るようにする。新しいプロパティを追加したい場合は、これを活用する。shapeに対するedraw-get-propertyやedraw-set-properties-internalは必ずedraw-get-property-info-listから取得したリストを引き渡す。
** DONE プロパティエディタで前後ボタンを右寄せにする
CLOSED: [2024-03-26 Tue 10:57]
Prev/NextのUIを一番上の行の右側に表示する。
** DONE プロパティエディタのボタンの前後に空白を入れる
CLOSED: [2024-03-26 Tue 11:39]
「前」「後」が押しづらいので。英語だと「Prev」「Next」だから少し幅があるけど、やっぱり見た目が窮屈でもあるから入れておく。
** DONE プロパティエディタにメソッド呼び出しボタンバーを追加する
CLOSED: [2024-03-26 Tue 11:42]
edraw-shape-generatorに「再生成」ボタンが欲しいから。
** DONE プロパティエディタのmarker-widgetをもう少し一般化してobject-widgetにする
CLOSED: [2024-03-26 Tue 14:36]
- edraw-property-editor-marker-widget => edraw-property-editor-object-widget
- edraw-property-editor-create-marker-widget => edraw-property-editor-create-object-widget
- 次の部分を可変にする
  - edraw-svg-marker-* に依存している部分
 - デフォルトプロパティ (alist-get 'marker-defaults options)
  - オブジェクト名"Marker"
- marker-widgetはedraw-property-editor-create-marker-widget関数で作る
** DONE 図形生成/edraw-shape-generator(生成図形)機構を追加する
CLOSED: [2024-03-28 Thu 22:52]
- 全く新しいshape-typeを追加する仕組みを整える
- edraw-shape-generator
  - data-edraw-gen-type属性とdata-edraw-gen-src属性を定義する
  - generator-typeを管理する仕組みを作る
  - edraw-regenerateで再生成する
  - プロパティエディタに「再生成」ボタンを表示する
  - アイコンを作る
  - オプション指定機構を作る
    - data-edraw-gen-options属性
    - (cssdecls :prop-info-list <edraw-svg-elem-prop-list>) 型を追加
- edraw-editor-tool-generator
  - クリックしたらedraw-shape-generatorを作る
- edraw-gen-latex
  - latexソースをsvgへ変換する仕組みを作る
- デフォルトプロパティをどうするか
- 何かもう一つ生成するものがあると良いんだけど
  - グラフ
  - 座標軸・グリッド
  - UMLクラス

アイコン(30x24):
[[edraw:data=H4sIAN0lAmYAA3VTTXOjMAz9Kx736hrLYLA7IRdfu39gb9nAApMUOoQt6b9fSXw0ndk9ID0/S+/JjnO4fTTi/nbtb6Vsp+n9JUnmedZzqoexSawxJsEKuZS83K9df/lXIYQQEt6VYu6qqS1laqRo665pp1LaTIqPerx1Q19K0CCPh7E+T/8rvZcSmU+Ov7vrtZRP3nspbtM4XOpS9kNfS9FVpayr8TQ//zqdL804/OkrKZLjoXncGqrPzW2RWprRItOOTTivk1j4mgTcl+MTno+1309Tu7LPa4+hfjT8EZTXLgbtVKGdAFA5BlzlESxhSzsCUhVeIdW+cIqo+IAFoJgCbjecWY4JBjkCv4JYbEyxVGDy2iKvIGAWtG8N11vDQrgKmrwo0oTgyR6JjCwzDRZx+h2/Ak0QwWkivICcdKAgUQiELU/thYVttB0hh3mJccHYA0GAxxihYJzzUAUBaouYyQvHcETYLcd9TadheaPYz+zr9fp5ArpAazcmVeRD2WGOlAXuonW2lGc0YUYaxNEVoryjQ+ZiPT7sID4wCgzdmFN4nRkVpyiDP3oWgQQDj+ZxFz/Bz2SJP+W3R7m/tvP5zK8tafDD/9/xL9I49sGnAwAA]]

関係ないけど、アイコンを書くときはグリッド間隔を0.25等にすると良い。
** DONE 図形生成/グリッドタイプを追加する
CLOSED: [2024-03-29 Fri 11:48]
** DONE 図形生成/タイプによってgeneratorツールの入力を変える
CLOSED: [2024-03-29 Fri 11:48]
- 必ずsourceが必要とは限らない。
- タイプによってはグラフィカルな入力(範囲選択)が欲しい。
- 生成ツールはクリックだけで無く矩形も受け付ける(画像ツールと同じように)
- コマンドのinteractive指定に相当する仕組みがあると良い。
- <prefix>-interactive関数？
** DONE edraw-svg-elem-propをedraw-svg-prop-infoへ改名する
CLOSED: [2024-03-29 Fri 16:38]
もはや要素だけのプロパティじゃ無いし。
edraw-svg-propにしたいところだけど、プロパティでは無くプロパティ情報なので。
edraw-svg-prop-info-to-stringはちょっと変だけど。そのあたりはedraw-svg-prop-value-to-stringでもいいかも。
edraw-svg-propで始まる文字列はプロジェクト内に存在しない。

- [X] edraw-svg-elem-propをedraw-svg-prop-infoへ改名する。
- [X] edraw-svg-prop-info-to-string等を改名する。prop-to-にするかprop-value-to-にする。
  - [X] edraw-svg-prop-info.*-to-
    - [X] edraw-svg-prop-info-to-string
    - [X] edraw-svg-prop-info-to-number
    - [X] edraw-svg-prop-info-to-css-value
    - [X] edraw-svg-prop-info-to-lisp-value
    - [X] edraw-svg-prop-info-alist-to-cssdecls
    - [X] edraw-svg-prop-info-css-value-to-lisp-value
    - [X] edraw-svg-prop-info-cssdecls-to-lisp-value => edraw-svg-prop-cssdecls-to-lisp-value-alist (-alistを付ける)
  - [X] edraw-svg-prop-info-from-で始まるもの
    - [X] edraw-svg-prop-info-from-string
- [X] edraw-dom-svg.el内での定義位置も微妙に変更する。SVG図形要素プロパティの定義より前にプロパティ情報関連のものをまとめる。
** CANCELLED booleanタイプを追加する
CLOSED: [2024-03-29 Fri 16:39]
表現としてはtrueやfalseが良さそう。1か0を許容しても良いし、tかnilを許容しても良い。yesかnoは？
CSSではどうする？
いや、そこはorを使うべきなのかも。CSSにはbooleanなプロパティって無いしね。必ず何かのキーワードを使っている。
** DONE 図形生成/latexでインデントを無くすオプションを追加する
CLOSED: [2024-03-29 Fri 17:43]
クリックした点に式が表示されないのが気持ち悪いので。
全ての段落で無くすには ~\setlength{\parindent}{0pt}~ とすれば良いらしい。
~\noindent~ は段落のみなので、preambleでparindentを設定する方が良さそう。
parindentオプション(数値)を追加する。
** DONE 細い線のマウス当たり判定を改善する
CLOSED: [2024-03-30 Sat 09:58]

選択ツールでクリック時の処理の流れ:
1. [[elisp-function:edraw-on-down-mouse-1;method-args=(nil edraw-editor-tool-select t);library=edraw]]
2. [[elisp-function:edraw-mouse-down-shape;method-args=(nil edraw-editor t);library=edraw]]
3. [[elisp-function:edraw-find-shapes-by-xy;method-args=(nil edraw-editor t);library=edraw]]
4. [[elisp-function:edraw-svg-element-contains-point-p]]
5. [[elisp-function:edraw-svg-shape-contains-point-p]]または[[elisp-function:edraw-svg-group-contains-point-p]]

問題は [[elisp-function:edraw-svg-shape-contains-point-p]] の中にある。

ストロークとの当たり判定は、線と正方形の当たり判定によって実現されている。
その正方形のサイズは線の太さとピックアップ用半径(edraw-pick-point-radius)から決められている。

三つの問題がある:
- 属性値の継承を考慮していない
- ズーム倍率を考慮していない
- fillだけの図形にはピックアップ用の半径が適用されない

一つ目は致命的で、グループ要素にstrokeが指定されていて、その子の図形には指定されていない場合、その子にはstrokeが指定されていないものと判断されてしまう。その結果、ストロークとの当たり判定自体が発生しない。edraw-gen-gridで生成された図形の場合は、ルートのグループにstrokeが指定されているが、その子孫のpath自体には指定されていない。これでは当たるわけがない。

二つ目の問題はズーム倍率に関わらずedraw-pick-point-radiusが一定であること。その結果、拡大表示時には明らかに当たっていない所でストロークと当たってしまうし、縮小表示時にはedraw-pick-point-radiusはほとんど意味をなさなくなる。これが[[*拡大したときに、ストロークの当たり判定が甘い][拡大したときに、ストロークの当たり判定が甘い]]という問題の原因になっている。

三つ目の問題はstrokeの無いfillだけの細い図形は当たりづらくなるということ。fill図形との当たり判定はクリックした点が図形の内側にあるかどうかだけで判定している。edraw-pick-point-radiusは一切効果を及ぼさない。細い図形ではその中をクリックしなければならないので当たりづらい。edraw-gen-latexで生成された数式等はfillだけで構成されている細い線なので大変クリックしづらい。

[[edraw:data=H4sIAIRbB2YAA8Vaz49bVxX+V57cLqh0xnN//wiZbLwgC3fVFREbd8aZWJnYg8dpUhBSnZaqtF0UsUAFBBQKrSgqSLApUvlnzLT8GXznvef3rn2cBrIho+R5Pp97z7nnnvvj+/JuXr12Xj1+cDG/OhncW60ubxwfP3r0aPjIDhfL82OjlDqGxaAxufH4Yja/f8hQ55yP628H1aPZ2ereycAHNajuTWfn91YnA2fwy2vT5dVsMT8Z6KEe3Lq5nJ6uqscnA3zzev3vUxvOzk4G07Pl5NHRq5PT++fLxcP52aC6Wi0X96cng/liPh1Ud2cXFyeDF+7evTuojm/dPC8bLc5eh7/LyepeBfBlpyioMf7VTo11wDM0T1ejQd3Zdtd0vXX0glb8swWO2nhN7bDr3dQdjYzhR6UTd1g/tFKj+gmYv4XHyjTeR1Y1v9smquYJe1vHU/HXrrF2zx+d+OJgBk+De9W9OthmyjSpsm2qbJsq0+TK1Ml6fgem6arOlmnTZdp82TZfts2XbfNl23zZNl+2zZdt82XahJk2Y8a1MZ5XZ5PV5KgpitXrl9NtgZxP59PlZLVYDkoLoEeLyxUqFmvj6nRyMb2hh+Hbl5PlbH42na9uqG5I29SvlpP51d3F8sHJ4MFktZw9/pYmhR/NwZL16iXh4WrxcHmKSF58fPK9q+8vVz80P3pRGDXBXkxW08cDHscBP8PQeGqeL5X1bofWRG9MFYbKZB/sCEiKJqfKD2NU3vrKDoMOzqbKDZO3ORp8sNomYztkBCTwT2kTlImuBJLW2Xt8yMm6FNDIW8yGhitlrcmZO7Y2OnZu0H/wJeKNdiGPCiQklaKGjXOMAUlR6cBI1AY9dghaZau9Kmzgwiur+UPIKllbIiajeRp1CDqMztS+QjBe80CDdTHzAK2xMfUIUhidz972NkgqUhDQsQ4maQZMRHo5QJuRFW6kTEKa2ZV1zlRm6LIKhSMzNEpH13c7wmYZfDC5txn6HKPn3KDXHHsgwDQrN+p/NyGFECsMPtrkCyDqaHX3+2gYMxKmC4OED5gsAC5FpwG4kIxjHz6rmDiu5L13PF5lFUpHw8aqVNSQgQ3/9DVkhjZqrXZsos5JcdazQ3n5HunKoUASXGmYeK9gjXBcjglT3rmKw5SNjxGNlDEOs5iGXiuDasDiiDZiEGmYMQ+ZEWO9xXi3CA8rep9Nb4OwgvO6ALgTxJmQtazhCbUerGKL6LINjrtVHnPFrp3SLpcIIkExjDokDnPG/marbTcANErSIOcWs2E6ABNrI9ZVYWFSQgjoVUftkZgeQGFZ60c9kLEcNU891gYiykPt8JEjMwjSbwEElpLJtrdATTpMOqfNIeuJZwjLxCVOkkUxKJ4hlLiybBN9xn7Ds+gyaqjrBuvDRedi5wiLKlqfewuuAJ5vnsPA9VciQdtg7KhAvLYo/7qScE6EHcToXNdCg4x4vfEwS5t29wDibXKMhIyzgrMLR77eu9oNL2EXyh6VjW2Sk9jXC4+qLqq+gswQFYkM9jYGu2LGzsL9qJzqlHYIMqk9V2uHKK8z6gJIzKaOJ2GfUtwPN85cEDY75/xYbO13di8jGluPQjnXO33CtGN6PWbR83rdQhWggN3VPAXySRvnXikbWgSLOLh77X290TbQ7Txstq2M8saWYXvjPFSYFGTqENL6KFq1gaA/H7MyHXK7G9Odl3v/EdNpjcvF8LZQMZaDUFMQr5QNreZKrfrsbaHb23D68XXW3WgOIa2TolUbSZuvDrjdjWlvKg3qweNc4bTxKWfC2OihyhlHOZLjLI5drEPNhRDa01WhsiqjUJDYNfwu5HJ2sYNGDCHEtGuVMk4jvQNhFnyqJxGJ8WmsM8rTIXauwRh1wNGQh9hieLPBaREDD6+EDE489LAD4RoQd9ph5VjsdAxZ7Dp8dll85TNDKARUSwdxQxyryvRGCBTbH9Z17w+QdgYHIUdlQk6aB234ApO72NnK4tRJfGrnEH2s++KgIucU6w8/Y0wGR4AtRqv6xFbojA9zx1kCZrHJY+kC85iZPShY7Cq2x7hpxMEW7a4dJjvzsQVM6XpPNbw3B2yZwHC/SX5s4hCbN053bOw5ZD4sgUScLHzse4wNIy8QzAdO8wLhu4IOZSuHoxbjN7zL4CD1FZ510QIxMeBQ3SLcSufgcUssbJDciMTjwpZgzohyEZcveFeohjp7e6Xc1PqWEdZ+4LomhnXHyfWUsANansFXTY2jbm+58NGLAHy3xY5NRgAq4cKJ/lFTyo8sjnte9MWVERB2VLjnErdGY9p7iO+lPms36iHc8nC9xdRZLBcsW9y7UAi4pODgZo9OIb0dNOK4cCGwsbDC2ueLouHDBFs/Yu4hx+XrRiWAGcQ1qzI8MI+1twNhw4qmt2J/mFdVn669Fe7dMdZXShzIPuxAWIu4M4x6yGL/QFCZrQIfOxxo1PhW10FgpnzuIG5oQBF92rFCmWCSdiHcsh0nMKIWsuWGKDiLWzbuyTjQMQxAGcuY1yWf10o5zqnX+Kg7CGxw6DBPyvRWPBlYtPX84HaQeRY7qJ/FDsIlFpcB3N4Bgbeo+ghqr9eGNxzcjvlCjQtYwKaH6UjMoPjOF7DqmqXQzhCuQDikfTmx26tiAeFwAL1K+jZKyWH9Oj3uiwpLD2um+ZLL02SuOIcbs+Z7TlAWpAEIN8PQcGdwvAsxZBKOMY4LR4/zgdvhEo0V0i0EHqNHlTS30Q7Cbqk74Ha3fpqleXze/D3fI/noqZAgOmr/TJ79zUxZ10y5VDn+R17+/yPZJEg2CZJNgmSTINm0T7JJkGwSJJsEySZBskmQbBIkmwTJJkGySZBsEiSbBMkmQbJJkGwSJJv2STYJkk2CZNMeySZBskmQ7N5GtSSaum2gQ7Y0uwBa1qxaol0iNdPuADRqqHZp0nBt6ri2ask2CbJNgmyTINskyDYJsk2CbJMg27RPtkmQbRJkmwTZJkG2SZDt3ka1bLtEGrpNHd1WLVEmwbdJ8G0SfJs6vt3109Fp1TLuDuE5ril3adMwauo4d4G0pLtAWtatWtpN+7Sb9mk37dNuErSbBO0mQbtpn3bTPu2mfdpNgnaToN0kaDcJ2k2CdpOg3SRoNwnaTYJ2k6DdJGg3CdpNgnaToN0kaDcJ2k2CdtOzaDdJ2k2SYx+GGko8KqGaN4PytX+qstN9St5B45ZidkDHXUkw8YNIG0iB1NH6Po6iwz3a3iFjmZOCv5Pk7yTJ+mGorbUSavj3oTxJbt9B4y7mLdInSlD6g0gbSYE04XZ/fFX0uCsAdMBYJuVpSgBJJYCkEkBSCSCpBJBUAkgqASSVAJJKAEklgKQSQFIJIKEEkFQCSCoBJJQAkkoASSWApBJAUgkgqQSQVALogBJAUgmgA0oAHVAC6IASQAeUAJJKACkhBQDa1wIY2hMDSAk1ANC+HABoXw/ooF4Q2LFqFAHua08S4CD2NAE6oAk8m/qXQsGOgnBQEyCpCZDUBEhqAiQ1AZKaAElNgKQmQFITIKkJkNQEaF8TIKkJkNQESGoCJDUBkpoASU2ApCZAUhMgqQmQ1ARIagIkNQGSmgBJTYCkJkBSEyCpCZDUBEhqAiQ1AZKaAElNgKQmQFIToK0mMO40gR2ora6tODDuxIEO6lUCEioBSZWApEpAUiWgfZWgWD5iRe3KBfXq3VUMdK/kmWe8ybBtYZpXRHDbrBe3U3JnMAfee/jGtw/2+ra7fa+mj1fV3cV8dXR38mB2AYPvPqy+s1jdm52K//Svza5mP4AnHQYVNz2azE/vLZYng6vVZLlqHOTGAQ6Iwa2v//7Xzfot7mez/svXT77YrD+/fv/H1x98dv3Ox9ef/2Kz/hOQzfqT6y9/tln/ZvPk3c36D5snP0GbzRtPbh6zi22Mey8gHHBexucGTx0VJ7iM8ebq6nIyr04vJldXWwGn7v5ixuncmjVJxjAai8vZ6f2jy8UMPpaTs9nDKx7au1989etf7QznyVub9YfdcNjRf+mvOuM4pw8Gtzbrf3Jnb6y/eu+j648/+fdHn3798T+++vDJZv3Zv7788Pqdt/Ghdbj+/Wb9R/b25L3NGsinm/X7mzc/2Lz55xr/ed3V22UsZYrrIM6mp4vlZFW/vvRwfjZdNlE9Xyk0WTZF9n67Wf+UM/XLv11/+bvn9f6syQ+1d1O4byrwoPNvfqGnH3Gp0fEbQ755jYrfbzJ4ZkURD908Uov69j2m+qUc7uJo+fCCZcLXpvPF2dnOy1q+fdmI3wBqezRtl6bt07Z9muLlqG6h7+4Ch16O2m5W/Kbbrf8A6JT/OxEnAAA=]]

- [X] とりあえず dom-attr を edraw-dom-attr-with-inherit に置き換える。
  - edraw-svg-shape-intersects-rect-p
  - edraw-svg-shape-contains-point-p
  - edraw-svg-path-contents-to-seglist
  - edraw-svg-path-contents-to-path-cmdlist
- [X] 修正した関数を使用する部分の動作をテストする。
- [ ] edraw-svg-element-contains-point-p等を修正する
  本来contains-point-pなのだからstrokeのチェックをすべきではないのだと思う。
  そもそも正方形との当たり判定をするならedraw-svg-shape-intersects-rect-pを使う方が望ましい。
  しかし、この関数の本当の目的は、比較的高速にマウスで指定した点にある図形を割り出すことにある。
  なので、その意図を汲んで、この関数に必要な機能を追加する。
  - edraw-svg-element-contains-point-p、edraw-svg-shape-contains-point-p、edraw-svg-group-contains-point-pに引数を追加する。
    - edraw-pick-point-radius定数は廃止して、引数pick-radiusを取るようにする。
    - 引数stroke-forcedを追加する。strokeが無いfillでも必ずstroke当たり判定をできるようにする(もはやcontains-pではないが)。
  - edraw-svg-element-contains-point-pでpick-radiusをスケーリングする。この処理を厳密に行うのは難しい。
  - edraw.el側では初期pick-radiusをedraw-scroll-scaleの逆数で決める。

[[edraw:data=H4sIAHVjB2YAA9WYQW9bORKE/8qDcpkBJJpsNpvkIAow68setJe97G5uii07QhzLkJXY+ff7NZ89ySYTIMGeBuOJbLkf2V1dVd3yy/uP19Pj+5vb+/Xi7el099vZ2cPDQ3jI4XC8PpMY4xkRiznkt8eb/e27PwtMvfez8dvF9LC/PL1dL4rFxfR2t79+e1ovVPjh4+54vz/crhcppMWrl5e7q/tpf7le7C6P24eV/8i777fHd7vj/76/iqvt8Xh4WEzzb/8139Cef/770y11Md0dd/e748fd7/d3u4vTP7en/WG9uD3c7rh+v3v42+FxvVilOPn/4l+L6bi7+vd6MX/zn/HN4bjf3XLe9sPpsJjuT8fDu93zKVf7m5v14kWK/h/53m1PbyeS/QcnLlfVD17WSZfx9WI6e/XybM7wO3Wlv0Bdc1mjqtUPliWri/3x4mb3VV36dV36g3WViS8KS/93VXNe08XjePLi03zSyOTLqs6cjK9eHklpmkPnyO9S+3P9b7YX766Phw+3l9/J5erqalx2/eVDh8tPi6f75odWh7vtxf7Eten5yfmU5zOfa3qOf0ot6efM5HPGNpegvFCP+Kun8NTmuezVe0/ow/HmlxfftvLX596t7k/b4+mbuCcmfw7b3X57WPwjyImVo4RWJPaUcolNzZaSW5DcW2o9Si7dZJMthmpZi2SJhciliIRCdE/FVKTlsuHXIdaYRXvjDJFlMg2WS84x11Z7Lz+Fogx4BjY/99RcVwyJf1KpLZm1bMvUjLdabK1oV0nnOVooidw11y4UkpepUkOKkQqSaq1TTp2HSu2UwaO9c4wGft8rEc1aqzplsdBqkRob8UXEL+tBSkoVDKXWxG3SAmjVLFl5LKVl6jFYJD53K9VIZMrZQicZs5gLiXFQ15CrlsrBZkotBGmgLOmRMqq0SlAL6KHEJBxXirZzQA+0p2TjcslUt6R1HEX76GSymhOJx9C6NKVnRveXkkajM99TWeoCAJQLEgZfSxFTgmIOkX5GKwk2UMF5TryVmpAVMaBciUqh51yUH/KAmbNSKL1qK06tkbdxUtGo1i2BygixTj/IQVu0OgBQCoOL4NzB4NyDKn1QKbUQSVN6BreYNCkQkipNISVpZsZYpHlaB94KM8GgK73yziVoXGuHpZJ4HTEx1axcTa9inm+D4r3Tki69xTq6S2W0nxx75K3JCeeqIaZDqO7XCexPFsGM/OrEEQHMuJPugYiUkbeBJLIBUMhg59KrN5wsqRlSeVAJkNdIuefYu3ISl6UKSVIhK4dJIvRqOVcOj2TfjCh4Qq+pGZyydNpLKTyGbHMbzOc6C7WCdiRnwKxOAglV0bwaj/NFW6AOoCWIiDEY5HWmUIga2wn9reYQWID7HAZwNUO+cRSP+O0wxUyG6OgiIkilobJMjAawyiQH8ELp03Cl5P1EC57WHKSxdopFzRCWIAhGOzs49daaBxXOrjAaDUKylM89SGFbB99UpHniRkpUGp3obk2TDNVnanBM4IMNf8td1Z0CAFMG9Oq9gnaVLypocxC0Ic3kfY31HD2GmmsEtd4KQM1WiW7EIoJqScskVgKGKGqJp6B0HpoiAQMT63hLFqKA02WI+GFUcXlGpyspOPB0NUMXq4FkEDoQFHQMXXoY3kHBkQwaF1aYkGAAugJBEhvSsx6LeMtr1UQQ91niSZCBa0/sZLTCcdrs3cPKQgZKvsdRZMgTLRqTwRy4Xh1OygPSiKNgPc3KrDy6PhgMjVRHkPMUy0hkHO0pyPhCMYUTz6XATTQv2Bw/dxDwoOx9RJVWorgYSnLBQFbc3ksalpEAEhoqXUGmk2gOCc8B0ORMq3g9QsPj0bFA74aYzkVxnwbF3W8oucmw1ojz0SekwLDjrOxvxQ5KVAmTZZzljKd8cQ/OeUTRFIWBFfDSMKBOPZGskHSisd+MuBcXpm/0zddby5+OOO8XaHbsnJLIF3SKujMjbRKC2g1+NFDNjDe8pCduB+gCFvDAojjjrIBhKy7d5pKkasewVKY5NqWFygHMg5iF9NmhAMue5qDolWC+PvcMwdUAHRuGUoCWRhIF1VgIfFh0c/9g8HS3NJDCnpEu3VA35w6th7rGVPVBi7clVxPdBUChP1IouqEBcu+M1RwYXvwetWIplMfIVgABgA672phz+ElFiHnYh5A504G5w2RrNInxUAhyc6Rgt1EEh3RxJMaKP+RbjOG4YxqwQri0fIxbW7IuBCYTg04T5GIMIyXKgwvdYeZ3JBU1uAHB7KYFPkCQCm8ZIG564gMApBKrF7PJPQCXQ0/ou7Mk1OIjOPqmoAOF3N27fHlAJHgFumT0GpSke8x7chcExoAicfEiq4y0kFHnGXXb0RGknIelKcsL17WKz7pXoQxa4wpnuyEnrmFEWGLeMFlQACbEcGXvaQ46CHMbHWazSN6QEZR7YhoraY7Vyf2StngLPKnczn0mgg8z1C0EI/P7nJ5gl8R9iDqx+oy8XO0d/FiWCGrYF2VFysWQ1EZQHkPUZ12ds2JOMzHFHYP3rY6BgEZd3y5e32dQTxinkEilBK/PSy7+HuYbyTzTdew2+ohWZiMhpOSbHTbBnNY0YrhpGJEimOLi4+QSGTY4M+pnsLBMBiB0r0RIVCMzEXyaD52KzEeh4uZvOSq4JRxjfmD7AOreSgyMMoyJRvj7DTCVHaA0RjmlaPJZzj+hKfMRV1dfOrBnorigcmNlz1W3wtzdq8AHHLxkTK6wP7I8Mpzop49TJNrIChLh4vAxUh/Wy7YJ6BAFJiN1gfgRekFlQaTDnV0aHa2lUshg+A+1sJn44lB8UylsOJGPC7wL7CwfI8gnOdfwLhuLjwMclR8okNx9tLrfaQNZf9Q3cvI2Ng73a66Ci11HTlATw0A04gv0PFl90ok7WZ3z9qlKE6Jvgy1/dubhtaiep0CBbQYzLzJWG1cay4V7Pua38VJ78+ENBWEJNEW9rC4G/+CDE2dDXRifYttgAUoYyPh01Z1ZXdsmzb2mArYWQzcy75uoHdKO3THLxj9bsasQB2PVt8Tqhft62oxXq5vi+oMM3OrGyoLEdowP0nVUiJHR1w2XmX+0cVxZTnQQFNYxcrM7ek0bZgsGh7MBIuab4F71j4g0zJdgRnPMmx9C6PXie3Pue5+k5z8JXPsn9a9+Y188/HTaFw1ja/GRsmE/dYPelOefW2SL4lX5uT393niNTz/7q/A6x7/+4/7dzc3+7n43nY7b2/urw/H9evF+ezruH3/xxcL8Ay96AiMcbIURKBKk6Xwmw5dSW0YEhmT9owBiwpOMtxh1aKI5F8rgywoW0w+fN8xU/4C1NF9vmEacxpigJb/+3N8iwOn4ab3I/jeWx/nV/+SSPdT/BDO+eSrS/8z46r8YSMfAjhQAAA==]]
** DONE 拡大したときに、ストロークの当たり判定が甘い
CLOSED: [2024-03-30 Sat 09:59]
fillはかなり正確だが、それに比べてstrokeはかなり外れたところでもクリックできてしまう。
アイコンを書くときに困った。
** CANCELLED グループを境界矩形内のどこでもマウス入力できるようにしたい
CLOSED: [2024-03-30 Sat 11:13]
細い線が主体の図形の場合選択や移動が大変やりづらい。
編集中の設定で変えられると良い。
もしくは細い線をクリックしやすくするか。

[[*細い線のマウス当たり判定を改善する][細い線のマウス当たり判定を改善する]]の修正でクリックしやすくなったのでとりあえず不要。
** DONE 図形生成/プロパティエディタで何かキー入力で生成したい
CLOSED: [2024-03-30 Sat 13:47]
C-c C-cで更新できると良いのだけど。
[[elisp-function:edraw-apply-properties;method-args=(nil edraw-property-editor)]]から[[elisp-function:edraw-update-from-property-editor]]を呼び出すようにしてみた。
セキュリティの問題があるので、(他も含めて)yes/no確認を出すようにした。
** DONE 任意の要素を一時的に非表示にしたり、マウス入力禁止にしたい
CLOSED: [2024-03-31 Sun 12:06]
編集中に指定したshapeを非表示にしたりマウス入力を透過するようにしたい。
もちろんリセットできる。

- 情報はeditorかshapeかどちらが持つべきか。
  - ★shapeに一時プロパティ(属性)を持たせる？
  - editorにweak参照なhashでも持たせる？
  基本的にはeditorとshapeとの間の関連だと思われるが、shapeに持たせるのが自然だと思う。後述のedraw-svg-printからどのように参照するかが気になったが、解決方法はある。
- 「マウス入力不反応」は英語でどう書くべきか。
  - visibility visible invisible hidden shown
  - pointability pointable いや、指すこと自体は出来るんだよ(反応しないけど)
  - selectable いや、選択は出来るんだよ(キー入力で)
  - pointer-selectable
  - pickable
  - pickability ([[https://docs.unity.cn/ja/2022.2/Manual/ScenePicking.html][Pick and select GameObjects - Unity マニュアル]])
  実はかなり昔から悩んでいる頭の痛い問題。
  意味合い的にはpickabilityがいちばんしっくりくる。edraw内部でもマウスが指しているオブジェクトを特定する操作に対してpickという単語を使っている。
- 一時的な非表示はどうやって実現するべきか。
  - opacity、styleなどの一時的な書き替え
  - 一時的にツリーから取り外す(絶対やりたくない)
  - スタイルシートを使う
    属性レクター
    - data-edraw-temporary-invisible
    - data-edraw-id
  - ★edraw-svg-print時に出力しない
    (良さそうな方法だが、edraw-svg-printは要素からどうやって出力可否を判定するか。属性、専用のテーブル、それとも要素からshapeを取得？)
- 状態は保存されるべきか。
  さしあたっては不要。
  将来的に次のような恒久的なプロパティを作るべきか？
  - 可視状態 (要素を残したまま不可視にしたいなら属性やスタイルで指定すべき。編集中のみロードした直後から必ず非表示にしたいようなことがあるだろうか。まぁ、あり得なくは無いけど)
  - ポインター操作可能状態 (ロードした直後から操作できない状態であってほしいことがあるだろうか。まあ、相当するのはpointer-eventsではあるけど、それとは別にあっても良い)
- 右クリックも不可にする？
  とりあえずはマウス入力は全て不可にする。将来的にはpickabilityに何か違う値を入れるかも？
  いや、C-u 右クリックで強制的にピックアップ出来るようにする。

#+CAPTION: こんな感じで色々重なったものを編集できるようにしたい
[[edraw:data=H4sIAB+6CGYAA51U23KjMAz9FY/7moIvYEwn5IXn/sC+0XCdsJABWujfr2RBk/QybXcYOOhi6ciyvB9fKrb8bbsx4fU0nR98f55nb9ZeP1S+EkL44MHJ5WFpm+70maOM49h3Vs7mJp/qhAdCcFYXTVVPCVcGhJdiGJu+S7j0JD/sh+I4sSXhYHl13y8XNnnCi3zI5vun7Hiqhv65yzkbp6E/FQnv+q7grGzaNuF3ZVly5h/21fWiPn/d8m1uFp9LjDsp8NkU9ysVdUVEXRhqQ5xRtRBAyqJtm/NYbCmyPNdl9JMUA4SKwTAshEeQpcYfDC4p+jmbagYlPQZiZ0UK31B6kQwjZaNQhdpKJpXYBcKBESmCBUk4sGIHfykBg9UyIBtgKs0qgxla7iIApobE4A3AETODnV3Aij/b9lMrvqlYytuCZEDcEKMPNVlXE+THmhTVpIk3U4YooRocnZfjb0nv6gKSMrhC8Uu66patoj1KlQk9G0bWBDoyysQiBArvVUwRE2IMjLRa5XXHNTEjvaCKsBDrysVV6OTa4XyhWbgUI6y90tQd5+tkREUh1P/V+u4g/3xW8CDr9SDrrw6yG8P+nB2bCcfeC95mFzZC4PjeDvbNTXB9RdClQRcIxPUreOGuOvwDDQdtFNMEAAA=]]

edraw-shapeに追加すべき状態:
- 一時状態 (temporary-state-alist, +editing-properties?+)
  - 可視状態 visible : nil | t
  - ポインター操作可能状態 pickable: nil | t
- メソッド:
  - (edraw-clear-temporary-states shape | multiple-shapes)
  - (edraw-has-temporary-states-p shape | multiple-shapes)
  - (edraw-get-temporary-state shape prop-name)
  - (edraw-set-temporary-state shape prop-name)
  - (edraw-set-visible shape)
  - (edraw-set-pickable shape)
  - (edraw-visible-and-pickable-p shape)
  - (edraw-visible-p shape | multiple-shapes)
  - (edraw-pickable-p shape | multiple-shapes)
  - (edraw-toggle-visibility shape | multiple-shapes)
  - (edraw-toggle-pickability shape | multiple-shapes)
- メニューに「一時状態」→「非表示」「ポインター入力無効」のチェック項目を追加する。Unpickableは日本語にしづらい。普通に翻訳すると選択不可になる。

editorの修正点:
- マウスイベントから形状・点を探す部分は全て形状のedraw-visible-and-pickable-pを確認し、nilならスルーする。
  - (edraw-find-shapes-by-xy shapes xy)
  - (edraw-find-shapes-by-xy editor xy)
  - (edraw-find-shapes-by-rect shapes rect)
  - (edraw-find-shapes-by-rect editor rect)
  - (edraw-hit-input-p spt xy)
- edraw-update-imageで要素フィルターを指定する。そのフィルターは、elementから内部属性を通じて内部属性であるedraw-shape-from-element-no-createを使ってshapeオブジェクトを取得し、visibilityを確認し、非表示なら要素の出力を抑止する。
- 選択図形に対する「一時的に非表示」「一時的にマウス入力不可」操作を追加する。メニューにはチェック項目を追加し、toggleするコマンドを追加し、キーを割り当てる。全選択時は一つでも非表示・入力不可があればチェックし、toggleで解除する。
- 「図形の一時的な状態を全てクリア」を追加しても良い。
- メソッド:
  - edraw[-editor]-toggle-visibility-selected
  - edraw[-editor]-toggle-pickability-selected
  - edraw[-editor]-clear-temporary-states-selected
** DONE 全一時状態をクリアするコマンドを追加する
CLOSED: [2024-04-01 Mon 11:17]
A!!(全選択→選択全一時状態をクリア)で可能だけど、メインメニューやドキュメントメニューからたどれた方が良い？
d!vやd!pを追加するかは迷うけど、d!!だけは欲しいかもしれない。
ドキュメントメニュー([[elisp-function:edraw-menu-document]])に入れるかドキュメントクイックメニュー([[elisp-function:edraw-menu-document-quick]])に入れるかは迷う。

document-quickに"Clear Temporary States"を追加した。キーはd!!
** DONE キー操作でポイントを平行移動したい
CLOSED: [2024-04-01 Mon 12:15]
Tが選択shapeのインタラクティブ変形になってしまったので、キー操作でポイントを変形できなくなってしまった。
インタラクティブ変形はC-tなので、Tt Ts Trを復活させる。
アイコンを書くときに困った。
** DONE コンテキストメニューを整備する
CLOSED: [2024-04-01 Mon 12:58]
m、<apps>、<menu>、S-<f10>で現在選択中のものに対するコンテキストメニューを出す。
(mは現在はメインメニューのみ)

tmm-promptを使うか迷う。
[[https://misohena.jp/blog/2024-02-17-open-context-menu-by-key-on-emacs.html][Emacsのコンテキストメニューをキーから開く | Misohena Blog]]

とりあえずマウスとの組み合わせで使うことが多いので普通のメニューを表示させたい。オプションでtmm-promptにできても良いけど。
[[*メニュー表示にtmm-promptを使うか設定できるようにする][メニュー表示にtmm-promptを使うか設定できるようにする]]に先送りする。
** DONE プロパティエディタにコンテキストメニューを表示するボタンを追加する
CLOSED: [2024-04-01 Mon 15:29]
表示中の対象に対するアクションを実行できるようにする。
一時的に非表示やマウス入力不可にしているときにも使える。
まぁ、mキーなどを押せば良いんだけど。
** DONE プロパティエディタに複数shapeに対する操作メニューボタンを追加する
CLOSED: [2024-04-01 Mon 19:57]
[[*プロパティエディタにコンテキストメニューを表示するボタンを追加する][プロパティエディタにコンテキストメニューを表示するボタンを追加する]]で単独のshapeに対するコンテキストメニュー表示は実装した。
しかし、multiple-shapesに対するコンテキストメニューは実装が少々面倒だと分かった。

選択図形に対するコンテキストメニュー生成は[[elisp-function:edraw-menu-items-shape-common]]が行うが、この関数は単独の図形か、または、 *選択された* 複数の図形しか考慮していない。選択されていないかもしれない複数の図形では問題が生じる。

メニューを変換する[[elisp-function:edraw-menu-items-shape-common--convert]]も対象がedraw-multiple-shapes-pであるなら、それはすなわち選択されている図形だと判断してeditorの選択図形用のコマンドをメニューに載せてしまう。

通常はmultiple-shapesが含む図形はエディタが選択している図形と一致している。しかし、何かの拍子に選択されていない複数の図形群がプロパティエディタのターゲットになっているかもしれない。例えば、複数の図形を選択してプロパティエディタで見ているときに、エディタ側で右クリックして選択を解除したら、プロパティエディタの方は未選択になったmultiple-shapesを表示し続ける。この状態でもしこれまでのコンテキストメニューを表示して選択図形の操作をしたらどうなるか。

次のことをしなければならない:

- [[elisp-function:edraw-menu-items-shape-common--convert]]を修正して複数図形に対するコマンドは、対象の全てが選択されているかそうでないかで使用するコマンドを変える。全てが選択されているならedraw-editor-系コマンドを使って構わない。そうでなければ、単独の図形に対するメソッドと同じ物を使うべき。
- 単独のedraw-shapeに対するメソッドがedraw-multiple-shapesにも適用出来るか確認し、不足しているメソッドを追加する。

この作業は想像以上にダルい。少し手を付けてみたが、あまりのだるさに戻してしまった。作業手順を工夫する必要がある。

1. まず何よりedraw-multiple-shapesに必要なメソッドを追加する。editorは選択オブジェクト群に対してはそのメソッドを呼ぶように徹底する。
2. 複数の図形に対するsetやget、toggleは意味を明確にする必要がある。selected、visible、pickableについて。
** DONE 選択図形に対する操作はedraw-multiple-shapesを介すべき?
CLOSED: [2024-04-01 Mon 20:41]
「選択された図形」といった図形のリストはいったんedraw-multiple-shapesに保持させて、それを操作する方が良い。選択図形以外でも複数の図形を一度に操作したいことはあるはずなので。

操作メソッドはlistを引数に取るよりはedraw-multiple-shapesを引数に取った方が方が明確になると思う。(list edraw-shape)のような限定ができないので。

次のメソッドが対象。

- [X] edraw-translate-selected
- +edraw-scale-selected+
- +edraw-rotate-selected+
- [X] edraw-transform-selected
- [X] edraw-group-selected-shapes
- [X] edraw-ungroup-selected-shapes
- [X] edraw-delete-selected
- [X] edraw-bring-selected-to-front
- [X] edraw-bring-selected-forward
- [X] edraw-send-selected-backward
- [X] edraw-send-selected-to-back
- [X] edraw-editor-copy-selected-shapes
- [X] edraw-editor-cut-selected-shapes
- [X] edraw-editor-duplicate-selected-shapes

このうちいくつかは実行後に図形が削除されることに注意。

ところで(shape list)を取るメソッドはundoをまとめなくて良いのだろうか。

正直そこまで積極的に必要というわけでもないが……。

[2024-04-01 Mon]プロパティエディタにコンテキストメニューを表示するボタンを追加したときに直した。
** DONE 複数選択図形のカットはおそらく間違っている
CLOSED: [2024-04-01 Mon 21:58]
edraw-copy-selected-shapesはedraw-selected-shapes-back-to-frontを使っているのにedraw-cut-selected-shapesは ~(copy-sequence (edraw-selected-shapes~ を使っている。おそらく順番が不定になると思う。もしくはcopyの方が不必要なことをしているか。
** DONE Version 1.2.0
CLOSED: [2024-05-19 Sun 15:32]
- edraw.elのPackage-Versionを1.2.0にしてコミットする。
- タグを打つ。 git tag -a v1.2.0 -m "Version 1.2.0"
- edraw.elのPackage-Versionを1.2.1にしてコミットする。
** DONE 変形/矢印キーでグリッド間隔だけ移動できるようにしたい
CLOSED: [2024-05-19 Sun 16:08]
Ctrl+矢印キーでグリッド間隔だけ移動する。
** DONE 変形/矢印キーで設定した量の移動が出来るようにしたい
CLOSED: [2024-05-19 Sun 17:31]
1ピクセル未満の移動がしたい。
設定で矢印キーの移動量を一時的に変更したい
アイコンを書くときに困った。
特別なキーを使うという方法もある。Ctrl+Shift+矢印キーとか。

- edraw-editor-move-distance-by-arrow-key 変数を追加する。
- Ctrl+Shiftのデフォルト移動量を0.125にする。

エディタの中から設定を変更する機能は必要になったら考える。
** DONE 変形/矢印キーで移動するときにグリッドにスナップするようにしたい
CLOSED: [2024-05-19 Sun 19:42]
図形の移動はスナップしなくて良い。あくまで点(アンカーやハンドル)の話。
edraw-editor-move-distance-by-arrow-key変数の移動量値としてgridの代わりとなるsnapを追加する。
snapが指定された場合、図形の場合はgridと同じ。点の場合は次のグリッド線上に移動する。
** DONE ドキュメントのサイズ変更時に幅と高さを%で指定出来るようにしたい
CLOSED: [2024-05-20 Mon 11:04]
[[elisp-function:edraw-read-number-with-unit]]を追加し、それを使うようにした。
頑張ってプレビューも表示するようにした。
** DONE 変形/スケーリング時に拡大率を%やピクセル数で指定出来るようにしたい
CLOSED: [2024-05-20 Mon 16:55]
[[elisp-function:edraw-read-number-with-unit]]を使うようにした。
- edraw-read-scale-params => edraw-scale-all-shapes, edraw-scale-selected, edraw-scale edraw-shape, edraw-scale edraw-multiple-shapesに影響。
- edraw-scale-interactive edraw-shape-transformer
- edraw-set-scale-interactive edraw-shape-transformer
** DONE edraw-editor-tool-freehand-bezier-fitting-toleranceを追加する。
CLOSED: [2024-05-24 Fri 13:06]
ベジェフィッティングの時の許容量は現在2.0決め打ちになっているので、これをカスタマイズできるようにする。デフォルトは1.0にしてみる。

** DONE edraw-editor-tool-freehand-smoothing-methodに関数を指定可能にする。
CLOSED: [2024-05-24 Fri 13:06]
不要だが、ついでに。

** DONE 手書きツールのヘジェフィッティング前にコーナー(カド)を除外する
CLOSED: [2024-05-24 Fri 13:17]
Bezier fitting(edraw-editor-tool-freehand-smoothing-methodが'bezier-fitting)は鋭いカド(角)がなまってしまうという欠点がある。例えば次のパスを右クリックして「滑らかにする」を選ぶと、右上の角が大幅に丸くなってしまう。

[[edraw:data=H4sIAHsTUGYAA3VQUW7DIAy9CnJ/02DaKkqqkBNkh8gKAZQUKsJKevt5qSLtYxOyrWe/52fRLk/D1vvsFwk2pceV85xzmc9liIafEJETA96U6zo7P/1FFE3T8G0KLDuVrATSArPaGZskiJrAU8fFBU+oFNC1Ud8SWyXQ5LXlf4VOSdAqDvn4OdwmE8OXV8CWFMOkJfjgNbDRzbOEwziOwHjXmt+ioF7k9xiSZdT8OGFxwb6m3PSiqopz3YsLFgKRINUK93Xv1bvRQeDP2xvH/d7NkBsK+qruG3sOq7FSAQAA]]

ただし、これが問題になるのは点の飛びが大きい場合に限られる。基本的にフィッティング後のベジェ曲線は全ての入力点の近くを通過するので、入力点が細かければそうそう大きく外れることはない。外れるように見えるのは、入力点が少なく、その少ない点を通過するベジエ曲線を生成するから。実際のところ、入力点が少ない場合、何が正解なのかは完全には分からない。実際に丸い曲線を描いた(しかしその途中の点を取りこぼした)のかもしれないし、鋭角を描いたのかもしれない。ただ、入力点の間隔が空いているところは、基本的に素早く動かした可能性が高いので、あまり大きく曲線にしない方が良さそうではある。その辺りをうまく調整したい。

新しいスムージング方式を作成しても良いが、とりあえず先に既存のbezier-fittingを改善する。

カドがなまるのを防止するために、カドと認識される場所であらかじめ線を分割しておき、それぞれに対してベジェフィッティングを行うようにする。

カドかどうかの認識は、前後の点との距離や角度で判定する。

次の二つのカスタマイズ変数を追加:
- [[elisp-variable:edraw-editor-tool-freehand--bezier-fitting-corner-angle-min]]
- [[elisp-variable:edraw-editor-tool-freehand--bezier-fitting-corner-distance-min]]

次の関数を追加:
- [[elisp-function:edraw-editor-tool-freehand--smooth-bezier-fitting]]
- [[elisp-function:edraw-xy-points-to-curves]]
** DONE キーボードによるスクロールを改善する(移動量カスタマイズ、ヘルプ、+/-)
CLOSED: [2024-05-24 Fri 17:30]
インタラクティブスクロール(SPC:edraw-interactive-scroll-and-zoom)でキーボードでスクロール出来るが、表示される操作ヘルプに載っていないので気がつかない。ちゃんと矢印キーが効くことを明示する。

ついでに移動量をカスタマイズできるようにし、デフォルト値を増やす。1pxスクロールしたいということはそうそう無いので。

ついでに+/-キーでズームできるようにする。
** DONE ドラッグ中に down-mouse-1- などと表示されるのを何とかする
CLOSED: [2024-05-25 Sat 08:32]
ボタンを押し下げて1秒ほどするとエコーエリアに down-mouse-1- などと表示される(messageバッファには記録されない)。これはread-eventの作用。
promptを設定することで回避可能だが、毎回promptを更新するのも効率が悪そう。ドラッグ中は処理速度が入力できる点の数に影響してしまうので、不安要素を増やしたくない。

エコーエリアにイベントを表示しているのはread_char関数。

[[file:~/work/emacs_build/emacs-29.2/src/keyboard.c::&& echo_keystrokes_p ()]]

[[elisp-variable:echo-keystrokes]]という変数でエコーを何秒後に表示するか、または表示しないかを設定できる。read-eventの間だけecho-strokesを0にすることで回避する。

本当はread-eventを直接使わず、一時的なキーマップ(set-transient-map)を使用すべきなのだろうけど、今はまだその時では無い。
** DONE 選択操作後に現在の選択状態を表示する
CLOSED: [2024-05-26 Sun 19:07]
主に選択ツールにおいて、選択状態を変更した後に現在の選択数などを表示したい。

- 選択ツール
- パスツールのアンカー、ハンドルクリック
- 全選択トグルコマンド
** DONE 選択ツールが何をしたかを表示する(座標表示もする)
CLOSED: [2024-05-26 Sun 19:07]
(各種修飾キーも含めて)クリックやドラッグ時に何が起きたのかをユーザーに報告する。

誤操作を防止する効果もある。クリックしたつもりでドラッグしてしまうようなことがよくあるので、それに気がつくようにしたい。

「[[*選択操作後に現在の選択状態を表示する][選択操作後に現在の選択状態を表示する]]」も行う。

ついでに「[[*座標を表示する機能を追加する][座標を表示する機能を追加する]]」のために座標を表示する。何をしたかのメッセージの後に (Click:123,456) のように表示する。ドラッグ(矩形)で範囲を選択した場合は、 (Range:X123 Y:234 W:567 H:890) のように表示する。右や左では無く幅や高さにするのは、ドラッグで寸法を計測できるようにするため。
** DONE edraw-svg-decodeとedraw-svg-decode-svgの違いが分かりづらい
CLOSED: [2024-05-27 Mon 10:51]

[[elisp-function:edraw-svg-decode]]と[[elisp-function:edraw-svg-decode-svg]]の二つがあるが違いがパッと見分からない。

これらは「[[*シェイプピッカーで図が表示されないのを修正する。][シェイプピッカーで図が表示されないのを修正する。]]」で分割された関数。

[[elisp-function:edraw-svg-decode]]は<svg>要素に限らないXML文字列をデコードし、[[elisp-function:edraw-svg-decode-svg]]は<svg>要素全体をデコードするために用意されている。edraw-svg-decode-svgの方にはedraw-svg-decodeに加えて、トップレベルコメントへの対処やルートsvg要素に対するxmlns=属性の補完処理が入っている。

これらは(libxmlを使っているので)XML名前空間を正しく扱えないが、基本的にedrawが出力したXMLのみを処理するので問題ない。必要に応じて名前空間の補正処理を入れてある。href→xlink:href、xmlns:xlink=追加、xmlns=追加など。Inkscapeが出力するSVGのように別の名前空間を使っていてその属性名がSVGのと被る場合(inkscape:versionとか)や、xmlnsをあまり一般的では無い使い方をしている場合は問題になるので注意すること。

利用実態:

- edraw-svg-decodeを直接利用しているところは、shape pickerがらみでSVG XML文字列をDOMノードに変換する部分だけ。(edraw-svg-decode (concat "<g>" text "</g>"))のような使い方をしている。もちろん、それに加えてedraw-svg-decode-svgもedraw-svg-decodeを利用している。
- edraw-svg-decode-svgを利用しているところは、edrawで作成したデータを読み込むところだけ。edraw-org-link-load-svg、edraw-mode--parse-svg、edraw-svg-read-from-file。

対策:

- 関数名を改名する。 edraw-svg-decode → edraw-svg-decode-xml
- 関数ドキュメントを書く。
** DONE ORG/plainリンクとangleリンクの編集に対応する
CLOSED: [2024-05-27 Mon 22:03]

現状でもエディタは開くが保存が出来ない。

plainリンクの例(たまたま末尾が=ではない！):

edraw:data=H4sIAKtwVGYAA6WS4W6DIBDHX4Vcv7YCzjS2EZ+ge4F9c4pIZGCQFfv2Q9G1H7Ys20Lgchz3u/9dKMarQF42rmOQ5gRQx6Xo3OpMb0qPDDrnhjPG3vvEPyXGCpwSQnBIBXTldpRGM6AJXRPOk5K6/yqNnk4nvEShLCyvHZoYhDq35fxWhmwY8MZW/vBa1b2w5l03gEZnTc8ZaKM5oFYqxWDXti0gXBbiMck0t1CPKyWHkX++zOd1x+womdd2cdjUALJBXhYCdoq2Dv4sq56ixWsvvwZvTeb35vM4jblMoNNjxA+V61Do5zkj+zQjl5zsQ+hC0+jG25dtCHEgP5d/BAfcgkwj6z+oGbGoO/4VhUXY4XeVH+BZSYGeAgAA

plainリンクの例(末尾が=):

edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==

plainリンクの例(末尾にオプション):

edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==;eop=1

angleリンクの例:

<edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==>

[[elisp-function:edraw-org-link-replace-at-point]]でorg-link-plain-reやorg-link-angle-reを使えばOK。
** DONE ORG/リンクのdescription部分のangleリンクに対応する
CLOSED: [2024-05-28 Tue 09:10]

例えば次のようなリンク。

[[https://misohena.jp/][<edraw:data=H4sIAAcCVGYAA3WQ2w6DIAyGX4V018phh0wjvosbiEQHCzBxbz/mNO5iS0MbaH/+L638qFDUInQcjicCqJNadYHDgaXLdBuM59CFcC8xjjHmcZ9bpzAjhOAkBTRK57U1HGhOF0E5Ddr0v2S0KAo8d6GunLwGNHFIPs85/8XQgoMUronZpbn2ytmHEYB8cLaXHIw1ElCrh4HDrm1bQLiu1LfIiufqt46d37H9saPkHetDtqCwDeS8ATL2QabzipaaPLFKJy2lfgFkJ5GEVQEAAA==>]]

次の処理が出来るようにする。
- +インライン画像表示+ →保留
- 編集開始 ([[elisp-function:edraw-org-link-element-path-in-description]]を修正する)
- 編集保存 ([[elisp-function:edraw-org-link-replace-at-point]]を修正する)
- +他にも変換操作に問題があるかも？+
- +エクスポート+ →description内のangleリンクは(おそらくorg-modeのバグで)エクスポートできない。[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/lisp/ox.el?id=66cb45658dd1bd546e7051de05a99689b4483282#n4342][org-export-insert-image-links]]内でorg-link-angle-reが使われているからできると思ったのだけど、これorg-link-angle-reにマッチしてもorg-link-plain-reの方のマッチデータ(1番と2番)しか参照していないから意味が無い。angleの方にマッチしたとき、typeとpathは常にnilになってしまう。
** DONE ORG/リンクのdescription部分にあるplainリンクがエクスポートされない
CLOSED: [2024-05-28 Tue 09:11]
(注意: org-datauri-image.elが有効だとエクスポートできてしまうので注意。テスト時は[[elisp-function:org-datauri-image-deactivate]]すること)

問題: description部分にplainリンク構文で ~edraw:data=~ リンクを置いたときに、それがエクスポートされない場合がある。例えば次のリンク。description部分にedrawリンクがあるが、その末尾が==になっているので正常にエクスポートできない。

[[https://misohena.jp/][edraw:data=H4sIAJeVLGEAA3WQ0Q7CIAxFf4XUZwdoNM6M/YsOxsgQDKDMv7duJBqjD5TSlnNz28S7JtnINAjYMAZkUEYPqTzuKkTjnQBecSDTxbooYEjpeqQ051zlbeWDpjjLKILKyHGyxo2/Bnld13TuQtsE1aX/0pMAjI859sZaAau+74HEFPyoBDjvFBAjBSgZTnl9PnWjDv7mJKLpi902+rPv5QM7ylpzjeoLUwSklEA6VOaMVajboXw9ZwGL+yXD2u6VoUqBFSv/kWFGLn/54o2zxR3f4F2WcPjYwZ69bVCNB9fbPgGrfBSIrQEAAA==]]

原因: [[elisp-function:org-export-insert-image-links]]関数でorg-link-plain-reにマッチしないのが原因。

例えば次のコードがnilになってしまう。

#+begin_src elisp
(string-match (format "\\`\\(?:%s\\|%s\\)\\'"
                      org-link-plain-re
                      org-link-angle-re)
              "edraw:data=H4sIAJeVLGEAA3WQ0Q7CIAxFf4XUZwdoNM6M/YsOxsgQDKDMv7duJBqjD5TSlnNz28S7JtnINAjYMAZkUEYPqTzuKkTjnQBecSDTxbooYEjpeqQ051zlbeWDpjjLKILKyHGyxo2/Bnld13TuQtsE1aX/0pMAjI859sZaAau+74HEFPyoBDjvFBAjBSgZTnl9PnWjDv7mJKLpi902+rPv5QM7ylpzjeoLUwSklEA6VOaMVajboXw9ZwGL+yXD2u6VoUqBFSv/kWFGLn/54o2zxR3f4F2WcPjYwZ69bVCNB9fbPgGrfBSIrQEAAA==")
#+end_src

末尾に==があるとダメ。

対策案1: org-link-plain-re(とorg-link-any-re)を書き替える

理想的には、 org-link-plain-re (とorg-link-any-re) を恒久的に書き替えてしまうべき。そもそも次のようにプレインリンクを書いたときに末尾の==がリンクに含まれない時点でおかしいので。

edraw:data=H4sIAJeVLGEAA3WQ0Q7CIAxFf4XUZwdoNM6M/YsOxsgQDKDMv7duJBqjD5TSlnNz28S7JtnINAjYMAZkUEYPqTzuKkTjnQBecSDTxbooYEjpeqQ051zlbeWDpjjLKILKyHGyxo2/Bnld13TuQtsE1aX/0pMAjI859sZaAau+74HEFPyoBDjvFBAjBSgZTnl9PnWjDv7mJKLpi902+rPv5QM7ylpzjeoLUwSklEA6VOaMVajboXw9ZwGL+yXD2u6VoUqBFSv/kWFGLn/54o2zxR3f4F2WcPjYwZ69bVCNB9fbPgGrfBSIrQEAAA==

(Base64には=以外にも+や/も使われるので、それが末尾に来る可能性がある。/は末尾に来てもplain linkと判定されるので問題ない)

出来ればedrawリンクの時だけ末尾の文字を拡張すべき。

org-link-plain-reは二つのグループを持っていて、typeとpathを取得できるようになっている。先に元の正規表現がマッチしてしまうと末尾の==を含めようがないので、左に新しい正規表現を追加すべきだが、そうすると括弧のカウントがずれてしまう。なので、元の正規表現の括弧に番号を付け、その上で番号付き括弧がある正規表現を左に足す。

次のようにすれば org-link-plain-re にbase64を含ませることが出来る。これを org-link-make-regexps 関数の後で実行すれば良い。

#+begin_src elisp
(setq org-link-plain-re
      (concat
       "\\(?:"
       (let* ((non-space-bracket "[^][ \t\n()<>]")
              (parenthesis
               `(seq "("
                     (0+ (or (regex ,non-space-bracket)
                             (seq "("
                                  (0+ (regex ,non-space-bracket))
                                  ")")))
                     ")")))
         ;; Heuristics for an URL link inspired by
         ;; https://daringfireball.net/2010/07/improved_regex_for_matching_urls
         (rx-to-string
          `(seq word-start
                ;; Link type: match group 1.
                (group-n 1 "edraw")
                ":"
                ;; Link path: match group 2.
                (group-n 2
                  (1+ (or (regex ,non-space-bracket)
                          ,parenthesis))
                  (or (regexp "[^[:punct:] \t\n]")
                      (regexp "[=+;]") ;;Base64とedrawリンクのオプション区切り(;)
                      ?/
                      ,parenthesis)))))
       "\\|"
       ;; \\( => \\(?N:
       (let ((n 0))
         (replace-regexp-in-string
          "\\\\(\\(\\)[^?]"
          (lambda (orig) (format "?%d:" (cl-incf n)))
          org-link-plain-re t nil 1))
       "\\)"))
#+end_src

ただし、この方法は括弧の番号を固定してしまっているので、他の正規表現と組み合わせて使う場合に番号を壊してしまう可能性がある。例えば同時にorg-link-any-reも更新すべきだが、これは括弧の番号が変わってしまうのでそのままでは出来ない。

edrawリンクに限らず全てのタイプの末尾に記号を許容しても良いかもしれない。これはorg-dataurl-imageでエクスポートの時に行っている手法。他の正規表現と組み合わせたときに括弧の番号を壊す心配も無い。

#+begin_src elisp
(replace-regexp-in-string (regexp-quote "\\(?:[^[:punct:]")
                          "\\(?:[=+;]\\|[^[:punct:]"
                          org-link-plain-re t t)
#+end_src

あまり安全に解決できないのが困る所。将来org-link-plain-reが変更されたときにどうなるか全く分からない。同じように変更しているelispがあった場合にも困る。

+諦めてdescriptionにはangleリンクを推奨するのでも仕方ないか。+ angleリンクはエクスポートで画像にならない(!)のでそれはダメ(おそらくorg-modeのバグ)。

末尾がorg-link-any-reとマッチする文字なら良いので、それを付加することで回避可能。末尾にはなぜか括弧で囲まれた文字列を指定出来るようになっているので、末尾に「()」を付けてそれを読み飛ばすようにすれば回避できる。それよりも、末尾にダミーのプロパティを追加した方が簡単。例えば末尾の=の後に ;eop=1 を付ける。

[[https://misohena.jp/][edraw:data=H4sIAJeVLGEAA3WQ0Q7CIAxFf4XUZwdoNM6M/YsOxsgQDKDMv7duJBqjD5TSlnNz28S7JtnINAjYMAZkUEYPqTzuKkTjnQBecSDTxbooYEjpeqQ051zlbeWDpjjLKILKyHGyxo2/Bnld13TuQtsE1aX/0pMAjI859sZaAau+74HEFPyoBDjvFBAjBSgZTnl9PnWjDv7mJKLpi902+rPv5QM7ylpzjeoLUwSklEA6VOaMVajboXw9ZwGL+yXD2u6VoUqBFSv/kWFGLn/54o2zxR3f4F2WcPjYwZ69bVCNB9fbPgGrfBSIrQEAAA==;eop=1]]

- edraw-org-link-replace-at-pointで必要に応じて ;eop=1 を付加する。
- edraw-org-link-props-parseでeopプロパティを無視する。
** DONE ORG/plainリンクとangleリンクをインライン表示する
CLOSED: [2024-05-28 Tue 12:20]
(一応表示できるようにしてみたが、ブラケットの中を編集する時にplainリンクが画像化されるとかなり邪魔に感じたのでデフォルトでは無効にした)

org-display-inline-imagesはなぜかplainリンクとangleリンクをインライン表示しない(description部分にあるplainリンクとangleリンクは表示する)。

これらはエクスポートすれば画像に置き換わるので、インライン表示されてしかるべきだと思う。

plainリンクの例(たまたま末尾が=ではない！):

edraw:data=H4sIAKtwVGYAA6WS4W6DIBDHX4Vcv7YCzjS2EZ+ge4F9c4pIZGCQFfv2Q9G1H7Ys20Lgchz3u/9dKMarQF42rmOQ5gRQx6Xo3OpMb0qPDDrnhjPG3vvEPyXGCpwSQnBIBXTldpRGM6AJXRPOk5K6/yqNnk4nvEShLCyvHZoYhDq35fxWhmwY8MZW/vBa1b2w5l03gEZnTc8ZaKM5oFYqxWDXti0gXBbiMck0t1CPKyWHkX++zOd1x+womdd2cdjUALJBXhYCdoq2Dv4sq56ixWsvvwZvTeb35vM4jblMoNNjxA+V61Do5zkj+zQjl5zsQ+hC0+jG25dtCHEgP5d/BAfcgkwj6z+oGbGoO/4VhUXY4XeVH+BZSYGeAgAA

plainリンクの例(末尾が=):

edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==

plainリンクの例(末尾にオプション):

edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==;dummy=1

angleリンクの例:

<edraw:data=H4sIAO9wVGYAA6WS3W6DIBSAX4Wc3raCzDTaiE/QvcDunCISGRhkxb79UOraiy3LthA4OX/f+QnldBFoflN6YtA7N54w9t4n/ikxVmBKCMEhAmLIaVZSD18FpkVR4NULyMvW9QxoRgD1XIre3ZQLt5M0mkGapFCVljcOzQyC57q+3ybKlgFvbe0Pr3UzCGvedQtoctYMnIE2mgPqpFIMdl3XAcJVKR6TTHsN9bhScpz4Z2S+nDtml5LlbIbD1g0gG9pb2rBzlE3Qj4uco8S3WX4N3obM78PncRs0iEBPs4gfa9ejMM8zJXtKyflI9sF1TklUo/VlW0JcyM/lH8EBtyJpZP0HtSDW7rK/orAIN3y76gOx9jgRngIAAA==>

ついでにdescription内のangleリンクも:

[[https://misohena.jp/][<edraw:data=H4sIANlMVWYAA3VQUQ6DIAy9Cum+FXHJoka8ixMEooMFmeDthzrjPrY0bdP2vfal9TQLFB6jnihI554Vxt771F9TYwXOsyzDEQE7pAqj0sMvICnLEm9TQF4xJylELiDJlZDuU8zcTspoCiQl0NSWdw4FCnGybPEvUTEKnNnWJ/e2G4Q1L80ATc6agVPQRnNAvRpHCpe+7wHhphbfJMOW494BK1Y7d1xIttrRSA4pp5DiFEhuu+Q8prCneBGL6PFXzRtlAKW2UwEAAA==>]]

カスタマイズ変数edraw-org-link-image-link-formatsを追加した。
** DONE ORG/容量の大きいデータリンクが正しくインライン表示されないことがある
CLOSED: [2024-05-28 Tue 14:15]
問題:

edraw-org-link-image-modeでインライン画像表示しているときの話。
LaTeXで数式を沢山入れると簡単に数万文字程度になってしまうが、そうすると編集直後やファイルを開いた直後などに文字列のままになってしまうことがある。リンクのfont-lockが中途半端な状態になっていることもある。

原因推測:

+おそらく長すぎてfontify範囲の末尾がリンクの末尾より前になっているのだと思う。+ fontify範囲の末尾がリンクの末尾より前にあっても、リンクの末尾まで画像化するようになっている。

原因:

1行の長さが大きいとリンクの途中からfontifyが始まることがあるのが原因。リンクの途中からfontifyが始まると、開始位置から次のリンクの先頭までの間にあるオーバーレイは全て削除してしまう。なので画像が表示されない。

対策:

fontifyの先頭がリンクの途中かどうかを調べ、もし途中ならそのリンクも更新する。

[2024-05-28 Tue]追記
原因2:

re-search-forwardのbound(end)がリンクの終わりよりも前なので、正規表現に終わり括弧まで含まれているとマッチしない。その後の範囲のfontifyが実行されればその時に画像化されるが、それが遅延されていると画像化されない。

対策2:

re-search-forwardのbound(end)を行末まで拡張するか迷ったが、正規表現を ~edraw:~ の後1文字までに限定した。
** DONE 手書きツール/ドラッグ中に外に出た場合の挙動を改善する
CLOSED: [2024-05-28 Tue 17:14]
外に出ても続いている方がいいのではないか？
外に出た場合にどうする？
- 打ち切る
- ビューの外に線を描く
- ビュー内に線を描く(ビューの境界に沿って直線を描く)

カスタマイズ変数[[elisp-variable:edraw-editor-tool-freehand-dragged-outside-view]]を追加した。

デフォルトは従来通りの動作にしておいた。他の環境で正しく動くのか不安なので。

[2024-05-29 Wed]追記:他の環境でもテストしたのでデフォルトを外に線を描くものにした。
- Ubuntu22 (Emacs27.1)
- Debian12 (Emacs28.2 GTK+)
- Mac Mini (Emacs27.?)
** DONE edraw-shapeオブジェクトの作成を静的メソッドを使うようにする
CLOSED: [2024-05-29 Wed 08:53]
edraw-shape-types変数(edraw-shape-type-alistへ改名)は中途半端なので、alistの値として:classのみを持つようにして、:from-elementと:create-elementはそのクラスの静的メソッドにする。

ついでにedraw-shape-type-alistに直接初期値を指定するのでは無く、各defclassの近くでtypeとshape-classを登録するように変更する。edraw-shape-type-set関数を追加。

これにより新しいオブジェクトタイプを追加しやすくする。
** DONE 変形/GUI変形で原点の移動時にビューの拡大率を考慮する
CLOSED: [2024-05-29 Wed 09:24]
グリッドにスナップさせたいのに近くにある図形の中心にスナップしてしまう。
ズームしても回避できない。
図形の中心や辺・角へのスナップ範囲がビューの拡大率を考慮していないので、ズームするとスナップする見かけの距離まで大きくなってしまう。
** DONE テキストをアンカーポイントを使って移動できないのを直す
CLOSED: [2024-05-29 Wed 09:43]
問題:
アンカーを選択して移動させようとしても移動できない。
図形全体は移動できる。

原因:
完全なうっかりミス。新しい座標が現在の座標と *同じ時* (when)に再設定していた。 *違うとき* (unless)に再設定しなければならない。
** DONE パス編集/サブパスを作成・解除するコマンドを追加する
CLOSED: [2024-05-30 Thu 13:15]
- 複数のパスを結合するコマンドを追加する。 [[elisp-function:edraw-combine-paths]]
- 一つのパスの中のサブパスを分割するコマンドを追加する。 [[elisp-function:edraw-split-subpaths]]
- コンテキストメニューはpath用と共通用の両方を修正する。
- 複数選択した図形が全てパスかどうかを判別するために [[elisp-function:edraw-shape-uniform-class]] メソッドを追加する。これを使って共通用のコンテキストメニューは表示を切り替える。
** DONE パス編集/サブパスを任意のアンカーポイントで分割するコマンドを追加する
CLOSED: [2024-05-30 Thu 19:23]
現在あるのは「パス(オブジェクト)」を分割するコマンド。
メニューには、複数のサブパスがある場合にのみ従来のコマンドの代わりに表示する。すでに複数のサブパスがあるなら、サブパスを増やす操作があっても良い。
一つのサブパスしか無い場合は従来のコマンドを表示する。不用意にサブパスを増やす操作をしてほしくないから。
** DONE パス編集/パスツールでサブパスを編集できるようにする
CLOSED: [2024-06-02 Sun 15:54]

- 編集の開始
  - 新しいパスを開始する
  - 新しいパスを開始して接着する
  - 任意のサブパスの端点を延ばせるようにする(現在はpath dataの最初と最後しか延ばせない)
- 端点同士を連結する
  (edraw-connect-anchor-to-anchor spt spt)
  - 同一パス内の端点同士を連結する(対象以外のサブパスはそのまま維持する)
    - 同一サブパス内の端点同士を連結する (つまり閉じる)
    - 別サブパスの端点を連結する (つまり二つのサブパスを一つにする)
  - 別パスの端点を連結する (二つのパスにある二つのサブパスを一つにする)
- +任意の端点の隣に新しいアンカーポイントを追加する+ 順序を変えて常に末尾に追加する

** CANCELLED パス編集/cmdlistを複数のMやZに対応させる
CLOSED: [2024-06-02 Sun 15:55]
- M .. L ..... Z M .. L ..... Z のように単純に閉パスが二つあるだけのケース。
- M .. L ..... Z L ..... Z L ..... Z のような書き方も出来る。一つのMを三つの閉パスが共有している形。

path-cmdはともかく、path-pointは前後のアンカーやハンドルの取得、削除、追加等様々な処理が正しく動かなければならない。Mを指しているときは、そのMの次がどこになるのかpath-point自身が持たなければならない。

[2024-06-02 Sun]複数のM(サブパス)はともかく複数のZ(Mの共有)は無理。複数のM(サブパス)もかなり困難を極め、バグがないことを全く保証できない状況。コマンド列を編集するというアプローチは限界。
** DONE パス編集/edraw-path-cmdlist系を書き替える
CLOSED: [2024-06-05 Wed 16:45]
edraw-path-cmdlist系はSVGパスコマンドの仕様に合わせすぎた気がする。
+もっと抽象的なパスクラス(cmdlist相当)、パスセグメントクラス(cmd相当)を作った方が良かったかもしれない。パスセグメントはL、C、(可能なら)Aの線を表現する。cmdはMとかZがあって純粋にパスセグメントに相当しないから気持ち悪い。+
+SVGパスデータは複数のMが書ける(複数のサブパスを持てる)のが頭痛の種だけど、それは複数のパスオブジェクトに分割して表現するとか。+
+まぁ、結局どっちで書いても等価だし今更なんだけど。+

コマンドオブジェクトを操作するやり方は場合分けが複雑すぎる。もっと単純にアンカーとハンドル、サブパス、複合パスを表現すべき。パスコマンド列(パスデータ)との変換さえあればそれで問題ないはず。パスコマンド列の構造をそのまま使う現在の手法のメリットは編集の前後でパスコマンド列の状態を維持しやすいことくらい。しかし現在既にそれを維持するつもりは全く無い。相対コマンドは絶対コマンドへ変換してしまっている。MやLの複数の座標シーケンスも単一の座標を持つ一つのコマンドに置き換えてしまっている。今更複数Z(複数のサブパスで共有されたM)を維持することに何の意味があるのか。closing segmentもバカバカしい。そんなのはSVGのZコマンドが直線で結ぶ仕様になっているせいで本質じゃない。出力時に検出して生成すれば済む話だ。なんで編集中にclosing segmentを生成したり取り除いたり無視したりしなければならないのか。forward handle pointもコマンド列の構造をそのまま使っているせい。全てのアンカーポイントが二つのハンドルを持てる構造になっていれば済む話だ。

次の四つのデータ型を定義する。

- edraw-path-compound
- edraw-path-subpath
- edraw-path-anchor
- edraw-path-handle

: shape-path 1 -- 1 compound 1 -- 0..* subpath 1 -- 0..* anchor 1 -- 0..2 handle

同時にパスツールも全体的に見直して書き替えた。
** DONE パス編集/無駄なCをLにする機能
CLOSED: [2024-06-05 Wed 16:45]
[[*変形/GUI変形時にマウスの位置に操作種類記号を表示する][変形/GUI変形時にマウスの位置に操作種類記号を表示する]]のために図形を書いた後、無駄なCをLにするのが大変だった。
どこかのタイミングで無駄なCをLにすべきだが、どうしたらよいのだろうか。
理想的には、編集中に不要になった時点で即Lにすべきだ。
ただ、それはインデックス番号の関係で問題があったのでは無かったか。
回避策はありそうなものだが、どうだろう(アンカー番号とハンドル番号を分ける)。

[2024-06-05 Wed]edraw-path.elを書き直したときに解決した。編集中の構造と出力後の構造は完全に分離された。
** DONE パス編集/edraw-path-cmdに-backward-handle-pointタイプ(bhp)を追加する
CLOSED: [2024-06-05 Wed 17:01]
reverseはfhpをbhpに変換する。
[2024-06-05 Wed]edraw-path.elを書き直したときに解決した。d属性読み込みが発生すると消えてしまうのは仕方が無い。
** DONE パス編集/複数のサブパスがあることによる問題を調査・修正する
CLOSED: [2024-06-05 Wed 17:20]
[2024-06-05 Wed]edraw-path.elを書き替えたので多くの問題が解決した。残っている者は個別のTODOにする。

Mが複数のサブパスで共有されるケース(Zの後にMが無いケース)は諦める。出来れば検出してエラーにするなり変換するなりする。

問題は複数のサブパスが全ての部分で問題なく動くかどうか。
複数サブパスで問題がありそうな所を探す。

- パスに対するコマンド
  - パスを閉じる : 問題あり → *禁止*
  - パスを開く : 問題あり → *禁止*
  - パスの向きを反転 : 問題なし([[elisp-function:edraw-path-cmdlist-reverse]])
  - 滑らかにする : 問題あり → *禁止*
- アンカーに対するコマンド
  - 点を削除 : 多分大丈夫 ([[elisp-function:edraw-path-point-remove]]の長さを見てよ……)
  - 点でパスを分割 : 問題あり → *禁止* (その代わり *「点でサブパスを分割」を追加* )
    「パス」を分割するのであって「サブパス」を分割するのではない所に問題の原因がある。
    - 少なくともメニューに問題あり
    - サブパスも分割される
  - 前に点を追加 : 問題なし ([[elisp-function:edraw-path-anchor-insert-midpoint-before]])
  - 座標で移動 : 問題なし
  - 滑らかにする : 問題なし
  - 角にする : 問題なし
  - 接着 : 問題あり → うーん致命的では無いからいいかなぁ。概ね動くし。
  - 接着解除 : 問題なし
- ハンドルに対するコマンド
  - 点を削除 : 問題なし
  - 座標で移動 : 問題なし
- パスツールで出来る操作
  - パスデータの先頭と末尾以外(途中にあるサブパス端)からパスを延ばせない
  - パスの先頭と末尾をつなげるとつなげたところにつながらない
  - 途中のfhpは大丈夫？
  - 現在のコマンド列を編集するという構造ではまともに安全なコードが書けない。作り直すしかない。
- その他
  - 変形 : 問題なし
- 当たり判定 : 問題無さそう
- edraw-path.el内の@todo部分を見直す
- インポート

怪しい操作は全てエラーにして、後の改良項目とする。

[[edraw:data=H4sIAAZfWGYAA9VVTXObMBD9Kxrl0syAER/GTsZ4puXSA7700tQ3CgJTE/AIbJx/35VWshNst5n2lDGapxX78Z4WyYvuUJLjc910Ed30/e7RcYZhmAz+pBWl4zHGHPCg6PJ4rKtme83RfXh4cNRbSoYq7zcRnYaMkg2vyk0f0cAD48BFV7VNRN2JS5eLnBcdqfKI8lykgy1NWH1OxZaLt+s2s1Mh2oESfPsdK8yN/VVXmVGyE7zj4sA/dzue9d/Svmoj2rQNh/IVH760x4jaLiNyePKhRPDiKaI4+aEmrah4A/nSfd9S0vWi3XKTpajqOqJ3LpM/4LtL+w0BsivIaNkzmdiakcBia0qc5cJBhjd0eXZWiazmI2HBWFjwTmFTAg8oc/9bFvIi2VFFZi+YSTH5qyr3arfCsajwo3XL/wC6UJZSZV/KcuQhWy4EkCLYWWzszSN73oCfabYtRbtv8htciqJQxcrXQW3+YthhkA13BP/VVnALvElmawp+eE5v5OkKWE2JnDMrYIkbMssN2AotNBQFVQ8127yBiL2oP91dXCf3pnN216eiv3Azp/N+TNK7yRF2Aa5MhjQ9SSlkiecxC4bi6zOwA41AHOaxRiL9wY/40p+xlTTnEBZoDHUasF1pM0RcjnVwqBZJoFKed0Py8eU78NRIfFnXQBLAajja7AuVF/vwOr/MALxVJiCXTIHEnMUIRAJIMBifbFRrMNFZ1v/K5I8t9cedv/Z5uCen97b9/Gn62NtYI/GxEQaTgJ0R+pxovzUGBjoQAuD4WdAog/HJxo/IIJ7vEgb8TS9/A+0Dv+vOBwAA]]
** DONE 無効になったハンドルやアンカーが選択されたままになる
CLOSED: [2024-06-06 Thu 11:44]
パスツールで二つ以上アンカーを追加してUNDOすると、消えたアンカーがまだ選択され続けていてそれをドラッグしようとして無効なハンドルを動かそうとしてしまう。
選択中のアンカーが無効になったことを正しく検出できていない。
二つ目以降のアンカーの追加はadd-anchor-to-open-endで行っていてこれのUNDOはd属性の復元となっている。editorの選択オブジェクト管理部はd属性の変更を検出していない。他にも似たような問題があるはず。

理想的には:
- アンカーの無効化をちゃんと検出する。網羅的に。
- 漏れがあった場合に備えて、無効なアンカーをチェックする仕組みを整備し、selected-anchorやselected-handleを取得するときに検証する。開発中はassertしたいけど。

■ (とりあえずパスツールと選択管理の修正):
- edraw-validate-last-anchorを修正。
- edraw-selected-anchorやedraw-selected-handleで無効化を検出。
- edraw-valid-point-pを追加。

■ (d(パスデータ全体)の無効化を通知していない！　検出していない！):
[[https://github.com/misohena/el-easydraw/commit/a762359290004b0d9f6bf5ab764229d66b4d2f43][Fix edraw-set-properties · misohena/el-easydraw@a762359]] のコミットでshape-path-dataという変更通知が消えてしまっている。
→ とりあえず変更通知にhint引数を追加してshape-propertiesのときにd属性の変化を検出してdeselectするようにした。

■ (無効を通知するより良い仕組みの必要性):
しかしもっと明示的に点の無効化を通知する仕組みが必要では？　各メソッドでは無効になるアンカーがあるなら、それを何らかの関数に引き渡すとか。
→別TODOとした。

■ (edraw-path-anchorやedraw-path-subpathにおいて親がnilである状況に備える):
それとedraw-path-*-parent系がnilを返すことをあまり想定していなかったかもしれない。使用箇所をチェックすべき。 →全てnullチェックを入れた。

■ (アンカーが無効になる場所):
無効化しそうな場所(関数 => 変更通知type):
- edraw-shape-pathクラス
  - edraw-set-properties => shape-properties (shapeの全anchor)
  - edraw-remove-last-anchor => anchor-remove (削除したanchor)
  - +edraw-make-smooth+ ※edraw-set-propertyでdを変更
  - edraw-combine-paths => anchor-transfer-out (anchorは消えないが全て所属先が変わる)
  - edraw-split-subpaths => anchor-transfer-out (anchorは消えないが全て所属先が変わる)
- edraw-shape-point-path-anchorクラス
  - edraw-delete-point => anchor-remove
  - +edraw-make-smooth+ ※以前はhandleを消すことがあったが現在は消えない
  - +edraw-make-corner+ ※以前はhandleを消すことがあったが現在は消えない
  - edraw-connect => anchor-transfer-out
- edraw-shape-point-path-handleクラス
  - +edraw-delete-point => point-move!+ =>handle-remove ※基本的にハンドルはアンカーが無効にならないと無効にならない。
- UNDO操作で上の関数を呼び出すとき

↑リストの場所では確実に変更通知を出すようにした。アンカーが削除されるところではanchor-removeを、アンカーが転出するところではanchor-transfer-outをtypeとして通知するようにした。本当はもっと具体的なconnect-anchors-outのようにしたかったが、種類の増加を管理しなければならなくなる。

■ (ハンドルの無効化):
ハンドルについては基本的にアンカーが無効にならないと無効にならないが、無効にならないからと言って何も問題が無いわけでは無い。ハンドルを選択した後にアンカーを角にするとハンドルは消えるが、カーソル操作でハンドルを動かせる。明示的にハンドルを削除しても同様。これは選択UI表示との間で一貫性がない。anchor-make-cornerというtypeも監視しているが、これは既に存在していない。edraw-make-cornerは単に前後のハンドルに対してedraw-delete-pointしているだけ。 → edraw-delete-pointではhandle-removeをtypeとして通知するようにした。
** DONE 新規の(空の)svgファイルでスケーリングがエラーになる
CLOSED: [2024-06-06 Thu 13:47]
- 現象: T sを押すとエラーが出るのを直す。
- 原因: edraw-read-number-with-unitに問題あり。文字列と正規表現とのマッチの確認に文字列を指定しないmatch-stringを使っていたのが原因。ここは珍しいケースで、部分文字列を取り出すことが目的では無く(必ず空なので必要が無い)、括弧の1番目がマッチしているかの確認のために使っている。引数に文字列を指定しなかったのでバッファの中のマッチ範囲から取り出そうとしてバッファは空なのでエラーになる。ここはmatch-beginningでnilかどうかを判定すべき。
** DONE インポート/複数のサブパスを解禁する
CLOSED: [2024-06-06 Thu 13:50]
edraw-path.elの書き換えによって複数のサブパスは完全にサポートされるようになった。

試しに次のようなパスを作ってみた。

#+begin_src svg
<path stroke-width="2" stroke="#101010" fill="none" d="M100 100C100 120 140 160 160 160 160 140 120 100 100 100ZM100 100C100 80 60 40 40 40 40 60 80 100 100 100ZM100 100C100 120 60 160 40 160 40 140 80 100 100 100ZM100 100C100 80 140 40 160 40 160 60 120 100 100 100ZM100 100C100 160 120 180 180 180" />
#+end_src

これのZの後のM100 100を消す。Zの前のMは100 100なので、再度M100 100と書く必要は無い。

#+begin_src svg
<path stroke-width="2" stroke="#101010" fill="none" d="M100 100C100 120 140 160 160 160 160 140 120 100 100 100ZC100 80 60 40 40 40 40 60 80 100 100 100ZC100 120 60 160 40 160 40 140 80 100 100 100ZC100 80 140 40 160 40 160 60 120 100 100 100ZC100 160 120 180 180 180" /></g></svg>
#+end_src

ちゃんとedrawで開けた。

[[edraw:data=H4sIAC1AYWYAA3VRy47CIBTd+xXkuraAkqY1pZtZzw/MrmMpJa1gKCP170XaqjOjgXNv4DwgUAxnicZjrwcOrXOnPcbe+8TvEmMl3hJCcFDAJNmPvdLdKyHN8xxHFpBXtWs5BC+gVijZunlxFnZQRnOgCYWysOLg0MghMJdY3xpVzUHUtvKb7+rQSWt+dA1ocNZ0goM2WgBqVN9zWDdNAwiXhXw2mfoC5ao4Va6dXZvlrEfMmpLbWJKm1JDxSQlBAR+xbwNYQPoHbObIHV/RkBEUaPY007j5T3hzz2Hs0dhrcTZR7Jc+fXMFuhDZHfGJsAwIn1uurgCxEosFAgAA]]

もちろん中心は別々の五つのアンカーと認識されるし、このパスに何か変更を加えるとd属性が更新され、SVGの出力結果は共有Mではなくなる。

まぁ、いいんじゃないかな。

というわけで、インポートはこのデータ形式を許容するように修正する。
** DONE path以外のアンカーを選択しているとエラーが出るのを直す
CLOSED: [2024-06-08 Sat 07:52]
edraw-valid-pはedraw-shape-point-path-系にしか定義されていないのに、edraw-selected-anchorで使ってしまったから。path以外にもアンカーがあることを忘れていた。
** DONE edraw-mode/change-major-mode-hookのremoveを直す
CLOSED: [2024-06-08 Sat 07:54]
~(remove-hook 'change-major-mode-hook 'edraw-mode-on-change-major-mode t))~ というコードがあるが edraw-mode-on-change-major-mode という関数は存在しない。正しくは edraw-mode-finalize-major-mode 。
しかしこれはローカルフックなので、メジャーモードが変わると全てクリアされるはず。不要なのかもしれない。
呼ばれたコールバックが自分自身をremove-hookするのは一応大丈夫っぽい。remove-hookがremqするが、現在のリンクのcdrは次を指し続けているので。
** DONE edraw-mode/編集開始時にバッファの左上を確実に表示する
CLOSED: [2024-06-08 Sat 08:00]
水平スクロールされているとエディタの左側が切れてしまう。
** DONE メニュー表示にtmm-promptを使うか設定できるようにする
CLOSED: [2024-06-09 Sun 11:02]
[[elisp-function:edraw-popup-menu]]で[[elisp-function:x-popup-menu]]の代わりに[[elisp-function:tmm-prompt]]を使う。

選択肢は「使わない」「自動判別」「常に使う」の三つ。

クリックしてキーでササッと項目を選択したい人は「常に使う」が有用なはず。まぁ、GUIのメニューでも項目の先頭文字で選べるかもしれないけど。

「自動判別」のやり方はどうだろう。y-or-n-p等、キーかマウスかで挙動が変わるのは良くある。[[elisp-function:y-or-n-p]]は[[elisp-function:use-dialog-box-p]]を使っている。

tmm-promptはデフォルトだとコマンドの実行までしてしまうので注意。NO-EXECUTE引数をtにするとコマンドシンボルを返してくる。イベントリストでは無い。

#+begin_src elisp
(defun edraw-popup-menu-tmm (name items &rest args)
  (let* ((menu-map (edraw-make-menu-map name items))
         (fn (tmm-prompt menu-map nil nil t)))
    (cond
     ((commandp fn)
      (call-interactively fn))
     ((functionp fn)
      (apply fn args)))))
#+end_src

あ、tmm-promptを日本語メニューで使うとなかなか悲惨だ。どうしよう。
英語圏の人なら使えると思うけど。

まぁ、カーソルキーで移動して使うことくらいはできる。それならGUIのメニューと同じだけど、C-nやC-pは使えるし意味はあるのかな。並び順が分かりづらいけど。

一応実装した。
** DONE ORG/インライン画像のコンテキストメニューをキーで開けるようにする
CLOSED: [2024-06-09 Sun 11:46]
S-F10やappsキーでメニューを開けるようにしたい。

一番簡単なのは、edraw-org-link-image-mapにキー割り当てを入れること。
edraw-editor-mapでは既にその方法でメニューを開くようにしている。

他の方法としてはEmacs28以降になるが、context-menu機構を使うという方法がある。

その中でも、context-menu-openコマンドをリマップするという方法がある。
: (define-key km [remap context-menu-open] 'edraw-org-link-image-menu-open)
これならユーザーがコンテキストメニューを開くキーをカスタマイズしていてもそれに追従できる。ただし、Emacs28以降でないとダメ。

もっと良いのはcontext-menu-functionsに関数を追加して、メニューマップを返すこと。
それなら私がやっているように独自のmy-context-menu-open関数を作って割り当てている場合でも対応できる。

その場合、edraw-editorの方でも同じ方法で対応したくなるが、それは難しい。edraw-editorのコンテキストメニューは対象となるオブジェクトがセットになっている場合が多々ある。その場合、単純にメニューマップを返すだけでは対応できない。(正確には、メニューマップのコマンド部分にオブジェクトをバインドしてしまえば良いのだが、そのための仕組みが別途必要)

とりあえず、キーマップにapps、menu、S-F10を追加する。そしてEmacs28以降はcontext-menu-openに対するリマップも追加する(独自のキー割り当てに備えて)。良いとは言いがたいけど、まぁ、現実的じゃないかなぁ。
** DONE キーからコンテキストメニューを開いたときの位置を改善する
CLOSED: [2024-06-09 Sun 12:37]
遠く離れたマウスカーソルの位置に出現してギョッとすることがあるので。
event-startを使って位置を決定する。
edraw-editorの時は本来は選択中の図形の位置に出るべきだが、そこまでする必要は無いと思う。
** DONE edraw-xy-equal-pを直す
CLOSED: [2024-06-09 Sun 21:35]
単にequalしているせいで(edraw-xy 0.0 0.0)と(edraw-xy -0.0 -0.0)が同じにならない。
ただし、直すときはnilを渡していないか確かめる必要がある。
** DONE パス編集/連続する閉サブパスが同じ座標から始まる場合Mを省略する
CLOSED: [2024-06-09 Sun 18:14]
「Ma b .... ZMa b ... ZMa b ...」(...の部分は[^MmZz]*) は
「Ma b .... Z ... Z ...」へ置き換えらる。

[[https://misohena.jp/blog/2024-06-07-compound-path-support.html][複数サブパス(複合パス)への対応 | Misohena Blog]]で書いた例、「M0,0 L40,-20 L40,20 Z L20,40 L-20,40 Z L-40,20 L-40,-20 Z L0,-40」は最短で「M0 0 40-20V20ZL20 40H-20ZL-40 20V-20ZV-40」まで短く出来るが、現状では「M0 0 40-20V20ZM0 0L20 40H-20ZM0 0L-40 20V-20ZM0 0V-40」なってしまうので。
無理に連続しない閉サブパスをまとめることまでは(少なくとも現段階では)しない。サブパスの順番を維持したい可能性を考慮して(ほぼ無いはずだけど)。
** DONE パス編集/Sコマンドを使用して出力を小さくする
CLOSED: [2024-06-09 Sun 18:14]
第一制御点が直前のCcSsの現在点(最終点)→第二制御点の反射なら、CではなくSが使える。もしくは、直前のコマンドがCcSsではなく第一制御点が現在点(最終点)と同じなら、これもSが使える。
** DONE SVGに出力する数値の形式(桁数など)をカスタマイズできるようにする
CLOSED: [2024-06-10 Mon 12:56]
[[elisp-function:edraw-to-string;method-args=(nil number)]]は精度は高いがSVGとしては冗長。

[[elisp-function:edraw-number-to-string]]を作って[[elisp-function:edraw-to-string;method-args=(nil number)]]はそれを呼ぶように変更した。

ちなみに(format "%s")はnumber-to-stringと同じ。Emacsの数値の状態を一対一で完全に表現できるみたい。なので-0.0と0.0の区別なんかもある。edraw-to-stringはそこは省く。

%fは必ず小数点以下の数字が出てしまうから使いづらい。後から.000を消すのであれば使えるけど。小さい値になると精度が悪くなり、一定以下になると0になってしまうのも気になるところ。

%gは余分な.0は消すから比較的使いやすい。%.7gなどとすると全体で7桁の精度を維持できる。7桁だと、1.234567や1234.567みたいな形式になる。小さくなると0.0001234567までは小数表記で、それより小さくなると指数表記になる。大きくなると1234567までいき、それより大きいと1.234568e+07みたいな感じになる。精度が一貫していて分かりやすいが、小数点以下の桁数が1～1000くらいの間で変わってしまうのが気になるところ。

絶対値が1未満は%.Ngそれ以上は%.Nf、さらに大きくなったら%.Ngに戻してはどうか。そして末尾の.0は文字列操作で消す。

いや、それよりも、桁数を計算して%gだけを使った方が良さそう。(abs n)が1以上の時、(1+ (log (abs n) 10))で整数部の桁数が分かる。この桁数をNとし、小数部の桁数をMとすると、%.(N+M)gにすれば、整数部+指定した桁数の小数部を表示させられる。整数部が大きくなりすぎたときはどこかで頭打ちにすれば小数部が少なくなっていき、しまいには指数表記になる。そのようになる[[elisp-function:edraw-number-to-string-dg]]を作成した。

SVG用の数値文字列変換を行う[[elisp-function:edraw-svg-numstr]]関数を追加し、各部はこれを使うようにする。

カスタマイズ変数[[elisp-variable:edraw-svg-number-format]]を追加し、[[elisp-function:edraw-svg-numstr]]はそれに従う。

カスタマイズ変数の選択肢:
- format文字列
- 関数
- 関数+引数
- 具体的な選択肢として edraw-number-to-string
- 具体的な選択肢として (edraw-number-to-string-dg 4 10)

デフォルトをどうするか悩む。一番安全なのはedraw-number-to-string。ちょっと使った限りでは精度を落としても問題は見当たらない。精度を落とせば無駄な容量が減って使いやすくなる。

とりあえずデフォルトは従来通りの挙動をするedraw-number-to-stringにしておく。手元では(edraw-number-to-string-dg 4 10)を使って様子を見る。
** DONE 手書きツール/最適化されたパスデータを生成する
CLOSED: [2024-06-10 Mon 18:26]
H、V、S、相対座標コマンド(l、h、v、c、s)を生成してデータサイズを削減する。
** DONE 手書きツール/スムージングの改善
CLOSED: [2024-06-12 Wed 10:08]
- パス図形の作成とスムージングを分離するオプションを追加(スムージングの前後の違いを確認するために必要)
- 角の検出を改善(min-distance以上でないと角だと認識できないので、同一直線に続く点があればそれを含めてmin-distance以上か調べるようにした)
- 拡大縮小時は各種許容量にも倍率を適用(拡大したのにmin-distanceや直線と判定する許容ずれ量が同じなのはおかしいので)
- 最初と最後の点の近くはmin-distanceより短くても受け入れるようにする。この短い区間をベジェフィッティングしてしまうと、その隣の線が大幅に歪んでしまうことが多い。

  [[edraw:data=H4sIAPgXaWYAA52Sz06EMBDGX2Uynhc6LWXBLFy86tU7Ln+zKxiosnozMcaDB6MPoC/gzSfSGF/DKStG4+7FANOh/WZ+7ZfOurMCVsfLuouwNOZk13X7vnd65TRt4UohhMsKXEt2V8uqXmwSUhiG7rCK0FepKSPUUiCUWVWUJkLp8c9Z1nZVU0dIDmE8a7O5gVWEvHI+xK2FVRphlrZJPzlK5ouibU7rFKEzbbPIIqybOkPIq+Uywp08zxHceFb8LGrSc+adJKYEnjwgXwCROCQh9mXogdagRAD+FBQRBD5IyQIWKTt6LNRiBKxhI3qHhH3GicnXCeSwBZOtzLitUZc3tZl01QXXko9gJZOknpdNy5u1h2InyArZF9JTjN8uH4b39uPx+e3y6v3p5f3u5vX6fuba2s2QX107k7TmD9hitBwwSmqMX6/vNpJGzC/vQt/RexRwBD8E6SlO2EMZhDbxtliV53yZtlj13V5JAlLBngyn3IuUx+2FzTzNUUoJpANH/wPhFvzxVY4/AW6UCH3yAgAA]]

- 長すぎる区間を分割する。長すぎる区間にベジェフィッティングを適用すると大抵ろくなことは無い。そういう区間はマウスの動きが処理速度に比して速いときに起きるのだから、たいていの場合直線だと思ってしまって良いはずだ。なので、中に沢山の点を内挿してしまうことで変な歪みが生じないようにする。

- 次の変数の -- を - へ変更。
  - edraw-editor-tool-freehand--bezier-fitting-corner-distance-min
  - edraw-editor-tool-freehand--bezier-fitting-corner-angle-min
** DONE 透明背景を単一色にできるようにする
CLOSED: [2024-06-12 Wed 16:04]
edraw-editor-transparent-bg-color2にはnilを指定出来るようにする。
edraw-editor-transparent-bg-color2がnilまたはedraw-editor-transparent-bg-color1と同じならば、市松模様を描画するプロセスは省く。
ついでにcolor1とcolor2の両方とも、:typeをedraw-web-colorへ変更する。
** DONE edraw-path-d-translateをH、Vコマンドに対応させる。
CLOSED: [2024-07-01 Mon 13:43]
edraw-path-d-translateやそれを使っているedraw-svg-element-translateはこのプロジェクト内では使っていないが、他で使っていたので一応修正する。

次の二つの関数を修正する。
- edraw-path-d-from-command-list
- edraw-path-d-translate
** CANCELLED ORG/インライン画像の更新時に旧画像をimage-flushすべき?
CLOSED: [2024-07-24 Wed 09:32]
メモリリークが怖いから。でも本来はEmacs側でキャッシュアウトすべきだけど。
編集後は既にimage-flushしている。

同じ内容のedrawリンクが複数並んでいる状況を考えた場合、画像キャッシュはクリアすべきでは無いはず。クリアしたら画像キャッシュの意味が無い。
** DONE メモリリークのような現象を何とかする
CLOSED: [2024-07-24 Wed 09:33]
[[https://github.com/misohena/el-easydraw/issues/27][Memory Leak · Issue #27 · misohena/el-easydraw]]

[[*毎フレームimage-flushすべき?][毎フレームimage-flushすべき?]]とも関係があるかもしれない。

手元の環境(Windows10 & Emacs 29)でタスクマネージャからメモリの使用量を観察したところ、次のようになった。

edrawリンクを開く前:71MB => 開いた後:90MB => 編集中:250MBくらいを越えると150MBくらいまで減少する

M-: (clear-image-cache)をすると大幅に減る。

edraw-update-imageでimage-flushするとメモリ使用量が増加しないようになった。懸念していた速度低下なども見られない。
** DONE 毎フレームimage-flushすべき?
CLOSED: [2024-07-24 Wed 09:33]
毎フレームの画像記述子はキャッシュされているのだろうか。
画像を参照している場合、その画像が変化(内容が変化したり、存在自体が無くなったり)した場合に、同じ画像記述子でも表示すべき結果は変わってくる。
もしキャッシュが使われてしまうと問題がある。
テストして調べるべき。

[[*メモリリークのような現象を何とかする。][メモリリークのような現象を何とかする。]]でimage-flushするようにした。
** DONE edraw-editor終了時にimageをimage-flushする
CLOSED: [2024-07-24 Wed 17:56]
[[*メモリリークのような現象を何とかする][メモリリークのような現象を何とかする]]の続き。
終了する時(edraw-close)にimage-flushしていないのでする。
** DONE 出来る限り使わない画像をimage-flushする
CLOSED: [2024-07-24 Wed 18:24]
[[*メモリリークのような現象を何とかする][メモリリークのような現象を何とかする]]の続き。

最低限インタラクティブな部分(つまり高頻度、image-cache-eviction-delayよりも短い期間で沢山の画像を生成しうる場所)ではimage-flushを使うべき。オーバーレイを削除するときも忘れずに。
- ツールバー画像
- カラーピッカー
- +シェイプピッカー (更新頻度は低いが消しておいたほうが良い。同じshapeを複数のバッファで表示することもそう多くは無いだろうし)+ いや、シェイプピッカーを閉じた後再度開くときにキャッシュがあった方が高速に動作しそうだからそのままにしておく。
** DONE Emacs30で出るdefcustomの警告に対処する
CLOSED: [2024-10-04 Fri 03:40]
: edraw-shape-picker.el:75:29: Warning: in defcustom for `edraw-shape-picker-thumbnail-max-width': misplaced :tag keyword in `const' type
: edraw-shape-picker.el:81:29: Warning: in defcustom for `edraw-shape-picker-thumbnail-max-height': misplaced :tag keyword in `const' type

#+begin_src elisp
(defcustom edraw-shape-picker-thumbnail-max-width nil
  "Maximum width of a thumbnail."
  :type '(choice integer
                 ;; ↓nilが最後に来なければならない。
                 (const nil :tag "Same as `edraw-shape-picker-thumbnail-width'"))
  :group 'edraw-shape-picker)
#+end_src
** DONE Emacs30で出るmemqの警告に対処する
CLOSED: [2024-10-04 Fri 03:43]
: edraw-color-picker.el:1144:12: Warning: `memq' called with literal list that may never match (element 3 of arg 2)
: edraw.el:850:12: Warning: `memq' called with literal list that may never match (element 3 of arg 2)

両方とも同じコードになっている。おそらくコピーして出来たところ。

#+begin_src elisp
          (memq (event-basic-type event)
                '(wheel-up wheel-down 'mouse-4 'mouse-5 'drag-n-drop)))
#+end_src

リストの中がクォートされているのでクォートを外す。
** DONE Emacs30におけるマウスホイールイベントの仕様変更に対処する
CLOSED: [2024-10-04 Fri 03:53]
[[https://github.com/misohena/el-easydraw/issues/28][`mouse-wheel-*-event` variables obsolete since 30.1 · Issue #28 · misohena/el-easydraw]]

次のような警告が出る。

: Warning: `mouse-wheel-down-event' is an obsolete variable (as of 30.1); use `mouse-wheel-buttons' instead.
: Warning: `mouse-wheel-up-event' is an obsolete variable (as of 30.1); use `mouse-wheel-buttons' instead.

まずはEmacs30での変化について調べる。mwheel.elに変更あり。

Emacs 29:
#+begin_src elisp
(defcustom mouse-wheel-down-event
  (if (or (featurep 'w32-win) (featurep 'ns-win)
          (featurep 'haiku-win) (featurep 'pgtk-win))
      'wheel-up
    'mouse-4)
  "Event used for scrolling down."
  :group 'mouse
  :type 'symbol
  :set 'mouse-wheel-change-button)
#+end_src
※mouse-wheel-down-eventがwheel-upにマップされている、つまり変数名のdownがシンボル名のupにマップされていることに注意。

Emacs 30:
#+begin_src elisp
(make-obsolete-variable 'mouse-wheel-down-event  'mouse-wheel-buttons "30.1")
...
(defcustom mouse-wheel-down-event 'mouse-4
  "Event used for scrolling down, beside `wheel-up', if any."
  :group 'mouse
  :type 'symbol
  :set #'mouse-wheel-change-button)
#+end_src

Emacs30のNEWSより:

: * Incompatible Changes in Emacs 30.1
: ** Mouse wheel events should now always be 'wheel-up/down/left/right'.
: At those places where the old 'mouse-4/5/6/7' events could still occur
: (i.e., X11 input in the absence of XInput2, and 'xterm-mouse-mode'),
: we remap them to the corresponding 'wheel-up/down/left/right' event,
: according to the new user option 'mouse-wheel-buttons'.
: The old variables 'mouse-wheel-up-event', 'mouse-wheel-down-event',
: 'mouse-wheel-left-event', and 'mouse-wheel-right-event' are thereby
: obsolete.

: * Lisp Changes in Emacs 30.1
: ** The 'wheel-up/down/left/right' events are now bound unconditionally.
: The 'mouse-wheel-up/down/left/right-event' variables are thus used only
: to specify the 'mouse-4/5/6/7' events that might still happen to be
: generated by some old packages (or if 'mouse-wheel-buttons' has been set
: to nil).
:
: ** Xterm Mouse mode now emits 'wheel-up/down/right/left' events.
: This is instead of 'mouse-4/5/6/7' events for the mouse wheel.  It uses
: the new variable 'mouse-wheel-buttons' to decide which button maps to
: which wheel event (if any).

要するに、マウスのホイールイベントは必ずwheel-up/down/left/rightが発生するようになったらしい。ちなみにMS-Windowsでは以前からwheel-up/downイベントが発生していたし、今後もそうあり続ける。

しかしmouse-wheel-down-eventのデフォルト値がどんな環境下でもmouse-4になってしまったので、edrawのmouse-wheel-down-eventを使っている場所は正しく動作しなくなってしまった。

mouse-wheel-down-eventを使っていたのはMS-Windows以外の環境でmouse-4/5が発生するらしいのでそれに対処するためだった。おそらくEmacs29まではこの対応が必要なはず。Emacs30以降は、この変数を使わずにwheel-up/downを直接指定するように修正すべき。正直mouse-wheel-down-eventに対する今回の変更は無駄に非互換を生み出している気がする。

edrawでの影響箇所:
- mouse-wheel-*変数を使用している場所はedraw.elにしかない。edraw-property-editor.elではwheel-up/downイベントを直接使用している(おそらく一部の環境ではホイールによるプロパティ値の変更が出来なかったと思う)。
  - edraw-editor-map ズーム操作
  - edraw-editor-read-rectangle-interactively 矩形入力時のズーム操作
  - edraw-interactive-scroll-and-zoom インタラクティブスクロール時のズーム操作
  - edraw-transform-interactive インタラクティブ変形のズーム操作
  - edraw-event-remap-table変数 これは現実には使用していない。
  上記のズーム操作がEmacs30で動作しないことを確認した。

対処方法:
mouse-wheel-up/down-eventの代わりになるような変数を用意する。
- edraw-wheel-up-event (mouse-wheel-down-eventの代わり down!!)
- edraw-wheel-down-event (mouse-wheel-up-eventの代わり up!!)
変数名はwheel-up/wheel-downに合わせる。ホイールを上に回したらwheel-upが起き、下に回したらwheel-downが発生する。それが自然な方向。mouse-wheel-down/up-eventはそれとは逆向きになっているので、この際自然な方向に表記を直してしまう。
** DONE カラーピッカーを開こうとしたときにエラーが出る
CLOSED: [2024-12-15 Sun 11:33]
edraw-ui-state.configが存在しない存在しない段階で、pathを描いてp fを押すとedraw-color-ensureにnilが渡されて「Invalid color `nil'」のエラーが出る。p sだとエラーが出ないのはおそらくstroke色がnoneではないから。

- +edraw-color-picker-ensure-colorはnoneを許容すべきか？+ edraw-color-picker-ensure-colorはedraw-colorオブジェクトを返すのでnoneは許容できない。ただし、noneが来て、最新の色が見つけられなくてもエラーが発生しないようにすべき(適当な色を返すべき)。
- edraw-ui-state-getの実装に誤りがある。
  ~(alist-get key (alist-get domain (oref ui-state store) default))~
  はdefaultがdomainに対してかかっている。本来はkeyに対してかかるべき。
  なのでedraw-ui-state-getを使用しているところは全て調べるべき。
  defaultを指定しているところはedraw-get-recent-colorsの一箇所のみなのでここ以外では問題が生じない。
** DONE パスに沿った繰り返しパターンを作れるようにする
CLOSED: [2024-12-17 Tue 14:04]
[[https://github.com/misohena/el-easydraw/issues/29][Repeated pattern along a path · Issue #29 · misohena/el-easydraw]]

生成するのは最低限基本的なパターンだけで良いみたい。ジグザグ線、波線、コイル。

生成すること自体はそれほど難しくはない。しかしUIをどうするかが問題。

とりあえず最低限生成するコマンドだけ先に作る。デフォルトでは生成したパスと置き換える。クローンしてdだけ書き替えても良いのだけど、元の線を残したままにしたいことは少ない気がする。必要なら複製してから実行すれば良いわけだし。

生成はサブパス単位で行う必要がある。サブパスをseglistへ変換する関数が必要。また、サブパスがclosedなら生成するものも閉パスでなければならない。

- 次のメソッドを追加
  - shape指定版
    - edraw-generate-zigzag-path-along path /params/
    - edraw-generate-wavy-path-along path /params/
    - edraw-generate-coil-path-along path /params/
  - editor指定版
    - edraw-{editor-}generate-zigzag-path-along-selected editor /params/
    - edraw-{editor-}generate-wavy-path-along-selected editor /params/
    - edraw-{editor-}generate-coil-path-along-selected editor /params/
- キー割り当て
  - ~~z~ : edraw-generate-zigzag-path-along-selected
  - ~~w~ : edraw-generate-wavy-path-along-selected
  - ~~c~ : edraw-generate-coil-path-along-selected
- pathのget-actionsにメニューを追加。「Generate Shape Along Path」の下に三種類の項目を追加する。三種類の項目には :cmd-for-selected を追加し、edraw-menu-items-shape-common--convertを使ってキー割り当てを表示する
- 生成パラメータは保存し次回のデフォルト値とする
** DONE edraw-path-data-to-seglistの結果が一部欠落する問題を修正する
CLOSED: [2024-12-17 Tue 23:36]
edraw-path-data-to-seglistやedraw-path-subpath-to-seglistにおいて、
空のセグメントがあると(同一サブパス内の)それが現れる前のセグメントが消えてしまう。
edraw-path-data-to-seglist--pushが確実にsegmentsを返していないのが原因。
** DONE d属性からpath-dataを経由せず直接seglistを作成する関数が欲しい
CLOSED: [2024-12-17 Tue 23:43]
(edraw-svg-path-contents-to-seglistがpath-dataを経由するのは無駄。これは点が多いパスデータにおいてはメモリ消費量(GC時間)と処理速度に大きな影響があるはず)

まず、edraw-path-data-from-dから汎用的な部分を分離する。move-to、line-to、curve-to、closeの関数を指定するedraw-path-d-convert関数を作成。

edraw-path-d-convertを使用してedraw-path-seglist-from-dを実装する。

点を共有する(edraw-xy-cloneを使用しない)オプションも用意しようとしたが、あまり適切では無いことに気がついたので止めた。edraw-svg-element-contents-to-seglistはedraw-path-seglist-transformを使用してセグメントリスト内の各点を行列で変換するので、点を共有してしまうと複数回変換を適用してしまう可能性がある。
** DONE require-final-newlineが非nilだとshape pickerを保存できない
CLOSED: [2025-01-01 Wed 21:47]
[[https://github.com/misohena/el-easydraw/issues/30][How to add new shapes? · Issue #30 · misohena/el-easydraw]]

Doom Emacsで

: Save file /home/toni/.config/doom/edraw-custom.eshapes? (y, n, !, ., q, C-r, C-f, d or C-h) y
: Saving file /home/toni/.config/doom/edraw-custom.eshapes...
: save-buffer: Text is read-only

と出るらしい。 "save-buffer: Text is read-only" で検索すると、image-modeで同じエラーが出る問題についての議論が見つかる。 require-final-newline が非nilのときにこの問題が起こるらしい。試しにshape pickerバッファで (setq require-final-newline t) にしてみるとエラーが出た。ファイル末尾に改行を追加しようとしてエラーが出るということなのだろうか？ (ppでの出力はちゃんと最後に改行が入るはずではあるのだけど)

hexl-modeは ~(setq-local require-final-newline nil)~ している。これにならって edraw-shape-picker-file-mode でも同じようにしたところ、エラーは出なくなった。hookで非nilにされている場合は無意味だけどとりあえずこれで試して貰う。
** DONE UMLに使うための最低限のマーカーを追加する
CLOSED: [2025-01-02 Thu 12:58]
ついでにできるだけ拡張しやすくする。

追加するマーカータイプ:
- open-arrow (後ろが空いた線のみの矢印)
- hollow-diamond (中空菱形)
- filled-diamond (塗りつぶし菱形)
- hollow-triangle (中空三角)
- filled-triangle (塗りつぶし三角)
- hollow-circle (中空円)
- filled-circle (塗りつぶし円)

参照点(refX, refY)について。open-arrowのみ矢印の先端を参照点にする。その他は矢印の末尾を参照点にする。基本的に矢印の先頭を参照点にした方が使いやすくなるが、曲線を使ったときに矢印の末尾が線と交差せず見た目が悪くなってしまう。参照点が末尾だと手動の位置合わせが面倒になるが、接着機能で使う分には問題ない。

マーカータイプ情報(edraw-svg-marker-types)に次の拡張を行う。

- :path-dataプロパティを追加。:creatorの代わりにこれを使うことで、パスデータ文字列で図形を定義できるようにする。
- :overhangに数値を指定出来るようにする。
- :get-propsは:path-dataがある場合はデフォルトでedraw-svg-marker-path-propsを使う。
- :prop-info-listは:path-dataがある場合はデフォルトでedraw-svg-marker-path-prop-info-listを使う。

マーカーをメニューなどから選択して設定するコマンドを追加する。
- edraw-editor-set-marker-start-selected (p m <)
- edraw-editor-set-marker-end-selected (p m >)
- edraw-set-marker-start-selected editor
- edraw-set-marker-end-selected editor
- edraw-set-marker-start-by-menu holder
- edraw-set-marker-end-by-menu holder

[[edraw:data=H4sIAOsadmcAA92ZX2+rNhTAv4rFfUmlkNjYGFMlkdr7sGnSNOle6d5tby44CWqCI6BNu08/G5uEBlJSkklr1KIQ13DO7/zzsTvJnxfgZb1K86mzLIrN7Xi83W5HWzyS2WLsQQjHaoZjpty+rJL0sW0iCsNwXP7VAdskLpZTx6fQAUuRLJbF1CGe+vIssjyR6dRBI+TMJrGY5yCJp46IM7519Vc1uubZo8jejrvQXcrVSm7dIkt4ulgJB5h5P40sBGE18quVWA5tMpGL7Fnc5RsRFd94kcipk8pUPf+ciO29fJk6rg+BvtQDoHwoE/M/p465+au8kVkiUvVO/lRIB+RFJh/F1PmCoP6pBlzLjRwwT1YrK2c22fBiCRTN73DoYkCHEMAh/tsB49lkbFQ+Ao2uELrIeJrPZbaeOpkseCEGiMGbE4zhuXIjUpdnmdx+Rju4VBsCKkOoO3wCMGllpYek9EROpASry9O/p1OatxxBrExQp0TK34GWNAwAGcJzPO5fiQE6QakbJVnUSG9ySEpODWkV0SqYAbo8p1EURC/lq6JX8+pStd5+Dq4CvxOTXVkB6+1v5Llagog/1brWkuuXWtoQvk6DdIOTqsNprQD/S2ybFrVK4NUrgXdOHPjXaI5ubFqF/+fBbl0SLhcIwZVapJt8t+eJE76WafwZ0JtbHqhaP1UKWXlz1toQVpHwiezRujJcziT4ak3SnR7wOtOjG5xd+9I41sdfs0mm9ARme2FmHj1M2xvogUePi0w+6XB4u6GxwTefz0thi/pDMn6tewVDvTGGP4g2QQ1gjzufs4hFh7gGY/ca/6zXlPQxL7hrlNTqhpT5PPLpnobpn04/eHt7sb0dSw8ryyJtwhf7/Yhkgb3A9zg7QzKtSaZGshXsvSMYx1744D2gCwkmb5ExgXufmfBzRarEPmWrwZd3zlxVca4pupFJWriRTFNFkEh9fnw3gDe3f9z/Nqh8djO8G7jIjFXW1G9RgYLCYOQFXgCQPpHBeARDEgAWjigL0ZHQOUp9QJMXPCsaPI3j1NN5drrXeConWR6M4YixkGgERPwA4ACB0uQfRmkNiSCmnEf4QiHBbCxSExItEdFuw8N25MZ5L4LqZ7bnBU+FXwUPQSMIAwY8xEaEhBQg7I9ggCjw/GAEMQnPDKE2HH9H8q6NyB64qqse/Ip1mBO14EH76ZXj3wkrCybwzbz/QO3qfK1Lb7qf1xDTUKSu5Q6TWExqManFJBbTs5gnFqCD8HlXefZ2bk8AagGYBWAWgFoAYgHoaQCNdq2LorH96Y/CDIq+1yjlp0EzKNSisNNQDpvuLpKWQtEPRF0GxLMgngFR4waEGRAM+69qH142eqLYMoBtGcC2DGBbBrAtA9g7Mbwa54adLI2j1/4wNtmxTXZskx3bZMc22U/tNg4PvzpRSGN+TxCb9NgmPbZJj23SY5v0+NSkPzi86QShjfk9QWzKE1i7DJgBsSmP2fHOM4bCjxmMzmgzyL7NOOx4j/f4ocCqVyIXFVu29nu5pd/s4zHPl2qp4K+1fzO1O5N9LCrZxzqeqr2p+HXLY7ugyhO2jVAbVIp/hH36g0K8FF2a3N3fD+DIB+pqdOtvTzDAXKqn8+Qfobc09uucr5OVMmbO09xVO+5E7Te1WJen0VKqze46iWO9a3/VO1njFRWFs+9LvhGTsZ7aU89ds3hxPRE1iiJfKfqLSEXGC5mdpWxty3BpZa1ViT5j+qZUOE/Pfbd9YT290BoVa+/LpywSX2W8C4HxQl3582L2L37yYHSWJAAA]]
** DONE keymapに項目名を入れる
CLOSED: [2025-01-02 Thu 20:00]

edraw-editor-mapの中で2ストローク以上の物に対して item-name を設定する。
which-key-modeで表示するため。
** DONE マーカー/プロパティエディタで「-」ボタンが消えることがある :BUG:
CLOSED: [2025-01-02 Thu 21:36]
マーカータイプを選択してから「+」で開き、markerWidthをドラッグやホイールで変更すると-がボタンでは無くなる。 *プロパティエディタバッファが選択されていない時に起きる* 。カレントバッファがプロパティエディタのバッファになっていないのが原因。

[[*図形生成/プロパティエディタで「-」ボタンが消えることがある][図形生成/プロパティエディタで「-」ボタンが消えることがある]] も同じかも？
** DONE 図形生成/プロパティエディタで「-」ボタンが消えることがある
CLOSED: [2025-01-02 Thu 21:36]
[[*マーカー/プロパティエディタで「-」ボタンが消えることがある][マーカー/プロパティエディタで「-」ボタンが消えることがある]] で対策したので一応DONEにする。違う原因だったらまたTODOを作る。
** DONE 点接続/マーカーのoverhang量よりも近づいたときの問題を直す :BUG:
CLOSED: [2025-01-02 Thu 22:47]

edraw-gap-distanceが接着元-接着先エッジ間距離より大きいと接着先とは反対方向に移動するためマーカーが反対向きになってしまう。gapの最大値を接着元-接着先エッジ間距離(-1くらい)までに制限すべき。

[[edraw:data=H4sIAK8jdmcAA61TTY+bMBD9K5ZzSaQYbEhYiAApe6qqVpV66NeNggErxEbGCey/7xgTZVfa1e6hsoxnxh6/98ZDOlwbNIrKtBkOdhSjloumNeBQcKZzJ4cMt8b0B98fx9EbQ0/pxodd6kMqRleuB6FkhpnHloTD1Al5ei2NJUniz7s4TyteD0hUGeaVLkZiXYieC33i+mWcUNKqrlPgiOKsZIWRO/bTEWeWq4t8WujPoV7zgesrPw49L833wgiVYakkB9qCj49qyjDZU2QnJKA5SfP6V4ad8Xs2lBZcwp3FxSiMBqPViWd4xagdtwBZighFqEXXLTh52hemRSDmK91StNuSEMWzEf7ByM9T39EGw+rPUw1E0TTDPs3fN9/mXqG/RXlqtLrYutzYOZWOyaqu6xmseZ6kqie84FWFKYgL2wNhXD6USVDe82M73pUe3Bnu7sxZ4LTYZXKL/zpuEMa7PQ/j/4vLgr23n6HjyBr+8iau8IRLQL7obr16u902+DnVXglpSKmkBA3Q+vCDHNeEbQ7fHj+vbxo22+OautCtnPYW6IOYooj+AHZfHiIvYWGCGIu9mEXRi875gGjbPg1M+A/zf09H8HvIAwAA]]

[[edraw:data=H4sIAAWYdmcAA9VUTY+bMBD9K5ZzSaQYbEgIRCFS9lRVqir10o+bCwasEDsyTsj++44xKJt2t+2hl8oyHg8znveGh3fdtUa3U6u6HDfWnrdh2Pd90MeBNnUYUUpDiMA+ZHtrpTq+FsiyLAuHtxj1srRNjqMVxagRsm4sbChsrsJ0Uqscs4Dh/a4UVYdkmWNRGt4TtwXviZujMI9+Qkmj21bDRvKTViVGPuyzL8Xc6d7zbiw4uM5GdMJcxaE7i8J+4lbqHCutBGCRon/StxyTNUVuQgIakoyovuTYG18HQxspFJzJL1Zj1FmjjyLHM0bdmBxkpM0wqmTbjnX2uzO3DQIyH+iSotWSxCgdjPgbRuF+F3rYb/BmE29rJFd1K/5P4kA6AdJ0IG0NV12lzSnHRltuxZyldPHYjNCJYb8zAB7dBijPw/NNad3b9p0Xx9roixPJhNgz9+hmVVUNxeqXSbp8xmO9kltOvNsFxGmxKbKouOenbvyxHdEd4eqOnEWei1tufglfrxvF6Wot4vTf1mURC9ZD6XTjjHD8Tr7xpLPcQOLFtPPZb1S4mERHhCp/Cf/5Z4XoF9zOWipLCq0UkIbbAO6dw5wuth+f3s+nXi+Whzlh3jf1wZ0CYgLKQUKTFG2iYJXRCLEoDtIkSkHD6yBbJ8mDDP+iW053NUy45vY/AHeTIOcOBQAA]]

[[edraw:data=H4sIAM+YdmcAA9VUW2/bIBT+K4i+JFKMuQRfqjhSm5dp0jRpedjWN5pgx4pjIkyb7N/vAHHXbu22h71MFhw4nNv3+cBieGzQ+dD1Q4V3zh2v0/R0OpGTIMY2KaeUpmCBo8n1uWv7/WuGrCzLNJxidGq3blfheUEx2um22bkKCw6bR22H1vQVZoTh5WKr6wG12wrrrVWnxG9Be1B2r+1LfcKTnek6A5tWHUy/xSiafY6pGKWj5t0lYVAdrR60fdQ3w1Fv3CflWlPh3vQaamn16dacK5xIivwABxScrK6/VDguvoaFsa3uIaZ6cAajwVmz1xW+YtR/oyK5wGYY1W3XXfIsF0fldgjAfKAziuazRKAiLMQdRs6qfqiNPVTYGqecnrCCTjFKl4s0wnmDDzHy4Wyr+qbT/ychQEYGZNBAxnPQqW+G5cJCkegcUn4L85ut9YOee7XZN9Y8+CYZK4sIYxVXdV2HZM1zJ7P99lSaciqJam8gCyo3Uigcas4pyvkKZskRzIIjxrxYs3CCmIyCcyJlIVEmSJkVgcsyX/kTUaBSIJZlwZb5CDklVNASvGAhWY44Y6SgmbemhAkmoi24FwUczpHfQQUxwBpSl6GcnN+NMG1zrybQcjMu5YwSSfn0j3+KB15eI4Hz+5zWlEcSWJFDXrFiGUhfHEiPqfBizXPAmzHEPTSZr0BN5nNPghSEcVkEQw5+nAa55hxkHgNwCXIOccsYl130kG+U/wpjbLZE94DpwXaTq9/cr+l4nZLBKet+cfj5gQL7ZxQeTdu7ZGP6HhoaXkB4a28mCZtef7x9Pxm5nc5uJjSqxp6bPvFNMpFBg2RzUkrmW6YguWClJ5iUJZUv7tjfcZA2MOBtX34HcZLI5AMGAAA=]]
** DONE デバッグ出力機構がほしい
CLOSED: [2025-01-03 Fri 18:12]
デバッグモード時だけ、条件に一致しないものを警告するようなassertみたいな仕組みが欲しい。潜在的なバグを見つけられるように。アンカー等の無効化関連で。

- (edraw-log FORMAT-STRING ...)
- (edraw-log-when COND FORMAT-STRING ...)
- (edraw-log-unless COND FORMAT-STRING ...)
- (edraw-assert cond msg)
** DONE 点接続/グループのUNDOでエラーになる :BUG:
CLOSED: [2025-01-03 Fri 18:03]

[[edraw:data=H4sIACVYdmcAA7VVPW/bMBD9KwSzOGhkfdiWZcMykExFgaJFgfRrYyRKJiyRAsVESjdnKDp0aoYO3fvD6j/SIynFbhGnGVIItsnj3Xt37070or7KUVsWvI7xSqlq7rpN0wyb0VDI3A08z3PBA1uXeVswvr7P0Z/NZq45xahhqVrFOBh7GK0oy1cKNhFsrqismeAx9oc+Xi5SmtWIpTGmqSSNo7dgLYlcU/mn3QmclSgKARtGSsFTjKzbO0vle15ved4RGlMlaU3lFT2tK5qoN0QxEWMuOIVcGG3ORBtjZ+Ih/YEAZIIkzd7H2C4+mIWQjHLAJJdKYFQrKdY0xke+p5/e4HRl+xhlrCg6nuWiImqFoJiX3omHxifOCEVmMfqIkZKE15mQZYylUETRgR95xxi5y4Vry4GF1mW5kFAAak061+b7oMo75S5Iss6luNR69Vnb6m2GR1mWGbJ8P0ik17jjS4kijjVrhywYecFFRnbxkX7+KUmwy3C8yzyypQRa89aemFT+Ip1OZ6MsIqE5NWJaZZxaEQmIl7IYHB2eFFBzD7ASjCsnEZxDeTCKMPSnA+94/ursxSCZhBOapOnxyenA8a2tr1ijQAsjGJHpdBiG4fStyXuv048Q4b7yetYDkifJJAnHYfA0kvuB1XxsJQ+s5Ib3KeGj/wtvfnf4irZ3+D1cJqDNNfsEFH7YbTNSsgLCa3jnHLgWGMy+jnUIT1ZCwoEeKMvQzWQwhraouiIcJQWp6/4dMWFw2dE7r2ckp3OYrYVr3B8XhVLNRUsI56SkcxCB8fwOwtUBXX0PzzB+kvpLlqYFNQKEockRGrl8DZe24H0ybt4l1HbID/IekHcEsL8+3243t9ubr9ubb+dc31LVdvN9u/l5zlOx3fzY3nzZ59R/QsvflPNt+qwGAAA=]]

次のエラーが出る。

: *: Wrong type argument: number-or-marker-p, nil

[[edraw:data=H4sIACvKdmcAA5VSXW+DIBT9K+T2pX1QwHVdbcRke1yy7DcwQSV1YJBV++93qTXtw5ZlIeFyvw7nHiiGU0Omz84OAtoQ+gOl4zim40PqfEMzxhjFCphLDlNn7PGnQp7nOb1kgYxGhVYA3zMgrTZNGwRkW3RO2g/GWUylHMrC6yqQSQBmzpf910ajBGjl5Zh8yOrYePdlFZAheHfUAqyzGkhtuk7Aqq5rILQsmvsmp84QQ0oGmcyxmOW1knu5e1y4LBD7uG74K87iWgLJlWZ2I7m7I8/mcTI002yQje460w/6/zd4hIoK+Gm2FfpRngp9fgWnTVn0MrT34/XO2JBUzlocDDXH131es83h/eV1vYy9AYIivOVZumOccJanjG+f8MBIFqFnsrO6fzO9Eom/pfwGHU8uhlUCAAA=]]

原因は edraw-update-src が edraw-shape-center を呼んでいるが、groupにまだ中身が無い段階なので edraw-shape-aabbがnilを返すので (edraw-rect-center nil) となりエラーになる。

見回してみると、edraw-shape-aabbの戻り値がnilになりうるのを考慮していない箇所が散見される。まとめて修正した方が良い。

とりあえずedraw-shape-centerはaabbがnilの場合は素直にnilを返すように修正。edraw-update-srcはedraw-shape-centerがnilの場合はそれ以上のしないようにした。

+これとは別に、edraw-removeは削除処理をする前にpoint connectionを解除した方が良いと思う。+ とりあえず保留。別TODOへ移した: [[*点接続/edraw-removeはshapeを削除する前に点接続を解除する][点接続/edraw-removeはshapeを削除する前に点接続を解除する]]
** DONE edraw-svg-shape-aabbがnilを返す可能性を考慮していないのを修正 :BUG:
CLOSED: [2025-01-03 Fri 22:18]

edraw-svg-shape-aabbは中身が無い図形(空のgroupやpath)の場合nilを返す。

nilの矩形を元に計算をすると算術エラーが発生するので問題。
(~Wrong type argument: number-or-marker-p, nil~ などが発生する)

- [X] edraw-import-from-edraw-svg : 1点のpathを作ってそのSVGをインポートするとエラー
- [X] edraw-selected-shapes-aabb
  - [X] edraw-read-scale-params : px指定をscaleに変換する部分でエラー
    - +edraw-read-origin-xy+ 問題なし
  - +edraw-read-rotate-params+ 問題なし
    - +edraw-read-origin-xy+ 問題なし
- [X] edraw-display-selected-object-coordinates : 1点のpathを作って選択し矢印キーで移動するとエラー
- [X] edraw-display-selected-object-info : 1点のpathを作って全選択するとエラー
- [X] edraw-selected-custom-shapes-ref-box
  - [X] edraw-on-down-mouse-1 edraw-editor-tool-custom-shape
- +edraw-set-scale-params+ 問題なし(edraw-read-scale-paramsが問題なければ)
- +edraw-set-rotate-params+ 問題なし
- [X] edraw-glue-destination-of-selected-or-overlapped-shape おそらく問題ないが早い段階でのチェックを追加
- +edraw-point-connection-aabb (shape, shape-text)+ 直前に対処済み
- [X] edraw-shape-transformer-create : 1点のpathを作ってGUI変形しようとするとエラー
** DONE マーカー/アンカーのメニューでマーカーを設定できるようにする
CLOSED: [2025-01-03 Fri 22:57]

アンカーのコンテキストメニューに「マーカー設定」を追加する。

アンカーの場所によってmarker-start、marker-mid、marker-endを判別して設定する。
** DONE 点接続/テキスト等の接着位置を調整できるようにする
CLOSED: [2025-01-04 Sat 16:15]
接着パラメータを変更できるようにしたい。

- SRC側は問題ない: AABB(x-ratio y-ratio)
- DST側は問題あり:
  - 中心以外の選択肢が必要
  - 最後にピクセル単位で微調整が必要(paddingのため)
  OBJ(id [x-ratio y-ratio x-offset y-offset])

これだけの機能があれば、テキストを矩形の好きな位置に揃えることが出来るはず。
例えば左上に合わせるには次のように設定する。

#+begin_src xml
<text data-edraw-point-connections="AABB(0.0 0.0):OBJ(RECT-ID 0.0 0.0 8 8)" text-anchor="start" ...>Some Text</text>
#+end_src

問題はこれらをどうやって設定するか。

一つの理想としては、 data-edraw-point-connections をtextのプロパティとして編集できるようにすることだろう。ただ、これは結構面倒くさい。リストが必要。SRCとDST、それぞれタイプを変更したい。 point-connection-listタイプのようなものがあれば良いのだろうか。それに対するwidgetを作る必要がある。

単純に「左上」「上」「右上」「左」「中央」「右」「左下」「下」「右下」をメニューで選ばせるだけでもよい。(+ピクセル単位調整)

- Glue Position   接着位置 (AABB:OBJが一つだけある場合にのみ機能する)
  - Top Left        左上
  - Top Center      中上
  - Top Right       右上
  - Middle Left     左中
  - Middle Center   中中
  - Middle Right    右中
  - Bottom Left     左下
  - Bottom Center   中下
  - Bottom Right    右下
  - XY-Offset...    XYオフセット...
  - XY-Ratio(Dst)... XY比率(接着先)
  - XY-Ratio(Src)... XY比率(接着元)

さらにCtrl+クリックでテキストを追加するときにも接着位置を入力させたらどうか。

: Glue Position
: [x-ratio [y-ratio [x-offset [y-offset [x-ratio-src [y-ratio-src]]]]]]
: (default:0.5):

edraw-read-glue-position関数はこれらの指定値を読み取ってPLISTで返す。
edraw-glue-toはこのPLISTを受け取る。
(edraw-glue-to shape shape &optional plist)

テキスト接着や任意図形接着ではedraw-read-glue-positionで接着位置を読み取って使用する。

メニューも単に「接着位置設定...」だけで十分だと思う。
** DONE 点接続/循環接着を防止する
CLOSED: [2025-01-05 Sun 10:17]

循環接着……circular gluingと呼んで構わないだろうか？

[[edraw:data=H4sIAL8eeWcAA6VWTY/jRBD9Ky3vZTl0p6v6ezQZaeeIhPgNHsdJrMnYI8dsspyYOSGBOMAFDlyQOCIkTtz4MZEG8S947SSaYbXLwCZWutvVqXqvXpfLOV+/XohNMxuW08JZXYhl3SyWw7QwGjfbm1W7nhbLYbg9m0w2m43aGNX1iwlrrSdwLcTrul83XTstSNHB4Wy7atrrd7lRSmky7hYX531dDWI7LYDzZhzfS6OZTYt61pcbeVVW14u++6ydFWI99N11PS3arq0LMW9Wq2nxYj6fF2Jycb546tTN3hzxZuVQyr35tmvaQVZd22IDKSDR4ul+DuBnzjHZJ/Fjvh7BX5DO19EgDznwYwb+MTOy+1zHeXuYQbZerZrbdf02eIhGh2R98QzrV68uL19q5QQp/dHZp5cfvzzSFtmqYf0A/j2IMjZ6EA2Yq0w8GyoYmPbM39Y009Z8VXLJV/+f9jHhTPlDaR9lt09kj3vZ/V51t6d+Ww7LQ/h9BT0fG8l9wokEMVVWeWOj0CIojhSFVTjNJIiEr1g5Gwzy4mCCcMprm++sS0lEYaqoHAWHDRucE2wEkzIm5ZXhSgtWgayVXrnkvPAqpBAlXCsZFSe4ZDCYyKngyAonGdFOycroKMi7Kstu8BF54b0PWFAlkRAz+I0TSPjELEhLyiOcjNIO65gn8M0jaRFP0tmy8LoiAxF1kFrFaINgqwKzkRAqSlORhhAQ/TBBZKfYQzMsOWXeKULgPEqCaCFCRRWZSJIX4SR+IYhIyJ1GweRBN8rXqEjUsLKKBidNVkJfW7ksp84DVs+gz+fose9DJ4O0NApiVB4PjAzAH4+Ima2kzEJSJqUZP7LWWMlahRCSTODmvMRJUqiky3XJEsIGj5JC7RmPTatYp4ASkyZHUlpTzGja5Y4SAjHqM5FjYKMGMoaROK2AHi9JGo2wjHjSuuxuA6FqLQHUquiRf1IJTzvKmviUcwgQVoeKICqoCFQuHj+NfMVhgjDB47GDJPuCHOrt8Pi62Is879Cd1s3ngCN/uJ2XN80KbWNdtmu5rvsGb5bsK8u2Wnb9tLhpZrNVPbYW5jD2lhSLi93dd7v7r3f33/71/W8Pv/y0u/thd//V+SS7/hP8mNep4NGM2Ab97Qh+9+vDNz//+eMXD79/ubv749/A3xn0vzLKr4RDVzXJPoM+WeCL/wwXfwMJfZO9dAgAAA==]]

点接続全般における参照検出器が必要。

図形Aは図形Bに依存している(故に図形Bは図形Aに依存できない):
- +(edraw-point-connection-depend-on-p shape-a shape-b)+
- (edraw-depends-through-point-connections shape-a shape-b)
- +(edraw-depends-on-point-connection shape-a shape-b)+
- +(edraw-is-connected-to-p shape-a shape-b)+

(edraw-glue-to shape shape-dst)はshape-dstがshapeに依存するならエラーにする。

ついでにすでにpoint-connectionを持っているならエラーにする(現在はUIがdisableになっていなければ同じ接続をいくらでも追加できるようになっている)。
** DONE 点接続/変更した接着位置が保存されない不具合を修正する
CLOSED: [2025-01-05 Sun 11:39]
edraw-set-glue-positionにおいて、edraw-point-connectionオブジェクトへの変更をdata属性に反映していなかった。
なので保存してまた読み込むと接着位置情報が変更前に戻ってしまい、何か操作すると変更前の位置に移動してしまう。
edraw-update-point-connections-attributeを呼び出すようにした。
** DONE 点接続/他に接着されている図形をドラッグで移動できるようにする
CLOSED: [2025-01-05 Sun 16:12]
接着されていないshapeまで辿って、それを移動する。
循環していたら移動しない。
クリックは通常通りできる必要がある。
ボタンを押し下げて、移動が始まったらルートを移動する。

edraw-mouse-down-shape 関数に手を入れる必要がある。この関数では選択図形を一度に移動するために、moving-shapesというリストがすでに存在している。このリストを接着状況に応じて調整してやればこの問題は解決する。それを行う関数 edraw-adjust-movable-shapes-for-point-connection を追加。

矢印キーについては保留。=> [[*点接続/他に接着されている図形を矢印キーで移動できるようにする][点接続/他に接着されている図形を矢印キーで移動できるようにする]]
** DONE plistpの使用を取り除く
CLOSED: [2025-01-06 Mon 10:09]
plistpはEmacs29から。
edraw-plistpに置き換える。
** DONE テキストの書式(書式・下線や斜体など)を編集できないか
CLOSED: [2025-01-06 Mon 00:38]
facemenu-set-*はプロパティエディタ内で効くので、それを反映できないか。
- facemenu-set-*は[[info:emacs#Enriched Text][emacs#Enriched Text]]で紹介されている。
- M-oで始まるキーバインドはenrich-modeで有効になるが、facemenu-set-自体はfacemenu.elで定義されているのでenrich-mode限定というわけでは無さそう。キーマップもM-oはfacemenu-keymapで定義されている。enriched-mode-mapでは(define-key map "\M-o" #'facemenu-keymap)として組み込まれている。edraw-property-editor-mode-mapでも同様にすれば良いかもしれない(~(require 'facemenu)~ が必要)。font-lockも確実に無効にした方が良いかもしれない。
- facemenu-set-*はfaceテキストプロパティが設定される。設定されるプロパティ値はbold, italic, bold-italic, underlineの任意の組み合わせ。(italic bold-italic)なんて状態にもなり得るので注意。foregroundやbackgroundも含めると次のようになる。
  : (((:background "red")) ((:foreground "blue")) italic-bold italic bold underline)

editable-field widgetがテキストプロパティに対応していない！　widget-field-value-getの中でbuffer-substring-no-propertiesを使っているのが原因なので、この関数の亜種を作成する。edraw--widget-field-value-get。

shapeのtextプロパティ(edraw-dom-svg.el内のtextタイプ - inner-textソース)はテキストプロパティ付き文字列とDOMノードリストを相互に変換する。

| bold      | font-weight="bold"          |
| italic    | font-style="italic"         |
| underline | text-decoration="underline" |

read-stringを使っている箇所(新規でテキストを作るところとクリックで変更するところ)でもテキストプロパティを許容したい。read-stringはデフォルトではテキストプロパティを捨ててしまうが、minibuffer-allow-text-propertiesを非nilにすれば維持してくれる。ミニバッファ内でM-oを使うためにminibuffer-local-mapも指定する。promptにはM-oに関するキーアサインを表示する。

edraw-set-propertiesに少々見つかりにくい問題あり。プロパティ値の変化をequalで判定しているが、equalはテキストプロパティを無視する。equal-including-propertiesは無視しないのでprop-infoのtypeがtextの時はequal-including-propertiesで比較するようにした。常にequal-including-propertiesを使って良いか分からなかったので。本来はprop-infoに等価性に関する情報を追加すべき。
** DONE テキスト内の空白が反映されないのを何とかする
CLOSED: [2025-01-06 Mon 12:51]
librsvg(2.55.90時点)はstyle="white-space:pre"を認識しない。ブラウザは認識する。xml:space="preserve"はlibrsvgもブラウザも認識する。

[[https://gitlab.gnome.org/GNOME/librsvg/-/issues/795][Implement SVG2 white-space behavior (#795) · イシュー · GNOME / librsvg · GitLab]]

ひとまず xml:space="preserve" をtext要素に指定するのが最も簡単。

しかし嫌らしいのはlibxmlがXML名前空間を捨ててしまうということ。

#+begin_src elisp :results pp
(edraw-svg-decode-xml "<text xml:space='preserve'>TEXT   DESU   </text>" nil)
#+end_src

#+RESULTS:
: (text ((space . "preserve")) "TEXT   DESU   ")

幸いSVGにはspace属性などというものは無いので、space属性を出力するときはxml:を付けるという回避策が可能。酷いけどlibxmlを使う以上酷い解決策は避けられない。以前行ったことがある回避策としては、parse前に名前空間を特殊な表記に置き換えて、parseした後に名前空間に戻すという手法。本当にバカバカしい。なのでedraw-svg-printでspace属性を出力するときはxml:spaceを出力する。

後はテキストを作成するときに必ずspace属性を指定してしまう。無駄かもしれないけどしょうがない。
** DONE plist-getのGV版は少なくともEmacs27には無い
CLOSED: [2025-01-06 Mon 17:14]
- edraw-import-svg-convert-use (push)
- edraw-import-svg-convert-definition (push)
- edraw-import-svg-convert-element-attributes (cl-letf)
- edraw-import-svg-convert-attr-style (setf)
- edraw-path-extra-props-set : この関数は使われていない。
** DONE テキストとして制御文字が入ると即SVG画像全体が無効になる
CLOSED: [2025-01-08 Wed 17:10]
C-q C-a等やC-x 8 RET d800等でXMLで許容されていない文字を入れるとSVG画像全体が消えてしまう。

基本的にXML内ではHT(9), LF(A), CR(D)以外の制御文字0～1Fは許容されていない。
D800～DFFFもサロゲート領域なので許容されていない。

- [[https://www.w3.org/International/questions/qa-controls][HTML, XHTML, XML and Control Codes]]
- [[https://stackoverflow.com/questions/730133/what-are-invalid-characters-in-xml][What are invalid characters in XML - Stack Overflow]]
- https://www.w3.org/TR/xml/#charsets
- https://www.w3.org/TR/xml11/#charsets

XML1.1では文字参照で許容されているものもあるが、基本的には取り除いた方が無難。

問題はどの段階で取り除くか。
- プロパティエディタ
- edraw-set-properties～edraw-svg-element-set-property～edraw-svg-text-set-textあたり
- edraw-svg-print

プロパティエディタは変更検出のことを考えると早い段階で取り除いた方が良い。理想的には入力したそばから取り除いていくことだが、それができないのであればwidgetからvalueを取得するときに取り除きたいところ。

もちろん edraw-svg-read-propertized-text で読み取ることもあるのだから、そちらでも対処する必要がある。

edraw-svg-element-set-propert系でも取り除くべきだし、edraw-svg-printでも取り除くべきだろう。

つまり文字列を他から取り入れるあらゆる所で取り除くべき。

とはいえ、あえて一箇所に絞れと言われたら、edraw-svg-printだろう。つまりDOMノード上では制御文字を許容しつつ、print時に取り除くことで画像が突然消えることを防ぐ。当然セーブしてロードしたら消える。文字のescape処理(edraw-svg-escape-chars)と一緒に消してしまえば効率が良い。

これだけだとDOM内に無効な文字が残るので、テキストの境界矩形と実際に表示されるテキストのサイズが合わなくなってしまう。やはりプロパティの設定時にも消した方が良いだろう。edraw-svg-remove-invalid-chars関数を追加し、これをedraw-svg-text-set-textから呼び出す。こうすることでプロパティエディタでも文字を入力したそばから消えるようになった。
** DONE edraw-plist-removeのミスを修正する
CLOSED: [2025-01-12 Sun 22:50]
edraw-plist-removeのpredicate引数をちゃんと使っていなかった。
幸いこの引数を利用している場所は無い。
ついでにedraw-plist-remove-firstへ改名する。
[2025-01-14 Tue]追記:edraw-plist-remove-first-keyへ改名した。
** CANCELLED Emacs27でテキスト装飾機能に問題がある
CLOSED: [2025-01-12 Sun 19:52]
- M-oのキーバインドが正しく表示されない。
  substitute-command-keysがfacemenu-keymapを検出してくれない。Emacs28からは大丈夫。
- 入れ子になったtspanに座標が引き継がれない。おそらく古いlibrsvgのバグ。Emacs28以降やブラウザでは問題なく表示される。

+正直Emacs27は装飾機能を無効化しても良いかもしれない。+

Emacs27まではM-oはグローバルマップに割り当てられていた。Emacs28からは必要なモード等だけでローカルに割り当てるように変わった。

Emacs27では関数定義にキーマップをバインドしたシンボルに対するsubstitute-command-keysに何かおかしな挙動がある。

#+begin_src elisp
(progn
  (defvar my-test-keymap nil)
  (setq my-test-keymap (let ((km (make-sparse-keymap "Test"))) (define-key km (kbd "a") 'my-test-a) km))
  (defalias 'my-test-keymap my-test-keymap)
  (defun my-test-a () (interactive) (message "AAAA"))

  (defvar my-test-keymap2 nil)
  (setq my-test-keymap2 (let ((km (make-sparse-keymap))) (define-key km (kbd "C-c d") 'my-test-keymap) km))
  (substitute-command-keys
   "\\<my-test-keymap2>\\[my-test-keymap]"))
#+end_src

#+RESULTS:
: C-c d

これがEmacs27だと結果は ~M-x my-test-keymap~ になる。

おそらくEmacs28で修正されたバグではないか。facemenu-keymapをグローバルから外したときに気がついて修正したとか？

次のコードだとEmacs27でもEmacs30でも正しく動作する。

#+begin_src elisp
;; nilのときは空文字列になる
(key-description
 ;; 割り当てが見つからなければnilを返す
 (where-is-internal 'my-test-keymap (list my-test-keymap2) t))
#+end_src

#+RESULTS:
: C-c d

~(list my-test-keymap2)~ のところが単にmy-test-keymap2だとなぜか見つからない(Emacs30でも)。

よく分からないけど [[https://github.com/emacs-mirror/emacs/commit/120ade62cd26dd502f1ae3784079e4cd88607a0b][Allow keymap to override advertised-binding in docstrings · emacs-mirror/emacs@120ade6]] かな？

試しにwhere-is-internalを使う用に修正してみたが、結局古いlibrsvgの問題で装飾文字が正しい位置に表示されない。

Emacs27ではM-oを表示しないようにして、できるだけ文字装飾機能の存在を隠した方が良い。
** DONE テキスト内で任意のスタイルを指定出来るようにする
CLOSED: [2025-01-14 Tue 14:52]
M-o sでスタイル属性を入力できるようにする。

facemenu-keymapをそのまま使うのは難しいのではないか。
独自のfacemenu-keymap相当を作るにはどうしたら良いか。
そもそもfacemenu-keymapがどのように作られているのか。

→新しいキーマップを作る方が良い。facemenu-keymapは他の用途でカスタマイズされる可能性があるので。facemenu-keymapはシンボルの関数定義としてキーマップを指定できる仕組みを利用している。

tspanに指定出来るプロパティには何があるか。

→沢山ある。

- [[https://developer.mozilla.org/ja/docs/Web/SVG/Element/tspan][<tspan> - SVG: スケーラブルベクターグラフィック | MDN]]
- [[https://svgwg.org/svg2-draft/text.html#TextElement][Text — SVG 2]]

テキストとして関係がありそうなもの:
- fill, fill-opacity
- stroke, stroke-opacity, stroke-width, ...
- font-family
- font-size
- font-size-adjust
- font-stretch
- font-variant
- font-weight
- text-decoration
- dominat-baseline
- vertical-align
- baseline-shift

プロパティを指定したことによって別途対策が必要な事項はあるか。
- font-size : 行送りの量を調整する必要がある。

設定を禁止すべきプロパティはあるか。

→分からない

既存の属性(font-weight, font-style, text-decoration)との兼ね合いをどうするか。

read-stringで直接属性の中身を入力されるのは良くないかもしれない(もしやるならエスケープ処理をしっかり行う必要がある)。プロパティと値を個別に入力させる方が望ましい。プロパティや値にはcompleting-readを使用する。

- facemenu-keymapの代わりを作成する。
  - edraw-svg-text-fmt-keymap。
  - edraw-svg-propertiesというテキストプロパティにSVGプロパティをplistで入れる。
  - edraw-svg-propertiesからfaceを割り出す
  - bold等の文字装飾はedraw-svg-propertiesとfaceの両方を設定する
  - M-o sでedraw-svg-propertiesを直接的に変更し、それに合わせてfaceも更新する
  - SVGプロパティを入力する仕組みを整備する
** DONE ptキーでテキストを変更する
CLOSED: [2025-01-14 Tue 16:46]
** DONE plist-memberの第三引数が使えるのはEmacs29以降
CLOSED: [2025-01-14 Tue 17:57]
なので edraw-plist-remove-first-key と edraw-plist-put の predicate 引数は廃止する。幸い使っていない。
** DONE qキーで別ウィンドウを閉じる
CLOSED: [2025-01-14 Tue 17:37]
同一フレームのプロパティエディタ +やシェイプピッカー+ が開いていれば閉じる。
+別フレームのまでは閉じなくて良い。+

キー割り当てが分かるように一応 View メニューにも入れておく。将来的にはWindowメニューを作ってそこへ移動した方が良いかもしれない。

プロパティエディタ内でもqを押したら閉じるようにする。フィールド上はlocal-mapプロパティが効いているのでqを入力できる。
** DONE 点接続/アンカーポイントを図形の任意の点に確実に接着する
CLOSED: [2025-01-16 Thu 19:58]
アンカーポイントを図形の任意の点に接着できるようにする。現在は図形の辺に接着する。

擬似的にUMLの三分割されたボックスを作れるようにするため。

OBJ(objid x-ratio y-ratio x-offset y-offset)ではアンカーと接着したとき(A(...):OBJ(...))にオブジェクトの指定された点からアンカーの前の点までの直線とオブジェクトの辺との交点を求めてそこへ移動する。アンカーの前の点がオブジェクトの中にある場合に狙った位置にアンカーを固定できない。

なのでOBJPT接続先タイプを追加する。

指定された位置に確実に固定するために OBJPT(objid x-ratio y-ratio x-offset y-offset) を追加する。これはsrcがアンカーであろうとAABBであろうと、確実にsrcの点をオブジェクト内の指定された点に固定する。辺との交点を計算しない。 edraw-point-connection-dst-shape-ptクラスを追加することで実現する。

UIは最低限アンカーのコンテキストメニューから「接着位置設定」できるようにする。

通常の図形間の接着をOBJPTにするかは迷うところ。意味的にはOBJPTにすべきだろうが、すでにOBJにしてしまった。保留。一応どちらに切り替えとも良いようにする。 edraw-point-connection-dst-shape-p を使っている場所があるので edraw-point-connection-dst-shape-pt-p も条件に加える。
** DONE ORG/org-modeでODTへのエクスポートに対応する
CLOSED: [2025-01-27 Mon 22:46]
昔からあったTODOだが、LaTeXと同じ手法で出力できたという指摘([[https://github.com/misohena/el-easydraw/issues/33][ODT Export · Issue #33 · misohena/el-easydraw]])を貰ったので実装することにした。

LaTeXと重複するコードはできるだけまとめた。

しかし実際にテストしてみると、 ~#+CAPTION~ を指定するとエラーが発生することに気がついた。ox-odtはLINK要素がツリーの中でどこにあるかを調べてるようなので、ツリーの外に仮のリンク要素を作るやり方だと正しく判定できないのだと思う。詳しく追ってないけど。

なので、LINK要素のtypeとpathを一時的に書き替える方法で対処することにした。これだと図番が正しく計算できない可能性もあるが、幸いそのようなことは無かった。

ただ、テストしているとリンクのdescription部分に書いてあるedrawリンクがあるとエラーになることが分かった。ただ、これはedrawリンクに限らずどんな画像でもエラーになることも分かった。おそらくorg-modeのバグだと思う。そもそもox-odtでは(CAPTION無しでも)画像リンクが作れないようなので、あまり考慮していないのかもしれない。

org-{html|latex|odt}-inline-image-rules への登録はdescription部分に書かれたリンクを画像化するのに必要。
それだけでなく、特定のリンクを画像化しないようにするのにも使われるかもしれない。
私の改造はそれをちゃんと考慮していないので、何とかした方が良いかもしれない。
** DONE ORG/edrawリンク書き替え中にEmacsがフリーズすることがある
CLOSED: [2025-01-28 Tue 00:26]
description部分にedrawリンクがある時に、末尾の]を削除してからpath部分を書き替えてpathの最後に]を入れたあたりで止まる。いや、最初から末尾を消しただけで止まることもある。何だろう。

例えば次のテキストでフリーズする。

[[https://example.com/][edraw:data=H4sIAEKZl2cAA3VQ2w7CIAz9FdI9Oy764Jaxf1FhQIZgAGX+vcy5zAdN0zZtz2lP2sWHQtPVushBp3RrMc4513lf+6AwI4TggoAF0k7WuPEXkDZNg99TQNmIpDnsjwSQlkbpxIGxUjxkiMY7DrSm0HdBXhKaOJTJ8x3/Eo3gIEU45d35dBlV8HcnAMUU/Cg5OO8koMFYy6EahgEQ7jv1TfLiud5bYcfZth0VJbOtjd1HCtuEULIpZIdF85ymJZWTWBUvz+pf/Ewpx1QBAAA=]

原因は次の * の部分で前のhttpsを拾ってしまうところにある。

: [https://example.com/*][edraw:...

 ~][edraw:...~ にマッチしているのでdescription部分にedrawリンクがあるその全体を拾って欲しいのだが、末尾の]が無いので全体がリンク要素にならず、path部分とdescription部分の二つのplainリンクが出来ていて、そのpath部分を拾ってしまう。

そしてそのリンクは処理対象では無いので結局画像化されないのだが、最後にリンクの末尾にジャンプしてループを終了する。つまり、マッチした先頭と全く同じ位置でループが終了するので、次の検索はまた同じ位置でマッチする。こうして無限ループになる。

対策を二つ講じた。

一つ目は正規表現の1番目の括弧は必ず ~edraw:~ の部分を指すことにした。これによって別のリンクを拾う可能性がほとんど無くなる。
二つ目はループ内で必ず1文字以上先に進むようにした。何か間違いがあってもこれで無限ループは避けられるはず。

様々な書き方があり得るので、全てを予期するのは案外難しい。

[https://example.com/]]edraw:data=H4sIAEKZl2cAA3VQ2w7CIAz9FdI9Oy764Jaxf1FhQIZgAGX+vcy5zAdN0zZtz2lP2sWHQtPVushBp3RrMc4513lf+6AwI4TggoAF0k7WuPEXkDZNg99TQNmIpDnsjwSQlkbpxIGxUjxkiMY7DrSm0HdBXhKaOJTJ8x3/Eo3gIEU45d35dBlV8HcnAMUU/Cg5OO8koMFYy6EahgEQ7jv1TfLiud5bYcfZth0VJbOtjd1HCtuEULIpZIdF85ymJZWTWBUvz+pf/Ewpx1QBAAA=;eop=1

fontify部分は簡単に応答不可能状態を生み出すので安全策は必ず用意すべきだと思った。
** DONE ORG/マッチデータを壊している関数を修正する。
CLOSED: [2025-01-28 Tue 15:29]
次の関数でマッチデータが変更されないようにする。
- edraw-org-link-props-parse
- edraw-org-link-element-path-in-description
string-matchを使用しているのでマッチデータが破壊される。
そのマッチデータを使っている様子は無いし、edraw-org-link-re-searchを実装するときにハマったので。
** DONE ORG/dataリンクの中身を検索・置換する機能を追加する
CLOSED: [2025-01-28 Tue 15:00]
特定の画像ファイルを参照しているかを調べたかったがエンコードされているために通常のやり方では検索できなかった。
これはBase64データ埋め込みの欠点なので、それをカバーする仕組みを用意すべき。

検索:

re-search-forward/backward相当とisearch-forward/backward相当を用意する。

#+begin_src elisp
(cl-loop for i from 0
         for link-info = (edraw-org-link-re-search "hello" nil t)
         while link-info
         for link-element = (nth 0 link-info)
         collect (cons (org-element-property :begin link-element)
                       (org-element-property :end link-element)))
#+end_src

置換:

とりあえずreplace-string/replace-regexp相当を用意する。

#+begin_src elisp
(edraw-org-link-replace-regexp "hello" "HELLO")
#+end_src

こんな感じで隣接している場合でも機能しなければならない。

[[edraw:data=H4sIADqrmGcAA3WQ0W6EIBBFf4VMnxXdTTbRiP9CZQQiggEqbr++o9smfWhDhuRm7rkMM6Rds2N1PgkwOW8956WUutzrEDW/NU3DyQEvS38465e/jG3XdfzqAitWZSPg3jTADFptsoD2RmLHmGzwpOoWxiHilNkhgDrP6/4XtEoAqihL9S6nRcfw4RWwlGNYUIAPHoHN1jkBb/M8A+PjoH9DQT3pvYxH/rG1zXmICj5XyX5STPv4lrNcraOJkvSpShgtJZ5sJf1kQhSwWqUcXjvp0yYngreI5Nzx+sqDgo/X6KNB5wIrITrFTNB41sDPuHHgmoq2O34BDA0L5YUBAAA=]][[https://example.com/][edraw:data=H4sIAIOamGcAA72R0W6EIBBFf4VMnxV0k81qxH+xgkBEMMCK26/v6HaTfWhfGwLJZM693IEuborsi3WRg05pbSnNOZf5UvqgaM0Yo0jAE2l3a9z8G1g1TUPPLpBsRNIcLowB0dIonTjUR7HJEI13HKqygr4Lckxk54Cdx3n+KTSCgxRhyMXnMM4q+LsTQGIKfpYcnHcSyGSs5fAxTRMQ2nfqXeTFA+9Lck8vrGLHQpV3qYjmC22q6085DYuxmCgOLhZRBoOOh7YY3Kh94LAYIaw836SN6zCieA0SyU2eo1zRGOeqawa9ltZ6kn2YO3qY/GOM6vbMcXuPYcUrB1W48W/7b4nzOR8DAgAA]]

query-replace/query-replace-regexp相当は保留。一時的なバッファを表示して確認を取るようなコマンドを作りたい。
** DONE link-elementをlink-objectへ置き換える。
CLOSED: [2025-01-30 Thu 18:05]
org-modeの用語では、linkはelementではなくobjectだと思う。
ただ、構文木ノードの事を単にelementと呼ぶことはあるので必ずしも間違いとは言えなさそう。org-element-ast.elの冒頭コメント参照。
とは言えorg-modeのソースコードの中でもlink-elementは無いがlink-objectは使われている。
置き換えた方が後々迷わずに済む。
** DONE ORG/edraw-org-link-at-pointの意味を明確にする
CLOSED: [2025-01-30 Thu 18:46]
隣接したリンクの間にpointがあるときedraw-org-link-at-pointはどちらに反応するのか。

#+begin_src elisp
(progn
  (re-search-forward org-link-any-re)
  (org-element-property :begin (edraw-org-link-at-point)))
#+end_src

edraw-org-link-at-pointはorg-element-contextを使っているが、org-element-contextはpointが二つの要素の間にあるとき、後(右)の要素を返す。後に何もない場合は前(左)の要素を返す。org-element-contextの説明には「As a special case, if point is right after an object and not at the beginning of any other object, return that object.」と書かれているのでこれは意図的な動作。[[file:example]]@@html:FOO@@ のようにリンクでは無い要素と隣接しているとedraw-org-link-at-pointはnilを返すことになる。

[[edraw:data=H4sIAOO9mGcAA3WQWw6DIBBFt0Km3wraHzXiXqw8o4UGqejui6/YjzYTIDwO92TqcZIoaOYVhSwngBTXUvljMz8HM1JQ3r8qjEMIabin1kmcE0JwRAFN3I3amgik2QFU86BN/wvLyrLE2y00teOdRzOFmLNs818NzShw5tqQPNqul86+DQM0emd7TsFYwwEJPQwUbkIIQLip5Tdk2XLmnc+Kta4/bhlZ6zxIDpX8EikuwWI33hq0LzEQyzhiR5oPXXar4FIBAAA=]][[edraw:data=H4sIAPS9mGcAA3WQXQ7CIBCEr0LWZwvUmLRN6V20UEqKYACl3t5tU38eNBvYDMswX2jjXZNsZBoFHBgDMiqjxySgLFHMF+uigDGla0NpzrnIh8IHTUvGGEUrkLsK0XgngBd8MzSzNW76ZeN1XdN1Cl0bVJ/ILABzHuv+F8NIAUqGU96fT/2kg785CSSm4CclwHmngAzGWgG7YRiA0K7V3yYvH5inrDXXqN43q6U+z+w4W+p1sN9oSiAB8Y44CAhbYe9R10tHzRc+zKMaF35I9wSK8vqyUQEAAA==]]

その辺りをdocstringに書く。
** DONE ORG/edraw-org-link-replace-at-pointを見直す
CLOSED: [2025-01-30 Thu 18:57]
この関数はどのリンクを置き換えるのかが明確では無い。
ポイントの直前のリンクは拾うのか(→現状では拾う)。
ポイントの前後に別々のリンクが隣接していた場合にどちらを置き換えるのか(→現状では前のリンクを拾う！)。

このような問題に悩まされないように、link要素を指定して置き換えるような関数が欲しい。

org-in-regexpが末尾を含むのがくせ者。それも前から検索して最初に見つけた物を返すので、ポイントの直前にあるリンクが直後にあるリンクよりも優先されてしまう。ドキュメントには次のように書いてある。

#+begin_quote
Normally only the current line is checked, but you can include
NLINES extra lines around point into the search.  If VISUALLY is
set, require that the cursor is not after the match but really
on, so that the block visually is on the match.
#+end_quote

#+begin_quote
通常は現在の行のみがチェックされますが、ポイントの周囲の NLINES 行も検索に含めることができます。

VISUALLY が設定されている場合、カーソルが一致の後ではなく実際に一致の上にあることを要求し、ブロックが視覚的に一致の上にあるようにします。
#+end_quote

実装を読んでみてもvisuallyがnilのときはマッチする範囲の末尾がpointと同じならその範囲を採用するようになっている。後ろにマッチする範囲があったとしても。非nilの時は厳密な半開区間チェックになっている。

visuallyを非nilにすれば問題を回避できる。

org-in-regexpに依存している関数:

- org-in-regexp
  - edraw-org-link-replace-at-point
    - edraw-org-link-replace-at
      - edraw-org-link-replace
        - edraw-org-link-replace-regexp
          - edraw-org-link-replace-string
    - edraw-org-link-convert-at-point
      - edraw-org-link-convert-to-edraw-data-link-at-point
      - edraw-org-link-convert-to-edraw-file-link-at-point
      - edraw-org-link-convert-to-normal-file-link-at-point
    - edraw-org-link-save-svg
      - edraw-org-link-make-writer
        - edraw-org-edit-link

基本的にはこの関数がリンクの後ろにpointがあるときに反応は無くなってもそれほど困ることは無さそう。edraw-org-link-convert-at-point系の関数は使い勝手が悪くなるかもしれないけど。

- pointが末尾と一致するリンクを選ぶとしても、pointが先頭と一致するリンクの方が優先されるべき。
- そもそもorg-elementでリンクの範囲を正確に特定しているケースでorg-in-regexpで再度検索するのはおかしい。

org-in-regexpを使う必要は無い。リンクの先頭位置が分かっているならlooking-atで十分(ちなみにorg-elementのリンク要素は:beginと:endくらいしかめぼしい位置情報を持たないので、部分を置き換えるには何らかの正規表現マッチングは必須)。

1. (edraw-org-link-replace-beginning-at begin new-text part)を作成する。これは厳密にリンクの開始位置を要求する関数。
2. そしてこれを使ったlink-elementを要求する(edraw-org-link-replace-element link-element new-text part)を作成する。基本的にどの用途においてもまず最初にedraw-org-link-at-pointでlink-elementを特定しているのだから、これだけで十分だ。replaceするのにreplaceする対象のことをよく知らず何となくpointだけ指定したいなどという状況がそもそもあり得ない。
3. edraw-org-link-replace-elementを使うように変更する。その際この関数は引き渡した link-element が無効になる点に注意。置換するとリンクの長さが変わって:endが指す位置が無意味になる可能性があるので(たまたま長さが変わらない置換で無い限り)。

これによってリンクが隣接したときに後ろのリンクをマウスで編集・編集終了したときに前のリンクが書き換わってしまうというバグは直った。
** DONE ORG/リンクが隣接しているときに右のリンクを操作できないのを直す
CLOSED: [2025-01-30 Thu 23:41]

- 後のリンクがキーで操作できない
- そもそも画像化された二つのedrawリンク間にポイントを移動できない

後はそもそもリンク間にポイントが置けない問題。

[[edraw:data=H4sIAMJQm2cAA3WQyw6DIBBFf4WMawWsi2rEf7GCSLTQIBX9++IrdtFmAoTH4Z5MOU4SecVdx4BmBFAnlOzcsZmfgx4ZdM69Coy994m/JcZKnBJCcEABTcKOyugAJPQAinlQuv+F0TzP8XYLVWlF49DMIOQs2/xXQ3EGgtvax4+66aU1b80Bjc6aXjDQRgtArRoGBlHbtoBwVcpvyPDlzDuf3de6/ogoWes8iA+V9BLJLsFsN94atC8hEMswQkeqD0GS7qJSAQAA]][[edraw:data=H4sIAP+Jm2cAA5VRwZLCIAz9FSaeLaAeWqf0X9xCKVMEB1jBvzdtp+ph9+BkIJPkvSQP2njXpFytiwLGlG5nSnPOVT5WPmh6YIxRRMAKORdr3PQXkDdNQ5cqkGxkGgUgF8iojB6TAF5jcFchGu8wqjh0bVB9IkUAVh7L/S/RSAFKhkve/1z6SQf/6ySQmIKflADnnQIyGGsF7IZhAEK7Vn+SvHzgPGWtuUX1QtazvdvsOJttS+y3bYAEXO+IhVBW32PMZ2SPiYYt8xYxX3feVJ7e6uv1OQ7oyuqwO9V48B+6JyX7B5avAQAA]]

これは考えてみると結構不思議な問題。通常、オーバーレイなりテキストプロパティなりで画像作成し、それを二つ並べてもちゃんと独立してポイントを置ける。なんで置けないんだろう。ひょっとしてorg-modeがすでにリンクとしてfontifyしていることが何か関係ある？

あー、 ~]][[~ の部分は全部invisibleだからポイントを置けないのか。見える所にしか置けない。実際普通のリンクを二つ並べてみれば ([[file:aaa]][[file:bbb]] ) ]]と[[の間にポイントを置けないことが分かる。C-c C-x C-nで移動して切り取ると一つ目のリンクのパス部分の末尾からしか切り取れないや。

というかこれインライン画像も同じだよね。当たり前だけど。

#+ATTR_ORG: :width 100
[[file:screenshot/color-picker-minibuffer.png]][[file:screenshot/color-picker-minibuffer.png]]

M-x org-toggle-link-display でリンクの一部を隠さないようにすればちゃんと個別に操作できる。

overlayにinvisibleプロパティを指定してキャンセルしたらうまく行くだろうか。そのとき気になるのは折りたたみによってちゃんと消えるのだろうか。ちょっと前のorg-modeはテキストプロパティによる折りたたみが導入されていたような記憶があるけど。(See: [[elisp-variable:org-fold-core-style]])

たとえば次のコードを評価するとリンクの隠れた部分が現れる。

#+begin_src elisp
(progn
  (re-search-forward "\\[\\[file:README.org]]")
  (let ((ov (make-overlay (match-beginning 0) (match-end 0))))
    (overlay-put ov 'evaporate t)
    (overlay-put ov 'invisible 'dummy)
    ;;(overlay-put ov 'display "<<OVERLAYHERE>>")
    ))
#+end_src

[[file:README.org]]

しかしorg-fold-core-styleを'text-propertiesにしてから開き直して再度試すと全体を折りたたんだときでもリンクが表示されてしまうことが分かる。

#+begin_src elisp
(setq org-fold-core-style 'text-properties)
;; (setq org-fold-core-style 'overlays)
#+end_src

やはりテキストプロパティよりオーバーレイが優先されてしまうので、折りたためなくなってしまう。

それよりもリンク自体のinvisibleを解除してしまった方が早くないだろうか。
うーん、でもそれ自体org-foldが書き替えてしまう可能性があるのでは無いか。

この辺りは下手にいじるとorg-foldと干渉する可能性があるので難しい。

(そもそも隣接した二つのリンクの間にポイントを置けないのはOrg-modeの問題のような気がするが……)

[[elisp-variable:org-activate-links]]のコードを読んでみると、 org-link-parametersに:displayというプロパティがある。これを使ってedrawリンクは(少なくともedraw-org-link-image-modeのときは)フルオープンにしてしまってはどうか。fullではなくbuffer-invisibility-specにedraw-org-linkなんてものを追加して……、いや、それだと画像化されていないリンクの一部を隠せないか。

画像化するときに一緒にinvisibleテキストプロパティを消してしまうのが一番手っ取り早そう。どうせ[[elisp-variable:org-activate-links]]の後に画像化してるんだし。

画像化されていないリンクの間にポイントを置けないのはそれこそorg-modeの問題だ。
** DONE カラーピッカーのset-transient-mapの間違った使い方を直す
CLOSED: [2025-02-01 Sat 15:04]
set-transient-mapを利用している一部のコマンド(バッファテキストを置き換えるコマンド)において、マウスでOKやCancelを選ぶと一時マップが終了せず、次のC-c C-cで閉じたはずのカラーピッカーのOKボタンを押してしまい、再度テキストを置き換えようとしてしまうのを直す。
特にCustomizeバッファの場合、C-c C-cは設定の反映に割り当てられているので、それが食われて設定が反映されなかったり、フィールド以外の部分を書き替えようとしてエラーになる。CSSやHTMLなどで使っても置き換えが二回発生しておかしな結果が生じる原因になる。

set-transient-mapは一時マップを終了させるための関数を返すので、それをOKやCancelの時は呼び出す。

okやcancelフックで行うのは場当たり的なので、closedフックを追加する。
** DONE カラーピッカーがEmacs28でエラーが出る
CLOSED: [2025-02-01 Sat 22:39]
imagepはEmacs29からじゃないと使えない。Emacs28以前にもimage.c内に存在するが、GLYPH_DEBUGが非0でないとコンパイルされない。
なぜedraw-color-picker.elだけimagepを使っているのかよく分からない。とりあえずconspと念のためignore-errorsで囲む二段構えの対策を打った。
** DONE カラーピッカーでキーによるrecent-colorsの選択が動作しない
CLOSED: [2025-02-01 Sat 22:10]
バッファ内の色を変更するコマンド(edraw-color-picker-insert-colorやedraw-color-picker-replace-color-at)において、キーによる「最近使った色」の選択(C-1～C-0に割り当てられている)が効かない。

第一に、ツールチップに正しいキー割り当てが表示されない。
これは set-transient-map が overriding-terminal-local-map を設定するからで、 substitute-command-keys は overriding-terminal-local-map を無視することが原因。
optionsに :transient-keymap-var を追加して明示的にキーバインド割り出しに使用するキーマップを指定する。

第二に、押しても色が選択されない。
これはコマンドが現在のカラーピッカーオブジェクトを特定できないから。
set-transient-map を使用するときは、同時に現在使用中のカラーピッカーオブジェクトを変数に記録して、特定できるようにすることで解決する。
** DONE カラーピッカーがEmacs29でキーによる最近使った色の選択時に更新されない
CLOSED: [2025-02-01 Sat 23:38]
バッファ内の色を変更するコマンド(edraw-color-picker-insert-colorやedraw-color-picker-replace-color-at)において、キーによる「最近使った色」の選択(C-1～C-0に割り当てられている)時にカラーピッカーの画像が更新されない。

原因はキーを押したフレームと別のフレームを更新しているため。
子フレーム化を無効にすれば正常に更新される。
image-flushのframe引数を正しいフレームまたはtに設定すれば回避できる。
Emacs30.0.93ではなぜかnilでも更新される。
** DONE カラーピッカーで子フレームがフレーム外に出ないようにする
CLOSED: [2025-02-02 Sun 11:04]
私の環境でウィンドウを上下に分割にして、下のウィンドウの半分くらいの高さでedraw-color-picker-insert-colorするとカラーピッカーフレームがフレームの下端より下にはみ出す。
上端ははみ出さないようになっているみたい。
どちらもウィンドウの範囲に収めるように努力してダメだったら下にはみ出させるような動作をしている。
フレームの範囲を考慮していない。
最悪ポイント位置に被っても構わないはず。
1. ウィンドウ内のポイントの上
2. ウィンドウ内のポイントの下
3. フレーム内のより広い方(上または下)
4. フレーム内に強制的に収める(カーソルに被っても構わない)
5. フレームの高さが足りないなら上に合わせる

水平方向については
1. ポイントの位置がピッカーの中心になるように
2. 左優先でウィンドウ内に強制的に収める
3. ウィンドウからはみ出るなら、左優先でフレーム内に強制的に収める
** DONE 色/M-pやM-nで最近使った色にアクセスしたい
CLOSED: [2025-02-02 Sun 14:28]
ミニバッファと一時マップの場合を分けて考える必要がある。
** DONE 色/カラーピッカーに固定のカラーパレットが欲しいかも？
CLOSED: [2025-02-04 Tue 16:04]
特定の色集合を保持し続けられるようなやつ。

ファイルとの読み書きも出来ると良い。

どうやって変更する？　右クリックしてメニューを出して「変更」とか？
+いや、パレット項目をクリックするとその色がピッカーの現在の選択色になると同時に選択マークが付いて、その状態でピッカーやrecent colorsで色を選ぶとそのパレット項目の色がそれに変わるようにする。もう一度パレット項目をクリックすると単に選択を解除するだけ。キャンセルでその変更は記録しない。OKでパレットの変更を記録。+

カラーピッカーの下部、最近の色の上に最近の色と同様のUIを追加する。

基本的には最近の色と同じ構造なので、できるだけ各部を共通化する。

- areaの作成部分 (edraw-color-picker-area-palette-entryクラスを新設)
- optionsやそれが未指定時の時に使う変数へのアクセス (edraw-color-picker-palette-modelクラスを新設)
- 右クリックの処理を追加。前段階はmouse-1に対する処理をmouse-1とmouse-3の共用にする。areaへのディスパッチの段階ではon-r-clickイベントを追加する
- C-1からC-0までのキー割り当ては固定パレットの選択に割り当てる。最近使った色はM-p/M-nで選択出来るので
- レイアウト・寸法を全体的に微調整する。上下のpaddingを減らす。Recent Colorsの文字を小さく薄くする
- パレットエントリーの幅を少しだけ大きくして空白を減らす
- パレットエントリーが右にわずかにずれていたり、個数の計算が間違っていたりするのを直す
- ついでに色々修正
  - modelに関する物は先頭へ移動
  - observableからobservable-valueを分離
  - palette-modelとcolor-picker-modelはobservableにする
  - observableの中身のhooksをedraw-hookへ変更
  - observableのedraw-add-hookはedraw-add-change-hookへ変更
** DONE edraw-luminanceをedraw-relative-luminanceへ改名する
CLOSED: [2025-02-04 Tue 16:05]
紛らわしいので。
** DONE 色/色挿入・置き換えコマンドでは現在の色を文字列でエコーする
CLOSED: [2025-02-04 Tue 16:10]
現在選択している色が数値で分からないので。
** DONE 色/色が無彩色の時、色相を最後に使ったものにする
CLOSED: [2025-02-04 Tue 16:48]
開いたときの初期値が黒の場合、色相は最後に選んだときのものにする(?)。
例え無彩色を選択したとしても、その時の色相値は必ず保存すべき。
できればfill、strokeは別個に色相値を保持したい。

recent-colorsから最後に使った有彩色を求めようと思ったが、必ずしも良いとは言えなそう。キャンセルする場合だってあるわけだし。

それよりも単純にグローバル変数に最後にスライダーで選択した色相を保存しておく方が、最終的に使い勝手は良さそう。理想は色をRGBではなくHSBで直接保持することだけど、さすがに今から全部を直すわけにも行かないし、そもそもSVGでHSBは表現できないはず。HSLで表現して変換するという手もあるけど。
** DONE edrawで作成した図が非ASCII文字を入れると読み込めない
CLOSED: [2025-02-07 Fri 17:41]
私の環境では ~(set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)~ という設定があるから読み込めるが、そうでない設定だとUTF-8と認識できず読み込めない場合がある。Windowsの日本語環境でもデフォルトではちゃんと読み込めない。

with-coding-priorityという便利なマクロがあるので、これでUTF-8を優先させる。
XML宣言でencodingが指定されている場合は、auto-coding-functionsに設定されたsgml-xml-auto-coding-functionによってエンコーディングが解決される。念のためこれも強制する。

edraw-insert-xml-file-contentsという関数を追加して、SVGファイルをバッファへ挿入するときは必ずこれを使うようにする。
** DONE HSV(HSB)とHSLからRGBへ変換する関数を追加する
CLOSED: [2025-02-07 Fri 22:12]
HSLは今でもあるが、HSVからの変換と合わせて作り直す。
